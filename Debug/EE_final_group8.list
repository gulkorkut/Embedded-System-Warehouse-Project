
EE_final_group8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007660  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  08007770  08007770  00017770  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c14  08007c14  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08007c14  08007c14  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007c14  08007c14  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c14  08007c14  00017c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c18  08007c18  00017c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08007c1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  200001e8  08007e04  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08007e04  00020348  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f11e  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023f5  00000000  00000000  0002f32f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef8  00000000  00000000  00031728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e28  00000000  00000000  00032620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000190c9  00000000  00000000  00033448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010390  00000000  00000000  0004c511  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008edce  00000000  00000000  0005c8a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eb66f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050e8  00000000  00000000  000eb6c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08007758 	.word	0x08007758

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08007758 	.word	0x08007758

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
           uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08e      	sub	sp, #56	; 0x38
 80010d4:	af0a      	add	r7, sp, #40	; 0x28
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	4608      	mov	r0, r1
 80010da:	4611      	mov	r1, r2
 80010dc:	461a      	mov	r2, r3
 80010de:	4603      	mov	r3, r0
 80010e0:	817b      	strh	r3, [r7, #10]
 80010e2:	460b      	mov	r3, r1
 80010e4:	813b      	strh	r3, [r7, #8]
 80010e6:	4613      	mov	r3, r2
 80010e8:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 80010ea:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <LiquidCrystal+0x90>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d019      	beq.n	8001126 <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80010f2:	8939      	ldrh	r1, [r7, #8]
 80010f4:	897a      	ldrh	r2, [r7, #10]
 80010f6:	2300      	movs	r3, #0
 80010f8:	9308      	str	r3, [sp, #32]
 80010fa:	2300      	movs	r3, #0
 80010fc:	9307      	str	r3, [sp, #28]
 80010fe:	2300      	movs	r3, #0
 8001100:	9306      	str	r3, [sp, #24]
 8001102:	2300      	movs	r3, #0
 8001104:	9305      	str	r3, [sp, #20]
 8001106:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001108:	9304      	str	r3, [sp, #16]
 800110a:	8c3b      	ldrh	r3, [r7, #32]
 800110c:	9303      	str	r3, [sp, #12]
 800110e:	8bbb      	ldrh	r3, [r7, #28]
 8001110:	9302      	str	r3, [sp, #8]
 8001112:	8b3b      	ldrh	r3, [r7, #24]
 8001114:	9301      	str	r3, [sp, #4]
 8001116:	88fb      	ldrh	r3, [r7, #6]
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	460b      	mov	r3, r1
 800111c:	68f9      	ldr	r1, [r7, #12]
 800111e:	2001      	movs	r0, #1
 8001120:	f000 f820 	bl	8001164 <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 8001124:	e018      	b.n	8001158 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 8001126:	8939      	ldrh	r1, [r7, #8]
 8001128:	897a      	ldrh	r2, [r7, #10]
 800112a:	2300      	movs	r3, #0
 800112c:	9308      	str	r3, [sp, #32]
 800112e:	2300      	movs	r3, #0
 8001130:	9307      	str	r3, [sp, #28]
 8001132:	2300      	movs	r3, #0
 8001134:	9306      	str	r3, [sp, #24]
 8001136:	2300      	movs	r3, #0
 8001138:	9305      	str	r3, [sp, #20]
 800113a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800113c:	9304      	str	r3, [sp, #16]
 800113e:	8c3b      	ldrh	r3, [r7, #32]
 8001140:	9303      	str	r3, [sp, #12]
 8001142:	8bbb      	ldrh	r3, [r7, #28]
 8001144:	9302      	str	r3, [sp, #8]
 8001146:	8b3b      	ldrh	r3, [r7, #24]
 8001148:	9301      	str	r3, [sp, #4]
 800114a:	88fb      	ldrh	r3, [r7, #6]
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	460b      	mov	r3, r1
 8001150:	68f9      	ldr	r1, [r7, #12]
 8001152:	2000      	movs	r0, #0
 8001154:	f000 f806 	bl	8001164 <init>
}
 8001158:	bf00      	nop
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000000 	.word	0x20000000

08001164 <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
       uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
       uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	4611      	mov	r1, r2
 800116e:	461a      	mov	r2, r3
 8001170:	4603      	mov	r3, r0
 8001172:	73fb      	strb	r3, [r7, #15]
 8001174:	460b      	mov	r3, r1
 8001176:	81bb      	strh	r3, [r7, #12]
 8001178:	4613      	mov	r3, r2
 800117a:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 800117c:	4a19      	ldr	r2, [pc, #100]	; (80011e4 <init+0x80>)
 800117e:	89bb      	ldrh	r3, [r7, #12]
 8001180:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 8001182:	4a19      	ldr	r2, [pc, #100]	; (80011e8 <init+0x84>)
 8001184:	88fb      	ldrh	r3, [r7, #6]
 8001186:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8001188:	4a18      	ldr	r2, [pc, #96]	; (80011ec <init+0x88>)
 800118a:	8b3b      	ldrh	r3, [r7, #24]
 800118c:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 800118e:	4a18      	ldr	r2, [pc, #96]	; (80011f0 <init+0x8c>)
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	6013      	str	r3, [r2, #0]

  _data_pins[0] = d0;
 8001194:	4a17      	ldr	r2, [pc, #92]	; (80011f4 <init+0x90>)
 8001196:	8bbb      	ldrh	r3, [r7, #28]
 8001198:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 800119a:	4a16      	ldr	r2, [pc, #88]	; (80011f4 <init+0x90>)
 800119c:	8c3b      	ldrh	r3, [r7, #32]
 800119e:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 80011a0:	4a14      	ldr	r2, [pc, #80]	; (80011f4 <init+0x90>)
 80011a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80011a4:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3;
 80011a6:	4a13      	ldr	r2, [pc, #76]	; (80011f4 <init+0x90>)
 80011a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80011aa:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 80011ac:	4a11      	ldr	r2, [pc, #68]	; (80011f4 <init+0x90>)
 80011ae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80011b0:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 80011b2:	4a10      	ldr	r2, [pc, #64]	; (80011f4 <init+0x90>)
 80011b4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80011b6:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 80011b8:	4a0e      	ldr	r2, [pc, #56]	; (80011f4 <init+0x90>)
 80011ba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80011bc:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 80011be:	4a0d      	ldr	r2, [pc, #52]	; (80011f4 <init+0x90>)
 80011c0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80011c2:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80011ca:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <init+0x94>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	701a      	strb	r2, [r3, #0]
  else
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;

 // begin(16, 2);
}
 80011d0:	e002      	b.n	80011d8 <init+0x74>
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80011d2:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <init+0x94>)
 80011d4:	2210      	movs	r2, #16
 80011d6:	701a      	strb	r2, [r3, #0]
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	20000206 	.word	0x20000206
 80011e8:	20000208 	.word	0x20000208
 80011ec:	2000020a 	.word	0x2000020a
 80011f0:	2000021c 	.word	0x2000021c
 80011f4:	2000020c 	.word	0x2000020c
 80011f8:	20000220 	.word	0x20000220

080011fc <begin>:

void begin(uint8_t cols, uint8_t lines) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	460a      	mov	r2, r1
 8001206:	71fb      	strb	r3, [r7, #7]
 8001208:	4613      	mov	r3, r2
 800120a:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 800120c:	79bb      	ldrb	r3, [r7, #6]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d906      	bls.n	8001220 <begin+0x24>
    _displayfunction |= LCD_2LINE;
 8001212:	4b77      	ldr	r3, [pc, #476]	; (80013f0 <begin+0x1f4>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	f043 0308 	orr.w	r3, r3, #8
 800121a:	b2da      	uxtb	r2, r3
 800121c:	4b74      	ldr	r3, [pc, #464]	; (80013f0 <begin+0x1f4>)
 800121e:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 8001220:	4a74      	ldr	r2, [pc, #464]	; (80013f4 <begin+0x1f8>)
 8001222:	79bb      	ldrb	r3, [r7, #6]
 8001224:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);
 8001226:	79fa      	ldrb	r2, [r7, #7]
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	3340      	adds	r3, #64	; 0x40
 800122c:	2140      	movs	r1, #64	; 0x40
 800122e:	2000      	movs	r0, #0
 8001230:	f000 f962 	bl	80014f8 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8001234:	4b70      	ldr	r3, [pc, #448]	; (80013f8 <begin+0x1fc>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d009      	beq.n	8001250 <begin+0x54>
 800123c:	79bb      	ldrb	r3, [r7, #6]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d106      	bne.n	8001250 <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 8001242:	4b6b      	ldr	r3, [pc, #428]	; (80013f0 <begin+0x1f4>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	f043 0304 	orr.w	r3, r3, #4
 800124a:	b2da      	uxtb	r2, r3
 800124c:	4b68      	ldr	r3, [pc, #416]	; (80013f0 <begin+0x1f4>)
 800124e:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 8001250:	f000 f8e4 	bl	800141c <enableClock>

  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8001254:	2303      	movs	r3, #3
 8001256:	617b      	str	r3, [r7, #20]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 8001258:	2301      	movs	r3, #1
 800125a:	60fb      	str	r3, [r7, #12]

  if(_fourbit_mode)
 800125c:	4b67      	ldr	r3, [pc, #412]	; (80013fc <begin+0x200>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d01b      	beq.n	800129c <begin+0xa0>
  gpio_init.Pin = _rs_pin |_rw_pin |_enable_pin |_data_pins[0] |_data_pins[1]| _data_pins[2] |_data_pins[3];
 8001264:	4b66      	ldr	r3, [pc, #408]	; (8001400 <begin+0x204>)
 8001266:	881a      	ldrh	r2, [r3, #0]
 8001268:	4b66      	ldr	r3, [pc, #408]	; (8001404 <begin+0x208>)
 800126a:	881b      	ldrh	r3, [r3, #0]
 800126c:	4313      	orrs	r3, r2
 800126e:	b29a      	uxth	r2, r3
 8001270:	4b65      	ldr	r3, [pc, #404]	; (8001408 <begin+0x20c>)
 8001272:	881b      	ldrh	r3, [r3, #0]
 8001274:	4313      	orrs	r3, r2
 8001276:	b29a      	uxth	r2, r3
 8001278:	4b64      	ldr	r3, [pc, #400]	; (800140c <begin+0x210>)
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	4313      	orrs	r3, r2
 800127e:	b29a      	uxth	r2, r3
 8001280:	4b62      	ldr	r3, [pc, #392]	; (800140c <begin+0x210>)
 8001282:	885b      	ldrh	r3, [r3, #2]
 8001284:	4313      	orrs	r3, r2
 8001286:	b29a      	uxth	r2, r3
 8001288:	4b60      	ldr	r3, [pc, #384]	; (800140c <begin+0x210>)
 800128a:	889b      	ldrh	r3, [r3, #4]
 800128c:	4313      	orrs	r3, r2
 800128e:	b29a      	uxth	r2, r3
 8001290:	4b5e      	ldr	r3, [pc, #376]	; (800140c <begin+0x210>)
 8001292:	88db      	ldrh	r3, [r3, #6]
 8001294:	4313      	orrs	r3, r2
 8001296:	b29b      	uxth	r3, r3
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	e02a      	b.n	80012f2 <begin+0xf6>
  else
  gpio_init.Pin =_rs_pin |_rw_pin |_enable_pin |_data_pins[0] |_data_pins[1]| _data_pins[2] |_data_pins[3] |_data_pins[4] |_data_pins[5] |_data_pins[6] |  _data_pins[7];
 800129c:	4b58      	ldr	r3, [pc, #352]	; (8001400 <begin+0x204>)
 800129e:	881a      	ldrh	r2, [r3, #0]
 80012a0:	4b58      	ldr	r3, [pc, #352]	; (8001404 <begin+0x208>)
 80012a2:	881b      	ldrh	r3, [r3, #0]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	4b57      	ldr	r3, [pc, #348]	; (8001408 <begin+0x20c>)
 80012aa:	881b      	ldrh	r3, [r3, #0]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	4b56      	ldr	r3, [pc, #344]	; (800140c <begin+0x210>)
 80012b2:	881b      	ldrh	r3, [r3, #0]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	4b54      	ldr	r3, [pc, #336]	; (800140c <begin+0x210>)
 80012ba:	885b      	ldrh	r3, [r3, #2]
 80012bc:	4313      	orrs	r3, r2
 80012be:	b29a      	uxth	r2, r3
 80012c0:	4b52      	ldr	r3, [pc, #328]	; (800140c <begin+0x210>)
 80012c2:	889b      	ldrh	r3, [r3, #4]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	4b50      	ldr	r3, [pc, #320]	; (800140c <begin+0x210>)
 80012ca:	88db      	ldrh	r3, [r3, #6]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	4b4e      	ldr	r3, [pc, #312]	; (800140c <begin+0x210>)
 80012d2:	891b      	ldrh	r3, [r3, #8]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	4b4c      	ldr	r3, [pc, #304]	; (800140c <begin+0x210>)
 80012da:	895b      	ldrh	r3, [r3, #10]
 80012dc:	4313      	orrs	r3, r2
 80012de:	b29a      	uxth	r2, r3
 80012e0:	4b4a      	ldr	r3, [pc, #296]	; (800140c <begin+0x210>)
 80012e2:	899b      	ldrh	r3, [r3, #12]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	4b48      	ldr	r3, [pc, #288]	; (800140c <begin+0x210>)
 80012ea:	89db      	ldrh	r3, [r3, #14]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	60bb      	str	r3, [r7, #8]

  HAL_GPIO_Init(_port, &gpio_init);
 80012f2:	4b47      	ldr	r3, [pc, #284]	; (8001410 <begin+0x214>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f107 0208 	add.w	r2, r7, #8
 80012fa:	4611      	mov	r1, r2
 80012fc:	4618      	mov	r0, r3
 80012fe:	f001 fe41 	bl	8002f84 <HAL_GPIO_Init>
// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
// according to datasheet, we need at least 40ms after power rises above 2.7V
// so we'll wait 50 just to make sure
  HAL_Delay(50);
 8001302:	2032      	movs	r0, #50	; 0x32
 8001304:	f001 f832 	bl	800236c <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 8001308:	4b41      	ldr	r3, [pc, #260]	; (8001410 <begin+0x214>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a3c      	ldr	r2, [pc, #240]	; (8001400 <begin+0x204>)
 800130e:	8811      	ldrh	r1, [r2, #0]
 8001310:	2200      	movs	r2, #0
 8001312:	4618      	mov	r0, r3
 8001314:	f001 ffb2 	bl	800327c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8001318:	4b3d      	ldr	r3, [pc, #244]	; (8001410 <begin+0x214>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a3a      	ldr	r2, [pc, #232]	; (8001408 <begin+0x20c>)
 800131e:	8811      	ldrh	r1, [r2, #0]
 8001320:	2200      	movs	r2, #0
 8001322:	4618      	mov	r0, r3
 8001324:	f001 ffaa 	bl	800327c <HAL_GPIO_WritePin>

  if (_rw_pin != 255) {
 8001328:	4b36      	ldr	r3, [pc, #216]	; (8001404 <begin+0x208>)
 800132a:	881b      	ldrh	r3, [r3, #0]
 800132c:	2bff      	cmp	r3, #255	; 0xff
 800132e:	d007      	beq.n	8001340 <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8001330:	4b37      	ldr	r3, [pc, #220]	; (8001410 <begin+0x214>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a33      	ldr	r2, [pc, #204]	; (8001404 <begin+0x208>)
 8001336:	8811      	ldrh	r1, [r2, #0]
 8001338:	2200      	movs	r2, #0
 800133a:	4618      	mov	r0, r3
 800133c:	f001 ff9e 	bl	800327c <HAL_GPIO_WritePin>
  }

  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 8001340:	4b2b      	ldr	r3, [pc, #172]	; (80013f0 <begin+0x1f4>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	f003 0310 	and.w	r3, r3, #16
 8001348:	2b00      	cmp	r3, #0
 800134a:	d115      	bne.n	8001378 <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 800134c:	2003      	movs	r0, #3
 800134e:	f000 f9f3 	bl	8001738 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8001352:	2005      	movs	r0, #5
 8001354:	f001 f80a 	bl	800236c <HAL_Delay>

    // second try
    write4bits(0x03);
 8001358:	2003      	movs	r0, #3
 800135a:	f000 f9ed 	bl	8001738 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 800135e:	2005      	movs	r0, #5
 8001360:	f001 f804 	bl	800236c <HAL_Delay>

    // third go!
    write4bits(0x03);
 8001364:	2003      	movs	r0, #3
 8001366:	f000 f9e7 	bl	8001738 <write4bits>
    HAL_Delay(1);
 800136a:	2001      	movs	r0, #1
 800136c:	f000 fffe 	bl	800236c <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02);
 8001370:	2002      	movs	r0, #2
 8001372:	f000 f9e1 	bl	8001738 <write4bits>
 8001376:	e01d      	b.n	80013b4 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 8001378:	4b1d      	ldr	r3, [pc, #116]	; (80013f0 <begin+0x1f4>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	f043 0320 	orr.w	r3, r3, #32
 8001380:	b2db      	uxtb	r3, r3
 8001382:	4618      	mov	r0, r3
 8001384:	f000 f953 	bl	800162e <command>
    HAL_Delay(5);  // wait more than 4.1ms
 8001388:	2005      	movs	r0, #5
 800138a:	f000 ffef 	bl	800236c <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 800138e:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <begin+0x1f4>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	f043 0320 	orr.w	r3, r3, #32
 8001396:	b2db      	uxtb	r3, r3
 8001398:	4618      	mov	r0, r3
 800139a:	f000 f948 	bl	800162e <command>
    HAL_Delay(1);
 800139e:	2001      	movs	r0, #1
 80013a0:	f000 ffe4 	bl	800236c <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 80013a4:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <begin+0x1f4>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	f043 0320 	orr.w	r3, r3, #32
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 f93d 	bl	800162e <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);
 80013b4:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <begin+0x1f4>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	f043 0320 	orr.w	r3, r3, #32
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 f935 	bl	800162e <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80013c4:	4b13      	ldr	r3, [pc, #76]	; (8001414 <begin+0x218>)
 80013c6:	2204      	movs	r2, #4
 80013c8:	701a      	strb	r2, [r3, #0]
  display();
 80013ca:	f000 f8ef 	bl	80015ac <display>

  // clear it off
  clear();
 80013ce:	f000 f8b1 	bl	8001534 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80013d2:	4b11      	ldr	r3, [pc, #68]	; (8001418 <begin+0x21c>)
 80013d4:	2202      	movs	r2, #2
 80013d6:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 80013d8:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <begin+0x21c>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	f043 0304 	orr.w	r3, r3, #4
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 f923 	bl	800162e <command>

}
 80013e8:	bf00      	nop
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000220 	.word	0x20000220
 80013f4:	20000223 	.word	0x20000223
 80013f8:	20000204 	.word	0x20000204
 80013fc:	20000000 	.word	0x20000000
 8001400:	20000206 	.word	0x20000206
 8001404:	20000208 	.word	0x20000208
 8001408:	2000020a 	.word	0x2000020a
 800140c:	2000020c 	.word	0x2000020c
 8001410:	2000021c 	.word	0x2000021c
 8001414:	20000221 	.word	0x20000221
 8001418:	20000222 	.word	0x20000222

0800141c <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{
 800141c:	b480      	push	{r7}
 800141e:	b087      	sub	sp, #28
 8001420:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 8001422:	4b2f      	ldr	r3, [pc, #188]	; (80014e0 <enableClock+0xc4>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a2f      	ldr	r2, [pc, #188]	; (80014e4 <enableClock+0xc8>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d10c      	bne.n	8001446 <enableClock+0x2a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142c:	4b2e      	ldr	r3, [pc, #184]	; (80014e8 <enableClock+0xcc>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	4a2d      	ldr	r2, [pc, #180]	; (80014e8 <enableClock+0xcc>)
 8001432:	f043 0304 	orr.w	r3, r3, #4
 8001436:	6193      	str	r3, [r2, #24]
 8001438:	4b2b      	ldr	r3, [pc, #172]	; (80014e8 <enableClock+0xcc>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	f003 0304 	and.w	r3, r3, #4
 8001440:	617b      	str	r3, [r7, #20]
 8001442:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
  else if(_port == GPIOD)
    __HAL_RCC_GPIOD_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 8001444:	e046      	b.n	80014d4 <enableClock+0xb8>
  else if(_port == GPIOB)
 8001446:	4b26      	ldr	r3, [pc, #152]	; (80014e0 <enableClock+0xc4>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a28      	ldr	r2, [pc, #160]	; (80014ec <enableClock+0xd0>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d10c      	bne.n	800146a <enableClock+0x4e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001450:	4b25      	ldr	r3, [pc, #148]	; (80014e8 <enableClock+0xcc>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	4a24      	ldr	r2, [pc, #144]	; (80014e8 <enableClock+0xcc>)
 8001456:	f043 0308 	orr.w	r3, r3, #8
 800145a:	6193      	str	r3, [r2, #24]
 800145c:	4b22      	ldr	r3, [pc, #136]	; (80014e8 <enableClock+0xcc>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	f003 0308 	and.w	r3, r3, #8
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	693b      	ldr	r3, [r7, #16]
}
 8001468:	e034      	b.n	80014d4 <enableClock+0xb8>
  else if(_port == GPIOB)
 800146a:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <enableClock+0xc4>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a1f      	ldr	r2, [pc, #124]	; (80014ec <enableClock+0xd0>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d10c      	bne.n	800148e <enableClock+0x72>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001474:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <enableClock+0xcc>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	4a1b      	ldr	r2, [pc, #108]	; (80014e8 <enableClock+0xcc>)
 800147a:	f043 0308 	orr.w	r3, r3, #8
 800147e:	6193      	str	r3, [r2, #24]
 8001480:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <enableClock+0xcc>)
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	f003 0308 	and.w	r3, r3, #8
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	68fb      	ldr	r3, [r7, #12]
}
 800148c:	e022      	b.n	80014d4 <enableClock+0xb8>
  else if(_port == GPIOC)
 800148e:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <enableClock+0xc4>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a17      	ldr	r2, [pc, #92]	; (80014f0 <enableClock+0xd4>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d10c      	bne.n	80014b2 <enableClock+0x96>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001498:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <enableClock+0xcc>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	4a12      	ldr	r2, [pc, #72]	; (80014e8 <enableClock+0xcc>)
 800149e:	f043 0310 	orr.w	r3, r3, #16
 80014a2:	6193      	str	r3, [r2, #24]
 80014a4:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <enableClock+0xcc>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	f003 0310 	and.w	r3, r3, #16
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	68bb      	ldr	r3, [r7, #8]
}
 80014b0:	e010      	b.n	80014d4 <enableClock+0xb8>
  else if(_port == GPIOD)
 80014b2:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <enableClock+0xc4>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a0f      	ldr	r2, [pc, #60]	; (80014f4 <enableClock+0xd8>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d10b      	bne.n	80014d4 <enableClock+0xb8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014bc:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <enableClock+0xcc>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	4a09      	ldr	r2, [pc, #36]	; (80014e8 <enableClock+0xcc>)
 80014c2:	f043 0320 	orr.w	r3, r3, #32
 80014c6:	6193      	str	r3, [r2, #24]
 80014c8:	4b07      	ldr	r3, [pc, #28]	; (80014e8 <enableClock+0xcc>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	f003 0320 	and.w	r3, r3, #32
 80014d0:	607b      	str	r3, [r7, #4]
 80014d2:	687b      	ldr	r3, [r7, #4]
}
 80014d4:	bf00      	nop
 80014d6:	371c      	adds	r7, #28
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	2000021c 	.word	0x2000021c
 80014e4:	40010800 	.word	0x40010800
 80014e8:	40021000 	.word	0x40021000
 80014ec:	40010c00 	.word	0x40010c00
 80014f0:	40011000 	.word	0x40011000
 80014f4:	40011400 	.word	0x40011400

080014f8 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
 8001504:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	b2da      	uxtb	r2, r3
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <setRowOffsets+0x38>)
 800150c:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	b2da      	uxtb	r2, r3
 8001512:	4b07      	ldr	r3, [pc, #28]	; (8001530 <setRowOffsets+0x38>)
 8001514:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	b2da      	uxtb	r2, r3
 800151a:	4b05      	ldr	r3, [pc, #20]	; (8001530 <setRowOffsets+0x38>)
 800151c:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	b2da      	uxtb	r2, r3
 8001522:	4b03      	ldr	r3, [pc, #12]	; (8001530 <setRowOffsets+0x38>)
 8001524:	70da      	strb	r2, [r3, #3]
}
 8001526:	bf00      	nop
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr
 8001530:	20000224 	.word	0x20000224

08001534 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 8001538:	2001      	movs	r0, #1
 800153a:	f000 f878 	bl	800162e <command>
  HAL_Delay(2);  // this command takes a long time!
 800153e:	2002      	movs	r0, #2
 8001540:	f000 ff14 	bl	800236c <HAL_Delay>
}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}

08001548 <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	460a      	mov	r2, r1
 8001552:	71fb      	strb	r3, [r7, #7]
 8001554:	4613      	mov	r3, r2
 8001556:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 8001558:	2304      	movs	r3, #4
 800155a:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 800155c:	79bb      	ldrb	r3, [r7, #6]
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	429a      	cmp	r2, r3
 8001562:	d803      	bhi.n	800156c <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	3b01      	subs	r3, #1
 800156a:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 800156c:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <setCursor+0x5c>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	79ba      	ldrb	r2, [r7, #6]
 8001572:	429a      	cmp	r2, r3
 8001574:	d303      	bcc.n	800157e <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <setCursor+0x5c>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	3b01      	subs	r3, #1
 800157c:	71bb      	strb	r3, [r7, #6]
  }

  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 800157e:	79bb      	ldrb	r3, [r7, #6]
 8001580:	4a09      	ldr	r2, [pc, #36]	; (80015a8 <setCursor+0x60>)
 8001582:	5cd2      	ldrb	r2, [r2, r3]
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	4413      	add	r3, r2
 8001588:	b2db      	uxtb	r3, r3
 800158a:	b25b      	sxtb	r3, r3
 800158c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001590:	b25b      	sxtb	r3, r3
 8001592:	b2db      	uxtb	r3, r3
 8001594:	4618      	mov	r0, r3
 8001596:	f000 f84a 	bl	800162e <command>
}
 800159a:	bf00      	nop
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000223 	.word	0x20000223
 80015a8:	20000224 	.word	0x20000224

080015ac <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 80015b0:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <display+0x28>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	f043 0304 	orr.w	r3, r3, #4
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <display+0x28>)
 80015bc:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 80015be:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <display+0x28>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	f043 0308 	orr.w	r3, r3, #8
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	4618      	mov	r0, r3
 80015ca:	f000 f830 	bl	800162e <command>
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000221 	.word	0x20000221

080015d8 <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d101      	bne.n	80015ea <print+0x12>
 80015e6:	2300      	movs	r3, #0
 80015e8:	e01d      	b.n	8001626 <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7fe fdae 	bl	8000150 <strlen>
 80015f4:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]

  while (size--) {
 80015fa:	e00c      	b.n	8001616 <print+0x3e>
    if (write(*buffer++)) n++;
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	1c5a      	adds	r2, r3, #1
 8001600:	617a      	str	r2, [r7, #20]
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f000 f820 	bl	800164a <write>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d008      	beq.n	8001622 <print+0x4a>
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	3301      	adds	r3, #1
 8001614:	60fb      	str	r3, [r7, #12]
  while (size--) {
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1e5a      	subs	r2, r3, #1
 800161a:	613a      	str	r2, [r7, #16]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1ed      	bne.n	80015fc <print+0x24>
 8001620:	e000      	b.n	8001624 <print+0x4c>
    else break;
 8001622:	bf00      	nop
  }
  return n;
 8001624:	68fb      	ldr	r3, [r7, #12]
}
 8001626:	4618      	mov	r0, r3
 8001628:	3718      	adds	r7, #24
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <command>:
  }
}

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
 8001634:	4603      	mov	r3, r0
 8001636:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	2100      	movs	r1, #0
 800163c:	4618      	mov	r0, r3
 800163e:	f000 f813 	bl	8001668 <send>
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <write>:

inline size_t write(uint8_t value) {
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	4603      	mov	r3, r0
 8001652:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	2101      	movs	r1, #1
 8001658:	4618      	mov	r0, r3
 800165a:	f000 f805 	bl	8001668 <send>
  return 1; // assume sucess
 800165e:	2301      	movs	r3, #1
}
 8001660:	4618      	mov	r0, r3
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	460a      	mov	r2, r1
 8001672:	71fb      	strb	r3, [r7, #7]
 8001674:	4613      	mov	r3, r2
 8001676:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 8001678:	4b16      	ldr	r3, [pc, #88]	; (80016d4 <send+0x6c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a16      	ldr	r2, [pc, #88]	; (80016d8 <send+0x70>)
 800167e:	8811      	ldrh	r1, [r2, #0]
 8001680:	79ba      	ldrb	r2, [r7, #6]
 8001682:	4618      	mov	r0, r3
 8001684:	f001 fdfa 	bl	800327c <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) {
 8001688:	4b14      	ldr	r3, [pc, #80]	; (80016dc <send+0x74>)
 800168a:	881b      	ldrh	r3, [r3, #0]
 800168c:	2bff      	cmp	r3, #255	; 0xff
 800168e:	d007      	beq.n	80016a0 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8001690:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <send+0x6c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a11      	ldr	r2, [pc, #68]	; (80016dc <send+0x74>)
 8001696:	8811      	ldrh	r1, [r2, #0]
 8001698:	2200      	movs	r2, #0
 800169a:	4618      	mov	r0, r3
 800169c:	f001 fdee 	bl	800327c <HAL_GPIO_WritePin>
  }

  if (_displayfunction & LCD_8BITMODE) {
 80016a0:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <send+0x78>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	f003 0310 	and.w	r3, r3, #16
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d004      	beq.n	80016b6 <send+0x4e>
    write8bits(value);
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f000 f86c 	bl	800178c <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 80016b4:	e009      	b.n	80016ca <send+0x62>
    write4bits(value>>4);
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	091b      	lsrs	r3, r3, #4
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	4618      	mov	r0, r3
 80016be:	f000 f83b 	bl	8001738 <write4bits>
    write4bits(value);
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f000 f837 	bl	8001738 <write4bits>
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	2000021c 	.word	0x2000021c
 80016d8:	20000206 	.word	0x20000206
 80016dc:	20000208 	.word	0x20000208
 80016e0:	20000220 	.word	0x20000220

080016e4 <pulseEnable>:

void pulseEnable(void) {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80016e8:	4b11      	ldr	r3, [pc, #68]	; (8001730 <pulseEnable+0x4c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a11      	ldr	r2, [pc, #68]	; (8001734 <pulseEnable+0x50>)
 80016ee:	8811      	ldrh	r1, [r2, #0]
 80016f0:	2200      	movs	r2, #0
 80016f2:	4618      	mov	r0, r3
 80016f4:	f001 fdc2 	bl	800327c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80016f8:	2001      	movs	r0, #1
 80016fa:	f000 fe37 	bl	800236c <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 80016fe:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <pulseEnable+0x4c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a0c      	ldr	r2, [pc, #48]	; (8001734 <pulseEnable+0x50>)
 8001704:	8811      	ldrh	r1, [r2, #0]
 8001706:	2201      	movs	r2, #1
 8001708:	4618      	mov	r0, r3
 800170a:	f001 fdb7 	bl	800327c <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 800170e:	2001      	movs	r0, #1
 8001710:	f000 fe2c 	bl	800236c <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <pulseEnable+0x4c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a06      	ldr	r2, [pc, #24]	; (8001734 <pulseEnable+0x50>)
 800171a:	8811      	ldrh	r1, [r2, #0]
 800171c:	2200      	movs	r2, #0
 800171e:	4618      	mov	r0, r3
 8001720:	f001 fdac 	bl	800327c <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 8001724:	2001      	movs	r0, #1
 8001726:	f000 fe21 	bl	800236c <HAL_Delay>
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	2000021c 	.word	0x2000021c
 8001734:	2000020a 	.word	0x2000020a

08001738 <write4bits>:

void write4bits(uint8_t value) {
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	e013      	b.n	8001770 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001748:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <write4bits+0x4c>)
 800174a:	6818      	ldr	r0, [r3, #0]
 800174c:	4a0e      	ldr	r2, [pc, #56]	; (8001788 <write4bits+0x50>)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001754:	79fa      	ldrb	r2, [r7, #7]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	fa42 f303 	asr.w	r3, r2, r3
 800175c:	b2db      	uxtb	r3, r3
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	b2db      	uxtb	r3, r3
 8001764:	461a      	mov	r2, r3
 8001766:	f001 fd89 	bl	800327c <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	3301      	adds	r3, #1
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2b03      	cmp	r3, #3
 8001774:	dde8      	ble.n	8001748 <write4bits+0x10>
  }

  pulseEnable();
 8001776:	f7ff ffb5 	bl	80016e4 <pulseEnable>
}
 800177a:	bf00      	nop
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	2000021c 	.word	0x2000021c
 8001788:	2000020c 	.word	0x2000020c

0800178c <write8bits>:

void write8bits(uint8_t value) {
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	e013      	b.n	80017c4 <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800179c:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <write8bits+0x4c>)
 800179e:	6818      	ldr	r0, [r3, #0]
 80017a0:	4a0e      	ldr	r2, [pc, #56]	; (80017dc <write8bits+0x50>)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80017a8:	79fa      	ldrb	r2, [r7, #7]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	fa42 f303 	asr.w	r3, r2, r3
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	461a      	mov	r2, r3
 80017ba:	f001 fd5f 	bl	800327c <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	3301      	adds	r3, #1
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2b07      	cmp	r3, #7
 80017c8:	dde8      	ble.n	800179c <write8bits+0x10>
  }

  pulseEnable();
 80017ca:	f7ff ff8b 	bl	80016e4 <pulseEnable>
}
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	2000021c 	.word	0x2000021c
 80017dc:	2000020c 	.word	0x2000020c

080017e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017e6:	f000 fd5f 	bl	80022a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017ea:	f000 f841 	bl	8001870 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017ee:	f000 f945 	bl	8001a7c <MX_GPIO_Init>
  MX_ADC1_Init();
 80017f2:	f000 f88d 	bl	8001910 <MX_ADC1_Init>
  MX_TIM2_Init();
 80017f6:	f000 f8c9 	bl	800198c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80017fa:	f000 f915 	bl	8001a28 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_ADCEx_Calibration_Start(&hadc1);
 80017fe:	4816      	ldr	r0, [pc, #88]	; (8001858 <main+0x78>)
 8001800:	f001 fa04 	bl	8002c0c <HAL_ADCEx_Calibration_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 8001804:	4815      	ldr	r0, [pc, #84]	; (800185c <main+0x7c>)
 8001806:	f002 fb35 	bl	8003e74 <HAL_TIM_Base_Start_IT>
	adcValue = 0;
 800180a:	4b15      	ldr	r3, [pc, #84]	; (8001860 <main+0x80>)
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]

	LiquidCrystal(GPIOB, GPIO_PIN_3,GPIO_PIN_4,GPIO_PIN_5,GPIO_PIN_6 ,GPIO_PIN_7,GPIO_PIN_8,GPIO_PIN_9);
 8001810:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001814:	9303      	str	r3, [sp, #12]
 8001816:	f44f 7380 	mov.w	r3, #256	; 0x100
 800181a:	9302      	str	r3, [sp, #8]
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	9301      	str	r3, [sp, #4]
 8001820:	2340      	movs	r3, #64	; 0x40
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	2320      	movs	r3, #32
 8001826:	2210      	movs	r2, #16
 8001828:	2108      	movs	r1, #8
 800182a:	480e      	ldr	r0, [pc, #56]	; (8001864 <main+0x84>)
 800182c:	f7ff fc50 	bl	80010d0 <LiquidCrystal>
	begin(20,4);
 8001830:	2104      	movs	r1, #4
 8001832:	2014      	movs	r0, #20
 8001834:	f7ff fce2 	bl	80011fc <begin>


	setCursor(0, 0);
 8001838:	2100      	movs	r1, #0
 800183a:	2000      	movs	r0, #0
 800183c:	f7ff fe84 	bl	8001548 <setCursor>
	print("28<OPTIMUM<35");
 8001840:	4809      	ldr	r0, [pc, #36]	; (8001868 <main+0x88>)
 8001842:	f7ff fec9 	bl	80015d8 <print>
	setCursor(0, 1);
 8001846:	2101      	movs	r1, #1
 8001848:	2000      	movs	r0, #0
 800184a:	f7ff fe7d 	bl	8001548 <setCursor>
	print("OTHER: DANGER");
 800184e:	4807      	ldr	r0, [pc, #28]	; (800186c <main+0x8c>)
 8001850:	f7ff fec2 	bl	80015d8 <print>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001854:	e7fe      	b.n	8001854 <main+0x74>
 8001856:	bf00      	nop
 8001858:	20000228 	.word	0x20000228
 800185c:	20000258 	.word	0x20000258
 8001860:	200002e8 	.word	0x200002e8
 8001864:	40010c00 	.word	0x40010c00
 8001868:	08007770 	.word	0x08007770
 800186c:	08007780 	.word	0x08007780

08001870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b094      	sub	sp, #80	; 0x50
 8001874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001876:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800187a:	2228      	movs	r2, #40	; 0x28
 800187c:	2100      	movs	r1, #0
 800187e:	4618      	mov	r0, r3
 8001880:	f003 f88a 	bl	8004998 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001894:	1d3b      	adds	r3, r7, #4
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	605a      	str	r2, [r3, #4]
 800189c:	609a      	str	r2, [r3, #8]
 800189e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018a0:	2302      	movs	r3, #2
 80018a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018a4:	2301      	movs	r3, #1
 80018a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018a8:	2310      	movs	r3, #16
 80018aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80018ac:	2300      	movs	r3, #0
 80018ae:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018b4:	4618      	mov	r0, r3
 80018b6:	f001 fd11 	bl	80032dc <HAL_RCC_OscConfig>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80018c0:	f000 faee 	bl	8001ea0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018c4:	230f      	movs	r3, #15
 80018c6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018cc:	2300      	movs	r3, #0
 80018ce:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018d0:	2300      	movs	r3, #0
 80018d2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018d4:	2300      	movs	r3, #0
 80018d6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018d8:	f107 0314 	add.w	r3, r7, #20
 80018dc:	2100      	movs	r1, #0
 80018de:	4618      	mov	r0, r3
 80018e0:	f001 ff7e 	bl	80037e0 <HAL_RCC_ClockConfig>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80018ea:	f000 fad9 	bl	8001ea0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80018ee:	2302      	movs	r3, #2
 80018f0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018f6:	1d3b      	adds	r3, r7, #4
 80018f8:	4618      	mov	r0, r3
 80018fa:	f002 f8ff 	bl	8003afc <HAL_RCCEx_PeriphCLKConfig>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001904:	f000 facc 	bl	8001ea0 <Error_Handler>
  }
}
 8001908:	bf00      	nop
 800190a:	3750      	adds	r7, #80	; 0x50
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001916:	1d3b      	adds	r3, r7, #4
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001920:	4b18      	ldr	r3, [pc, #96]	; (8001984 <MX_ADC1_Init+0x74>)
 8001922:	4a19      	ldr	r2, [pc, #100]	; (8001988 <MX_ADC1_Init+0x78>)
 8001924:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001926:	4b17      	ldr	r3, [pc, #92]	; (8001984 <MX_ADC1_Init+0x74>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800192c:	4b15      	ldr	r3, [pc, #84]	; (8001984 <MX_ADC1_Init+0x74>)
 800192e:	2200      	movs	r2, #0
 8001930:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001932:	4b14      	ldr	r3, [pc, #80]	; (8001984 <MX_ADC1_Init+0x74>)
 8001934:	2200      	movs	r2, #0
 8001936:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001938:	4b12      	ldr	r3, [pc, #72]	; (8001984 <MX_ADC1_Init+0x74>)
 800193a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800193e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001940:	4b10      	ldr	r3, [pc, #64]	; (8001984 <MX_ADC1_Init+0x74>)
 8001942:	2200      	movs	r2, #0
 8001944:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001946:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <MX_ADC1_Init+0x74>)
 8001948:	2201      	movs	r2, #1
 800194a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800194c:	480d      	ldr	r0, [pc, #52]	; (8001984 <MX_ADC1_Init+0x74>)
 800194e:	f000 fd31 	bl	80023b4 <HAL_ADC_Init>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001958:	f000 faa2 	bl	8001ea0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800195c:	2301      	movs	r3, #1
 800195e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001960:	2301      	movs	r3, #1
 8001962:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001964:	2300      	movs	r3, #0
 8001966:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001968:	1d3b      	adds	r3, r7, #4
 800196a:	4619      	mov	r1, r3
 800196c:	4805      	ldr	r0, [pc, #20]	; (8001984 <MX_ADC1_Init+0x74>)
 800196e:	f000 ffb9 	bl	80028e4 <HAL_ADC_ConfigChannel>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001978:	f000 fa92 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800197c:	bf00      	nop
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20000228 	.word	0x20000228
 8001988:	40012400 	.word	0x40012400

0800198c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001992:	f107 0308 	add.w	r3, r7, #8
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	605a      	str	r2, [r3, #4]
 800199c:	609a      	str	r2, [r3, #8]
 800199e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a0:	463b      	mov	r3, r7
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019a8:	4b1e      	ldr	r3, [pc, #120]	; (8001a24 <MX_TIM2_Init+0x98>)
 80019aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 624;
 80019b0:	4b1c      	ldr	r3, [pc, #112]	; (8001a24 <MX_TIM2_Init+0x98>)
 80019b2:	f44f 721c 	mov.w	r2, #624	; 0x270
 80019b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b8:	4b1a      	ldr	r3, [pc, #104]	; (8001a24 <MX_TIM2_Init+0x98>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63999;
 80019be:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <MX_TIM2_Init+0x98>)
 80019c0:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80019c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c6:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <MX_TIM2_Init+0x98>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019cc:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <MX_TIM2_Init+0x98>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019d2:	4814      	ldr	r0, [pc, #80]	; (8001a24 <MX_TIM2_Init+0x98>)
 80019d4:	f002 f9fe 	bl	8003dd4 <HAL_TIM_Base_Init>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80019de:	f000 fa5f 	bl	8001ea0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019e8:	f107 0308 	add.w	r3, r7, #8
 80019ec:	4619      	mov	r1, r3
 80019ee:	480d      	ldr	r0, [pc, #52]	; (8001a24 <MX_TIM2_Init+0x98>)
 80019f0:	f002 fb94 	bl	800411c <HAL_TIM_ConfigClockSource>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80019fa:	f000 fa51 	bl	8001ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019fe:	2300      	movs	r3, #0
 8001a00:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a02:	2300      	movs	r3, #0
 8001a04:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a06:	463b      	mov	r3, r7
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4806      	ldr	r0, [pc, #24]	; (8001a24 <MX_TIM2_Init+0x98>)
 8001a0c:	f002 fd60 	bl	80044d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001a16:	f000 fa43 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a1a:	bf00      	nop
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000258 	.word	0x20000258

08001a28 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a2c:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <MX_USART1_UART_Init+0x4c>)
 8001a2e:	4a12      	ldr	r2, [pc, #72]	; (8001a78 <MX_USART1_UART_Init+0x50>)
 8001a30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001a32:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <MX_USART1_UART_Init+0x4c>)
 8001a34:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a3a:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <MX_USART1_UART_Init+0x4c>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <MX_USART1_UART_Init+0x4c>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a46:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <MX_USART1_UART_Init+0x4c>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a4c:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <MX_USART1_UART_Init+0x4c>)
 8001a4e:	220c      	movs	r2, #12
 8001a50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a52:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <MX_USART1_UART_Init+0x4c>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a58:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <MX_USART1_UART_Init+0x4c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a5e:	4805      	ldr	r0, [pc, #20]	; (8001a74 <MX_USART1_UART_Init+0x4c>)
 8001a60:	f002 fda0 	bl	80045a4 <HAL_UART_Init>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a6a:	f000 fa19 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	200002a0 	.word	0x200002a0
 8001a78:	40013800 	.word	0x40013800

08001a7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b088      	sub	sp, #32
 8001a80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a82:	f107 0310 	add.w	r3, r7, #16
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a90:	4b32      	ldr	r3, [pc, #200]	; (8001b5c <MX_GPIO_Init+0xe0>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	4a31      	ldr	r2, [pc, #196]	; (8001b5c <MX_GPIO_Init+0xe0>)
 8001a96:	f043 0320 	orr.w	r3, r3, #32
 8001a9a:	6193      	str	r3, [r2, #24]
 8001a9c:	4b2f      	ldr	r3, [pc, #188]	; (8001b5c <MX_GPIO_Init+0xe0>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f003 0320 	and.w	r3, r3, #32
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa8:	4b2c      	ldr	r3, [pc, #176]	; (8001b5c <MX_GPIO_Init+0xe0>)
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	4a2b      	ldr	r2, [pc, #172]	; (8001b5c <MX_GPIO_Init+0xe0>)
 8001aae:	f043 0304 	orr.w	r3, r3, #4
 8001ab2:	6193      	str	r3, [r2, #24]
 8001ab4:	4b29      	ldr	r3, [pc, #164]	; (8001b5c <MX_GPIO_Init+0xe0>)
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac0:	4b26      	ldr	r3, [pc, #152]	; (8001b5c <MX_GPIO_Init+0xe0>)
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	4a25      	ldr	r2, [pc, #148]	; (8001b5c <MX_GPIO_Init+0xe0>)
 8001ac6:	f043 0308 	orr.w	r3, r3, #8
 8001aca:	6193      	str	r3, [r2, #24]
 8001acc:	4b23      	ldr	r3, [pc, #140]	; (8001b5c <MX_GPIO_Init+0xe0>)
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	f003 0308 	and.w	r3, r3, #8
 8001ad4:	607b      	str	r3, [r7, #4]
 8001ad6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8001ade:	4820      	ldr	r0, [pc, #128]	; (8001b60 <MX_GPIO_Init+0xe4>)
 8001ae0:	f001 fbcc 	bl	800327c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8001aea:	481e      	ldr	r0, [pc, #120]	; (8001b64 <MX_GPIO_Init+0xe8>)
 8001aec:	f001 fbc6 	bl	800327c <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : button1_Pin */
  GPIO_InitStruct.Pin = button1_Pin;
 8001af0:	2302      	movs	r3, #2
 8001af2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001af4:	4b1c      	ldr	r3, [pc, #112]	; (8001b68 <MX_GPIO_Init+0xec>)
 8001af6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(button1_GPIO_Port, &GPIO_InitStruct);
 8001afc:	f107 0310 	add.w	r3, r7, #16
 8001b00:	4619      	mov	r1, r3
 8001b02:	4818      	ldr	r0, [pc, #96]	; (8001b64 <MX_GPIO_Init+0xe8>)
 8001b04:	f001 fa3e 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b08:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b16:	2302      	movs	r3, #2
 8001b18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1a:	f107 0310 	add.w	r3, r7, #16
 8001b1e:	4619      	mov	r1, r3
 8001b20:	480f      	ldr	r0, [pc, #60]	; (8001b60 <MX_GPIO_Init+0xe4>)
 8001b22:	f001 fa2f 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8001b26:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8001b2a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b34:	2302      	movs	r3, #2
 8001b36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b38:	f107 0310 	add.w	r3, r7, #16
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4809      	ldr	r0, [pc, #36]	; (8001b64 <MX_GPIO_Init+0xe8>)
 8001b40:	f001 fa20 	bl	8002f84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 2, 0);
 8001b44:	2200      	movs	r2, #0
 8001b46:	2102      	movs	r1, #2
 8001b48:	2007      	movs	r0, #7
 8001b4a:	f001 f9e4 	bl	8002f16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001b4e:	2007      	movs	r0, #7
 8001b50:	f001 f9fd 	bl	8002f4e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b54:	bf00      	nop
 8001b56:	3720      	adds	r7, #32
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	40010800 	.word	0x40010800
 8001b64:	40010c00 	.word	0x40010c00
 8001b68:	10110000 	.word	0x10110000
 8001b6c:	00000000 	.word	0x00000000

08001b70 <tempread>:

/* USER CODE BEGIN 4 */
void tempread(){
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8001b76:	483e      	ldr	r0, [pc, #248]	; (8001c70 <tempread+0x100>)
 8001b78:	f000 fcf4 	bl	8002564 <HAL_ADC_Start>
        if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 8001b7c:	2164      	movs	r1, #100	; 0x64
 8001b7e:	483c      	ldr	r0, [pc, #240]	; (8001c70 <tempread+0x100>)
 8001b80:	f000 fd9e 	bl	80026c0 <HAL_ADC_PollForConversion>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d164      	bne.n	8001c54 <tempread+0xe4>
        {
					adcValue = HAL_ADC_GetValue(&hadc1);
 8001b8a:	4839      	ldr	r0, [pc, #228]	; (8001c70 <tempread+0x100>)
 8001b8c:	f000 fe9e 	bl	80028cc <HAL_ADC_GetValue>
 8001b90:	4603      	mov	r3, r0
 8001b92:	4a38      	ldr	r2, [pc, #224]	; (8001c74 <tempread+0x104>)
 8001b94:	6013      	str	r3, [r2, #0]
					ort=sum/count;
 8001b96:	4b38      	ldr	r3, [pc, #224]	; (8001c78 <tempread+0x108>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a38      	ldr	r2, [pc, #224]	; (8001c7c <tempread+0x10c>)
 8001b9c:	6812      	ldr	r2, [r2, #0]
 8001b9e:	4611      	mov	r1, r2
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff f983 	bl	8000eac <__aeabi_fdiv>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4b35      	ldr	r3, [pc, #212]	; (8001c80 <tempread+0x110>)
 8001bac:	601a      	str	r2, [r3, #0]
					float voltage = (float)adcValue * 3.3 / 4095.0;
 8001bae:	4b31      	ldr	r3, [pc, #196]	; (8001c74 <tempread+0x104>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff f86e 	bl	8000c94 <__aeabi_ui2f>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7fe fc34 	bl	8000428 <__aeabi_f2d>
 8001bc0:	a327      	add	r3, pc, #156	; (adr r3, 8001c60 <tempread+0xf0>)
 8001bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc6:	f7fe fc87 	bl	80004d8 <__aeabi_dmul>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	460b      	mov	r3, r1
 8001bce:	4610      	mov	r0, r2
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	a325      	add	r3, pc, #148	; (adr r3, 8001c68 <tempread+0xf8>)
 8001bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd8:	f7fe fda8 	bl	800072c <__aeabi_ddiv>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	4610      	mov	r0, r2
 8001be2:	4619      	mov	r1, r3
 8001be4:	f7fe ff50 	bl	8000a88 <__aeabi_d2f>
 8001be8:	4603      	mov	r3, r0
 8001bea:	607b      	str	r3, [r7, #4]
					temperature = voltage * 100.0;
 8001bec:	4925      	ldr	r1, [pc, #148]	; (8001c84 <tempread+0x114>)
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff f8a8 	bl	8000d44 <__aeabi_fmul>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	4b23      	ldr	r3, [pc, #140]	; (8001c88 <tempread+0x118>)
 8001bfa:	601a      	str	r2, [r3, #0]
					sprintf(buffer, "average temp: %.1f C\r\n", ort);
 8001bfc:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <tempread+0x110>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7fe fc11 	bl	8000428 <__aeabi_f2d>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4920      	ldr	r1, [pc, #128]	; (8001c8c <tempread+0x11c>)
 8001c0c:	4820      	ldr	r0, [pc, #128]	; (8001c90 <tempread+0x120>)
 8001c0e:	f003 fb2b 	bl	8005268 <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001c12:	481f      	ldr	r0, [pc, #124]	; (8001c90 <tempread+0x120>)
 8001c14:	f7fe fa9c 	bl	8000150 <strlen>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c20:	491b      	ldr	r1, [pc, #108]	; (8001c90 <tempread+0x120>)
 8001c22:	481c      	ldr	r0, [pc, #112]	; (8001c94 <tempread+0x124>)
 8001c24:	f002 fd0e 	bl	8004644 <HAL_UART_Transmit>

					sprintf(buffer, "read count: %.1f C\r\n", count);
 8001c28:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <tempread+0x10c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7fe fbfb 	bl	8000428 <__aeabi_f2d>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	4918      	ldr	r1, [pc, #96]	; (8001c98 <tempread+0x128>)
 8001c38:	4815      	ldr	r0, [pc, #84]	; (8001c90 <tempread+0x120>)
 8001c3a:	f003 fb15 	bl	8005268 <siprintf>

					HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001c3e:	4814      	ldr	r0, [pc, #80]	; (8001c90 <tempread+0x120>)
 8001c40:	f7fe fa86 	bl	8000150 <strlen>
 8001c44:	4603      	mov	r3, r0
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	f04f 33ff 	mov.w	r3, #4294967295
 8001c4c:	4910      	ldr	r1, [pc, #64]	; (8001c90 <tempread+0x120>)
 8001c4e:	4811      	ldr	r0, [pc, #68]	; (8001c94 <tempread+0x124>)
 8001c50:	f002 fcf8 	bl	8004644 <HAL_UART_Transmit>


        }
        //HAL_ADC_Stop(&hadc1);
}
 8001c54:	bf00      	nop
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	f3af 8000 	nop.w
 8001c60:	66666666 	.word	0x66666666
 8001c64:	400a6666 	.word	0x400a6666
 8001c68:	00000000 	.word	0x00000000
 8001c6c:	40affe00 	.word	0x40affe00
 8001c70:	20000228 	.word	0x20000228
 8001c74:	200002e8 	.word	0x200002e8
 8001c78:	20000324 	.word	0x20000324
 8001c7c:	20000328 	.word	0x20000328
 8001c80:	2000032c 	.word	0x2000032c
 8001c84:	42c80000 	.word	0x42c80000
 8001c88:	200002ec 	.word	0x200002ec
 8001c8c:	08007790 	.word	0x08007790
 8001c90:	200002f0 	.word	0x200002f0
 8001c94:	200002a0 	.word	0x200002a0
 8001c98:	080077a8 	.word	0x080077a8
 8001c9c:	00000000 	.word	0x00000000

08001ca0 <tempread_periodic>:
void tempread_periodic(){
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
		HAL_ADC_Start(&hadc1);
 8001ca6:	485a      	ldr	r0, [pc, #360]	; (8001e10 <tempread_periodic+0x170>)
 8001ca8:	f000 fc5c 	bl	8002564 <HAL_ADC_Start>

		if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 8001cac:	2164      	movs	r1, #100	; 0x64
 8001cae:	4858      	ldr	r0, [pc, #352]	; (8001e10 <tempread_periodic+0x170>)
 8001cb0:	f000 fd06 	bl	80026c0 <HAL_ADC_PollForConversion>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f040 809f 	bne.w	8001dfa <tempread_periodic+0x15a>
		{
			adcValue = HAL_ADC_GetValue(&hadc1);
 8001cbc:	4854      	ldr	r0, [pc, #336]	; (8001e10 <tempread_periodic+0x170>)
 8001cbe:	f000 fe05 	bl	80028cc <HAL_ADC_GetValue>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	4a53      	ldr	r2, [pc, #332]	; (8001e14 <tempread_periodic+0x174>)
 8001cc6:	6013      	str	r3, [r2, #0]

			float voltage = (float)adcValue * 3.3 / 4096.0;
 8001cc8:	4b52      	ldr	r3, [pc, #328]	; (8001e14 <tempread_periodic+0x174>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe ffe1 	bl	8000c94 <__aeabi_ui2f>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7fe fba7 	bl	8000428 <__aeabi_f2d>
 8001cda:	a34b      	add	r3, pc, #300	; (adr r3, 8001e08 <tempread_periodic+0x168>)
 8001cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce0:	f7fe fbfa 	bl	80004d8 <__aeabi_dmul>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	4610      	mov	r0, r2
 8001cea:	4619      	mov	r1, r3
 8001cec:	f04f 0200 	mov.w	r2, #0
 8001cf0:	4b49      	ldr	r3, [pc, #292]	; (8001e18 <tempread_periodic+0x178>)
 8001cf2:	f7fe fd1b 	bl	800072c <__aeabi_ddiv>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	4610      	mov	r0, r2
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	f7fe fec3 	bl	8000a88 <__aeabi_d2f>
 8001d02:	4603      	mov	r3, r0
 8001d04:	607b      	str	r3, [r7, #4]
			temperature = voltage * 100.0;
 8001d06:	4945      	ldr	r1, [pc, #276]	; (8001e1c <tempread_periodic+0x17c>)
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f7ff f81b 	bl	8000d44 <__aeabi_fmul>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	461a      	mov	r2, r3
 8001d12:	4b43      	ldr	r3, [pc, #268]	; (8001e20 <tempread_periodic+0x180>)
 8001d14:	601a      	str	r2, [r3, #0]
			threshold = temperature;
 8001d16:	4b42      	ldr	r3, [pc, #264]	; (8001e20 <tempread_periodic+0x180>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a42      	ldr	r2, [pc, #264]	; (8001e24 <tempread_periodic+0x184>)
 8001d1c:	6013      	str	r3, [r2, #0]
			//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);

			sprintf(buffer, "Temp: %.1f C\r\n", temperature);
 8001d1e:	4b40      	ldr	r3, [pc, #256]	; (8001e20 <tempread_periodic+0x180>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7fe fb80 	bl	8000428 <__aeabi_f2d>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	493e      	ldr	r1, [pc, #248]	; (8001e28 <tempread_periodic+0x188>)
 8001d2e:	483f      	ldr	r0, [pc, #252]	; (8001e2c <tempread_periodic+0x18c>)
 8001d30:	f003 fa9a 	bl	8005268 <siprintf>
			sum=sum+temperature;
 8001d34:	4b3e      	ldr	r3, [pc, #248]	; (8001e30 <tempread_periodic+0x190>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a39      	ldr	r2, [pc, #228]	; (8001e20 <tempread_periodic+0x180>)
 8001d3a:	6812      	ldr	r2, [r2, #0]
 8001d3c:	4611      	mov	r1, r2
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7fe fef8 	bl	8000b34 <__addsf3>
 8001d44:	4603      	mov	r3, r0
 8001d46:	461a      	mov	r2, r3
 8001d48:	4b39      	ldr	r3, [pc, #228]	; (8001e30 <tempread_periodic+0x190>)
 8001d4a:	601a      	str	r2, [r3, #0]
			count=count+1;
 8001d4c:	4b39      	ldr	r3, [pc, #228]	; (8001e34 <tempread_periodic+0x194>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe feed 	bl	8000b34 <__addsf3>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4b35      	ldr	r3, [pc, #212]	; (8001e34 <tempread_periodic+0x194>)
 8001d60:	601a      	str	r2, [r3, #0]

			HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001d62:	4832      	ldr	r0, [pc, #200]	; (8001e2c <tempread_periodic+0x18c>)
 8001d64:	f7fe f9f4 	bl	8000150 <strlen>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d70:	492e      	ldr	r1, [pc, #184]	; (8001e2c <tempread_periodic+0x18c>)
 8001d72:	4831      	ldr	r0, [pc, #196]	; (8001e38 <tempread_periodic+0x198>)
 8001d74:	f002 fc66 	bl	8004644 <HAL_UART_Transmit>
			sprintf(buffer, "read counter: %.1f \r\n", count);
 8001d78:	4b2e      	ldr	r3, [pc, #184]	; (8001e34 <tempread_periodic+0x194>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7fe fb53 	bl	8000428 <__aeabi_f2d>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	492d      	ldr	r1, [pc, #180]	; (8001e3c <tempread_periodic+0x19c>)
 8001d88:	4828      	ldr	r0, [pc, #160]	; (8001e2c <tempread_periodic+0x18c>)
 8001d8a:	f003 fa6d 	bl	8005268 <siprintf>

			HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001d8e:	4827      	ldr	r0, [pc, #156]	; (8001e2c <tempread_periodic+0x18c>)
 8001d90:	f7fe f9de 	bl	8000150 <strlen>
 8001d94:	4603      	mov	r3, r0
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9c:	4923      	ldr	r1, [pc, #140]	; (8001e2c <tempread_periodic+0x18c>)
 8001d9e:	4826      	ldr	r0, [pc, #152]	; (8001e38 <tempread_periodic+0x198>)
 8001da0:	f002 fc50 	bl	8004644 <HAL_UART_Transmit>
			//HAL_ADC_Stop(&hadc1);
			if(temperature>28 && temperature<35){
 8001da4:	4b1e      	ldr	r3, [pc, #120]	; (8001e20 <tempread_periodic+0x180>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4925      	ldr	r1, [pc, #148]	; (8001e40 <tempread_periodic+0x1a0>)
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff f986 	bl	80010bc <__aeabi_fcmpgt>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d015      	beq.n	8001de2 <tempread_periodic+0x142>
 8001db6:	4b1a      	ldr	r3, [pc, #104]	; (8001e20 <tempread_periodic+0x180>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4922      	ldr	r1, [pc, #136]	; (8001e44 <tempread_periodic+0x1a4>)
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff f95f 	bl	8001080 <__aeabi_fcmplt>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d00c      	beq.n	8001de2 <tempread_periodic+0x142>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11,GPIO_PIN_RESET);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001dce:	481e      	ldr	r0, [pc, #120]	; (8001e48 <tempread_periodic+0x1a8>)
 8001dd0:	f001 fa54 	bl	800327c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12,GPIO_PIN_SET);
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dda:	481b      	ldr	r0, [pc, #108]	; (8001e48 <tempread_periodic+0x1a8>)
 8001ddc:	f001 fa4e 	bl	800327c <HAL_GPIO_WritePin>
			}else {
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12,GPIO_PIN_RESET);
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11,GPIO_PIN_SET);
			}
    }
}
 8001de0:	e00b      	b.n	8001dfa <tempread_periodic+0x15a>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12,GPIO_PIN_RESET);
 8001de2:	2200      	movs	r2, #0
 8001de4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001de8:	4817      	ldr	r0, [pc, #92]	; (8001e48 <tempread_periodic+0x1a8>)
 8001dea:	f001 fa47 	bl	800327c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11,GPIO_PIN_SET);
 8001dee:	2201      	movs	r2, #1
 8001df0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001df4:	4814      	ldr	r0, [pc, #80]	; (8001e48 <tempread_periodic+0x1a8>)
 8001df6:	f001 fa41 	bl	800327c <HAL_GPIO_WritePin>
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	f3af 8000 	nop.w
 8001e08:	66666666 	.word	0x66666666
 8001e0c:	400a6666 	.word	0x400a6666
 8001e10:	20000228 	.word	0x20000228
 8001e14:	200002e8 	.word	0x200002e8
 8001e18:	40b00000 	.word	0x40b00000
 8001e1c:	42c80000 	.word	0x42c80000
 8001e20:	200002ec 	.word	0x200002ec
 8001e24:	20000004 	.word	0x20000004
 8001e28:	080077c0 	.word	0x080077c0
 8001e2c:	200002f0 	.word	0x200002f0
 8001e30:	20000324 	.word	0x20000324
 8001e34:	20000328 	.word	0x20000328
 8001e38:	200002a0 	.word	0x200002a0
 8001e3c:	080077d0 	.word	0x080077d0
 8001e40:	41e00000 	.word	0x41e00000
 8001e44:	420c0000 	.word	0x420c0000
 8001e48:	40010800 	.word	0x40010800

08001e4c <read_humidity>:

void read_humidity()
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
	//DHT11_ReadData(&humidity, &temperature);

	sprintf(buffer, "Humidity: %d%%\r\n", humidity);
 8001e50:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <read_humidity+0x2c>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	461a      	mov	r2, r3
 8001e56:	4909      	ldr	r1, [pc, #36]	; (8001e7c <read_humidity+0x30>)
 8001e58:	4809      	ldr	r0, [pc, #36]	; (8001e80 <read_humidity+0x34>)
 8001e5a:	f003 fa05 	bl	8005268 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001e5e:	4808      	ldr	r0, [pc, #32]	; (8001e80 <read_humidity+0x34>)
 8001e60:	f7fe f976 	bl	8000150 <strlen>
 8001e64:	4603      	mov	r3, r0
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6c:	4904      	ldr	r1, [pc, #16]	; (8001e80 <read_humidity+0x34>)
 8001e6e:	4805      	ldr	r0, [pc, #20]	; (8001e84 <read_humidity+0x38>)
 8001e70:	f002 fbe8 	bl	8004644 <HAL_UART_Transmit>
}
 8001e74:	bf00      	nop
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20000008 	.word	0x20000008
 8001e7c:	080077e8 	.word	0x080077e8
 8001e80:	200002f0 	.word	0x200002f0
 8001e84:	200002a0 	.word	0x200002a0

08001e88 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
   UNUSED (htim);
	 //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
	tempread_periodic();
 8001e90:	f7ff ff06 	bl	8001ca0 <tempread_periodic>
	read_humidity();
 8001e94:	f7ff ffda 	bl	8001e4c <read_humidity>

}
 8001e98:	bf00      	nop
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ea4:	b672      	cpsid	i
}
 8001ea6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ea8:	e7fe      	b.n	8001ea8 <Error_Handler+0x8>
	...

08001eac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001eb2:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <HAL_MspInit+0x40>)
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	4a0d      	ldr	r2, [pc, #52]	; (8001eec <HAL_MspInit+0x40>)
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	6193      	str	r3, [r2, #24]
 8001ebe:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <HAL_MspInit+0x40>)
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	607b      	str	r3, [r7, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eca:	4b08      	ldr	r3, [pc, #32]	; (8001eec <HAL_MspInit+0x40>)
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	4a07      	ldr	r2, [pc, #28]	; (8001eec <HAL_MspInit+0x40>)
 8001ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed4:	61d3      	str	r3, [r2, #28]
 8001ed6:	4b05      	ldr	r3, [pc, #20]	; (8001eec <HAL_MspInit+0x40>)
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ede:	603b      	str	r3, [r7, #0]
 8001ee0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr
 8001eec:	40021000 	.word	0x40021000

08001ef0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b088      	sub	sp, #32
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	f107 0310 	add.w	r3, r7, #16
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a14      	ldr	r2, [pc, #80]	; (8001f5c <HAL_ADC_MspInit+0x6c>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d121      	bne.n	8001f54 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f10:	4b13      	ldr	r3, [pc, #76]	; (8001f60 <HAL_ADC_MspInit+0x70>)
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	4a12      	ldr	r2, [pc, #72]	; (8001f60 <HAL_ADC_MspInit+0x70>)
 8001f16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f1a:	6193      	str	r3, [r2, #24]
 8001f1c:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <HAL_ADC_MspInit+0x70>)
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f28:	4b0d      	ldr	r3, [pc, #52]	; (8001f60 <HAL_ADC_MspInit+0x70>)
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	4a0c      	ldr	r2, [pc, #48]	; (8001f60 <HAL_ADC_MspInit+0x70>)
 8001f2e:	f043 0304 	orr.w	r3, r3, #4
 8001f32:	6193      	str	r3, [r2, #24]
 8001f34:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <HAL_ADC_MspInit+0x70>)
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f40:	2302      	movs	r3, #2
 8001f42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f44:	2303      	movs	r3, #3
 8001f46:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f48:	f107 0310 	add.w	r3, r7, #16
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4805      	ldr	r0, [pc, #20]	; (8001f64 <HAL_ADC_MspInit+0x74>)
 8001f50:	f001 f818 	bl	8002f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f54:	bf00      	nop
 8001f56:	3720      	adds	r7, #32
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40012400 	.word	0x40012400
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40010800 	.word	0x40010800

08001f68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f78:	d113      	bne.n	8001fa2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f7a:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <HAL_TIM_Base_MspInit+0x44>)
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	4a0b      	ldr	r2, [pc, #44]	; (8001fac <HAL_TIM_Base_MspInit+0x44>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	61d3      	str	r3, [r2, #28]
 8001f86:	4b09      	ldr	r3, [pc, #36]	; (8001fac <HAL_TIM_Base_MspInit+0x44>)
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f92:	2200      	movs	r2, #0
 8001f94:	2100      	movs	r1, #0
 8001f96:	201c      	movs	r0, #28
 8001f98:	f000 ffbd 	bl	8002f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f9c:	201c      	movs	r0, #28
 8001f9e:	f000 ffd6 	bl	8002f4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40021000 	.word	0x40021000

08001fb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b088      	sub	sp, #32
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb8:	f107 0310 	add.w	r3, r7, #16
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a1c      	ldr	r2, [pc, #112]	; (800203c <HAL_UART_MspInit+0x8c>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d131      	bne.n	8002034 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fd0:	4b1b      	ldr	r3, [pc, #108]	; (8002040 <HAL_UART_MspInit+0x90>)
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	4a1a      	ldr	r2, [pc, #104]	; (8002040 <HAL_UART_MspInit+0x90>)
 8001fd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fda:	6193      	str	r3, [r2, #24]
 8001fdc:	4b18      	ldr	r3, [pc, #96]	; (8002040 <HAL_UART_MspInit+0x90>)
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe8:	4b15      	ldr	r3, [pc, #84]	; (8002040 <HAL_UART_MspInit+0x90>)
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	4a14      	ldr	r2, [pc, #80]	; (8002040 <HAL_UART_MspInit+0x90>)
 8001fee:	f043 0304 	orr.w	r3, r3, #4
 8001ff2:	6193      	str	r3, [r2, #24]
 8001ff4:	4b12      	ldr	r3, [pc, #72]	; (8002040 <HAL_UART_MspInit+0x90>)
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002000:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002004:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002006:	2302      	movs	r3, #2
 8002008:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800200a:	2303      	movs	r3, #3
 800200c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200e:	f107 0310 	add.w	r3, r7, #16
 8002012:	4619      	mov	r1, r3
 8002014:	480b      	ldr	r0, [pc, #44]	; (8002044 <HAL_UART_MspInit+0x94>)
 8002016:	f000 ffb5 	bl	8002f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800201a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800201e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002028:	f107 0310 	add.w	r3, r7, #16
 800202c:	4619      	mov	r1, r3
 800202e:	4805      	ldr	r0, [pc, #20]	; (8002044 <HAL_UART_MspInit+0x94>)
 8002030:	f000 ffa8 	bl	8002f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002034:	bf00      	nop
 8002036:	3720      	adds	r7, #32
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40013800 	.word	0x40013800
 8002040:	40021000 	.word	0x40021000
 8002044:	40010800 	.word	0x40010800

08002048 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800204c:	e7fe      	b.n	800204c <NMI_Handler+0x4>

0800204e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800204e:	b480      	push	{r7}
 8002050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002052:	e7fe      	b.n	8002052 <HardFault_Handler+0x4>

08002054 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002058:	e7fe      	b.n	8002058 <MemManage_Handler+0x4>

0800205a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800205a:	b480      	push	{r7}
 800205c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800205e:	e7fe      	b.n	800205e <BusFault_Handler+0x4>

08002060 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002064:	e7fe      	b.n	8002064 <UsageFault_Handler+0x4>

08002066 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	46bd      	mov	sp, r7
 800206e:	bc80      	pop	{r7}
 8002070:	4770      	bx	lr

08002072 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002072:	b480      	push	{r7}
 8002074:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr

0800207e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800207e:	b480      	push	{r7}
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr

0800208a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800208e:	f000 f951 	bl	8002334 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}

08002096 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button1_Pin);
 800209a:	2002      	movs	r0, #2
 800209c:	f001 f906 	bl	80032ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80020a0:	bf00      	nop
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020a8:	4802      	ldr	r0, [pc, #8]	; (80020b4 <TIM2_IRQHandler+0x10>)
 80020aa:	f001 ff2f 	bl	8003f0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20000258 	.word	0x20000258

080020b8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	80fb      	strh	r3, [r7, #6]
  tempread();
 80020c2:	f7ff fd55 	bl	8001b70 <tempread>
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020ce:	b480      	push	{r7}
 80020d0:	af00      	add	r7, sp, #0
  return 1;
 80020d2:	2301      	movs	r3, #1
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr

080020dc <_kill>:

int _kill(int pid, int sig)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020e6:	f002 fc2d 	bl	8004944 <__errno>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2216      	movs	r2, #22
 80020ee:	601a      	str	r2, [r3, #0]
  return -1;
 80020f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <_exit>:

void _exit (int status)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002104:	f04f 31ff 	mov.w	r1, #4294967295
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7ff ffe7 	bl	80020dc <_kill>
  while (1) {}    /* Make sure we hang here */
 800210e:	e7fe      	b.n	800210e <_exit+0x12>

08002110 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	e00a      	b.n	8002138 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002122:	f3af 8000 	nop.w
 8002126:	4601      	mov	r1, r0
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	1c5a      	adds	r2, r3, #1
 800212c:	60ba      	str	r2, [r7, #8]
 800212e:	b2ca      	uxtb	r2, r1
 8002130:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	3301      	adds	r3, #1
 8002136:	617b      	str	r3, [r7, #20]
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	429a      	cmp	r2, r3
 800213e:	dbf0      	blt.n	8002122 <_read+0x12>
  }

  return len;
 8002140:	687b      	ldr	r3, [r7, #4]
}
 8002142:	4618      	mov	r0, r3
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b086      	sub	sp, #24
 800214e:	af00      	add	r7, sp, #0
 8002150:	60f8      	str	r0, [r7, #12]
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]
 800215a:	e009      	b.n	8002170 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	1c5a      	adds	r2, r3, #1
 8002160:	60ba      	str	r2, [r7, #8]
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	3301      	adds	r3, #1
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	429a      	cmp	r2, r3
 8002176:	dbf1      	blt.n	800215c <_write+0x12>
  }
  return len;
 8002178:	687b      	ldr	r3, [r7, #4]
}
 800217a:	4618      	mov	r0, r3
 800217c:	3718      	adds	r7, #24
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <_close>:

int _close(int file)
{
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800218a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800218e:	4618      	mov	r0, r3
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr

08002198 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021a8:	605a      	str	r2, [r3, #4]
  return 0;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr

080021b6 <_isatty>:

int _isatty(int file)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021be:	2301      	movs	r3, #1
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr

080021ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b085      	sub	sp, #20
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	60f8      	str	r0, [r7, #12]
 80021d2:	60b9      	str	r1, [r7, #8]
 80021d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	bc80      	pop	{r7}
 80021e0:	4770      	bx	lr
	...

080021e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021ec:	4a14      	ldr	r2, [pc, #80]	; (8002240 <_sbrk+0x5c>)
 80021ee:	4b15      	ldr	r3, [pc, #84]	; (8002244 <_sbrk+0x60>)
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021f8:	4b13      	ldr	r3, [pc, #76]	; (8002248 <_sbrk+0x64>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d102      	bne.n	8002206 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002200:	4b11      	ldr	r3, [pc, #68]	; (8002248 <_sbrk+0x64>)
 8002202:	4a12      	ldr	r2, [pc, #72]	; (800224c <_sbrk+0x68>)
 8002204:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002206:	4b10      	ldr	r3, [pc, #64]	; (8002248 <_sbrk+0x64>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4413      	add	r3, r2
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	429a      	cmp	r2, r3
 8002212:	d207      	bcs.n	8002224 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002214:	f002 fb96 	bl	8004944 <__errno>
 8002218:	4603      	mov	r3, r0
 800221a:	220c      	movs	r2, #12
 800221c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800221e:	f04f 33ff 	mov.w	r3, #4294967295
 8002222:	e009      	b.n	8002238 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002224:	4b08      	ldr	r3, [pc, #32]	; (8002248 <_sbrk+0x64>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800222a:	4b07      	ldr	r3, [pc, #28]	; (8002248 <_sbrk+0x64>)
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4413      	add	r3, r2
 8002232:	4a05      	ldr	r2, [pc, #20]	; (8002248 <_sbrk+0x64>)
 8002234:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002236:	68fb      	ldr	r3, [r7, #12]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3718      	adds	r7, #24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20002800 	.word	0x20002800
 8002244:	00000400 	.word	0x00000400
 8002248:	20000330 	.word	0x20000330
 800224c:	20000348 	.word	0x20000348

08002250 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr

0800225c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800225c:	f7ff fff8 	bl	8002250 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002260:	480b      	ldr	r0, [pc, #44]	; (8002290 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002262:	490c      	ldr	r1, [pc, #48]	; (8002294 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002264:	4a0c      	ldr	r2, [pc, #48]	; (8002298 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002268:	e002      	b.n	8002270 <LoopCopyDataInit>

0800226a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800226a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800226c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800226e:	3304      	adds	r3, #4

08002270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002274:	d3f9      	bcc.n	800226a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002276:	4a09      	ldr	r2, [pc, #36]	; (800229c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002278:	4c09      	ldr	r4, [pc, #36]	; (80022a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800227a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800227c:	e001      	b.n	8002282 <LoopFillZerobss>

0800227e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800227e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002280:	3204      	adds	r2, #4

08002282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002284:	d3fb      	bcc.n	800227e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002286:	f002 fb63 	bl	8004950 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800228a:	f7ff faa9 	bl	80017e0 <main>
  bx lr
 800228e:	4770      	bx	lr
  ldr r0, =_sdata
 8002290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002294:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002298:	08007c1c 	.word	0x08007c1c
  ldr r2, =_sbss
 800229c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80022a0:	20000348 	.word	0x20000348

080022a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022a4:	e7fe      	b.n	80022a4 <ADC1_2_IRQHandler>
	...

080022a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022ac:	4b08      	ldr	r3, [pc, #32]	; (80022d0 <HAL_Init+0x28>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a07      	ldr	r2, [pc, #28]	; (80022d0 <HAL_Init+0x28>)
 80022b2:	f043 0310 	orr.w	r3, r3, #16
 80022b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022b8:	2003      	movs	r0, #3
 80022ba:	f000 fe21 	bl	8002f00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022be:	200f      	movs	r0, #15
 80022c0:	f000 f808 	bl	80022d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022c4:	f7ff fdf2 	bl	8001eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40022000 	.word	0x40022000

080022d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022dc:	4b12      	ldr	r3, [pc, #72]	; (8002328 <HAL_InitTick+0x54>)
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	4b12      	ldr	r3, [pc, #72]	; (800232c <HAL_InitTick+0x58>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	4619      	mov	r1, r3
 80022e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 fe39 	bl	8002f6a <HAL_SYSTICK_Config>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e00e      	b.n	8002320 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b0f      	cmp	r3, #15
 8002306:	d80a      	bhi.n	800231e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002308:	2200      	movs	r2, #0
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	f04f 30ff 	mov.w	r0, #4294967295
 8002310:	f000 fe01 	bl	8002f16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002314:	4a06      	ldr	r2, [pc, #24]	; (8002330 <HAL_InitTick+0x5c>)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800231a:	2300      	movs	r3, #0
 800231c:	e000      	b.n	8002320 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
}
 8002320:	4618      	mov	r0, r3
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	2000000c 	.word	0x2000000c
 800232c:	20000014 	.word	0x20000014
 8002330:	20000010 	.word	0x20000010

08002334 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002338:	4b05      	ldr	r3, [pc, #20]	; (8002350 <HAL_IncTick+0x1c>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	461a      	mov	r2, r3
 800233e:	4b05      	ldr	r3, [pc, #20]	; (8002354 <HAL_IncTick+0x20>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4413      	add	r3, r2
 8002344:	4a03      	ldr	r2, [pc, #12]	; (8002354 <HAL_IncTick+0x20>)
 8002346:	6013      	str	r3, [r2, #0]
}
 8002348:	bf00      	nop
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr
 8002350:	20000014 	.word	0x20000014
 8002354:	20000334 	.word	0x20000334

08002358 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  return uwTick;
 800235c:	4b02      	ldr	r3, [pc, #8]	; (8002368 <HAL_GetTick+0x10>)
 800235e:	681b      	ldr	r3, [r3, #0]
}
 8002360:	4618      	mov	r0, r3
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr
 8002368:	20000334 	.word	0x20000334

0800236c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002374:	f7ff fff0 	bl	8002358 <HAL_GetTick>
 8002378:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002384:	d005      	beq.n	8002392 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002386:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <HAL_Delay+0x44>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	461a      	mov	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	4413      	add	r3, r2
 8002390:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002392:	bf00      	nop
 8002394:	f7ff ffe0 	bl	8002358 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d8f7      	bhi.n	8002394 <HAL_Delay+0x28>
  {
  }
}
 80023a4:	bf00      	nop
 80023a6:	bf00      	nop
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	20000014 	.word	0x20000014

080023b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023bc:	2300      	movs	r3, #0
 80023be:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80023c4:	2300      	movs	r3, #0
 80023c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80023c8:	2300      	movs	r3, #0
 80023ca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e0be      	b.n	8002554 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d109      	bne.n	80023f8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7ff fd7c 	bl	8001ef0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 fbc5 	bl	8002b88 <ADC_ConversionStop_Disable>
 80023fe:	4603      	mov	r3, r0
 8002400:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002406:	f003 0310 	and.w	r3, r3, #16
 800240a:	2b00      	cmp	r3, #0
 800240c:	f040 8099 	bne.w	8002542 <HAL_ADC_Init+0x18e>
 8002410:	7dfb      	ldrb	r3, [r7, #23]
 8002412:	2b00      	cmp	r3, #0
 8002414:	f040 8095 	bne.w	8002542 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002420:	f023 0302 	bic.w	r3, r3, #2
 8002424:	f043 0202 	orr.w	r2, r3, #2
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002434:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	7b1b      	ldrb	r3, [r3, #12]
 800243a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800243c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	4313      	orrs	r3, r2
 8002442:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800244c:	d003      	beq.n	8002456 <HAL_ADC_Init+0xa2>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d102      	bne.n	800245c <HAL_ADC_Init+0xa8>
 8002456:	f44f 7380 	mov.w	r3, #256	; 0x100
 800245a:	e000      	b.n	800245e <HAL_ADC_Init+0xaa>
 800245c:	2300      	movs	r3, #0
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	4313      	orrs	r3, r2
 8002462:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	7d1b      	ldrb	r3, [r3, #20]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d119      	bne.n	80024a0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	7b1b      	ldrb	r3, [r3, #12]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d109      	bne.n	8002488 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	3b01      	subs	r3, #1
 800247a:	035a      	lsls	r2, r3, #13
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	4313      	orrs	r3, r2
 8002480:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	e00b      	b.n	80024a0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248c:	f043 0220 	orr.w	r2, r3, #32
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002498:	f043 0201 	orr.w	r2, r3, #1
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	430a      	orrs	r2, r1
 80024b2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	4b28      	ldr	r3, [pc, #160]	; (800255c <HAL_ADC_Init+0x1a8>)
 80024bc:	4013      	ands	r3, r2
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6812      	ldr	r2, [r2, #0]
 80024c2:	68b9      	ldr	r1, [r7, #8]
 80024c4:	430b      	orrs	r3, r1
 80024c6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024d0:	d003      	beq.n	80024da <HAL_ADC_Init+0x126>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d104      	bne.n	80024e4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	3b01      	subs	r3, #1
 80024e0:	051b      	lsls	r3, r3, #20
 80024e2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ea:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	430a      	orrs	r2, r1
 80024f6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689a      	ldr	r2, [r3, #8]
 80024fe:	4b18      	ldr	r3, [pc, #96]	; (8002560 <HAL_ADC_Init+0x1ac>)
 8002500:	4013      	ands	r3, r2
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	429a      	cmp	r2, r3
 8002506:	d10b      	bne.n	8002520 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002512:	f023 0303 	bic.w	r3, r3, #3
 8002516:	f043 0201 	orr.w	r2, r3, #1
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800251e:	e018      	b.n	8002552 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002524:	f023 0312 	bic.w	r3, r3, #18
 8002528:	f043 0210 	orr.w	r2, r3, #16
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002534:	f043 0201 	orr.w	r2, r3, #1
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002540:	e007      	b.n	8002552 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002546:	f043 0210 	orr.w	r2, r3, #16
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002552:	7dfb      	ldrb	r3, [r7, #23]
}
 8002554:	4618      	mov	r0, r3
 8002556:	3718      	adds	r7, #24
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	ffe1f7fd 	.word	0xffe1f7fd
 8002560:	ff1f0efe 	.word	0xff1f0efe

08002564 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800256c:	2300      	movs	r3, #0
 800256e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002576:	2b01      	cmp	r3, #1
 8002578:	d101      	bne.n	800257e <HAL_ADC_Start+0x1a>
 800257a:	2302      	movs	r3, #2
 800257c:	e098      	b.n	80026b0 <HAL_ADC_Start+0x14c>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 faa4 	bl	8002ad4 <ADC_Enable>
 800258c:	4603      	mov	r3, r0
 800258e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002590:	7bfb      	ldrb	r3, [r7, #15]
 8002592:	2b00      	cmp	r3, #0
 8002594:	f040 8087 	bne.w	80026a6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025a0:	f023 0301 	bic.w	r3, r3, #1
 80025a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a41      	ldr	r2, [pc, #260]	; (80026b8 <HAL_ADC_Start+0x154>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d105      	bne.n	80025c2 <HAL_ADC_Start+0x5e>
 80025b6:	4b41      	ldr	r3, [pc, #260]	; (80026bc <HAL_ADC_Start+0x158>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d115      	bne.n	80025ee <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d026      	beq.n	800262a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025ec:	e01d      	b.n	800262a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a2f      	ldr	r2, [pc, #188]	; (80026bc <HAL_ADC_Start+0x158>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d004      	beq.n	800260e <HAL_ADC_Start+0xaa>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a2b      	ldr	r2, [pc, #172]	; (80026b8 <HAL_ADC_Start+0x154>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d10d      	bne.n	800262a <HAL_ADC_Start+0xc6>
 800260e:	4b2b      	ldr	r3, [pc, #172]	; (80026bc <HAL_ADC_Start+0x158>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002616:	2b00      	cmp	r3, #0
 8002618:	d007      	beq.n	800262a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002622:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d006      	beq.n	8002644 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263a:	f023 0206 	bic.w	r2, r3, #6
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	62da      	str	r2, [r3, #44]	; 0x2c
 8002642:	e002      	b.n	800264a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f06f 0202 	mvn.w	r2, #2
 800265a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002666:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800266a:	d113      	bne.n	8002694 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002670:	4a11      	ldr	r2, [pc, #68]	; (80026b8 <HAL_ADC_Start+0x154>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d105      	bne.n	8002682 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002676:	4b11      	ldr	r3, [pc, #68]	; (80026bc <HAL_ADC_Start+0x158>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800267e:	2b00      	cmp	r3, #0
 8002680:	d108      	bne.n	8002694 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002690:	609a      	str	r2, [r3, #8]
 8002692:	e00c      	b.n	80026ae <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689a      	ldr	r2, [r3, #8]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80026a2:	609a      	str	r2, [r3, #8]
 80026a4:	e003      	b.n	80026ae <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80026ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40012800 	.word	0x40012800
 80026bc:	40012400 	.word	0x40012400

080026c0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80026c0:	b590      	push	{r4, r7, lr}
 80026c2:	b087      	sub	sp, #28
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80026d2:	2300      	movs	r3, #0
 80026d4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80026d6:	f7ff fe3f 	bl	8002358 <HAL_GetTick>
 80026da:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00b      	beq.n	8002702 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ee:	f043 0220 	orr.w	r2, r3, #32
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e0d3      	b.n	80028aa <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270c:	2b00      	cmp	r3, #0
 800270e:	d131      	bne.n	8002774 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002716:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800271a:	2b00      	cmp	r3, #0
 800271c:	d12a      	bne.n	8002774 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800271e:	e021      	b.n	8002764 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002726:	d01d      	beq.n	8002764 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d007      	beq.n	800273e <HAL_ADC_PollForConversion+0x7e>
 800272e:	f7ff fe13 	bl	8002358 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	429a      	cmp	r2, r3
 800273c:	d212      	bcs.n	8002764 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10b      	bne.n	8002764 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002750:	f043 0204 	orr.w	r2, r3, #4
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e0a2      	b.n	80028aa <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0d6      	beq.n	8002720 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002772:	e070      	b.n	8002856 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002774:	4b4f      	ldr	r3, [pc, #316]	; (80028b4 <HAL_ADC_PollForConversion+0x1f4>)
 8002776:	681c      	ldr	r4, [r3, #0]
 8002778:	2002      	movs	r0, #2
 800277a:	f001 fa75 	bl	8003c68 <HAL_RCCEx_GetPeriphCLKFreq>
 800277e:	4603      	mov	r3, r0
 8002780:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6919      	ldr	r1, [r3, #16]
 800278a:	4b4b      	ldr	r3, [pc, #300]	; (80028b8 <HAL_ADC_PollForConversion+0x1f8>)
 800278c:	400b      	ands	r3, r1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d118      	bne.n	80027c4 <HAL_ADC_PollForConversion+0x104>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68d9      	ldr	r1, [r3, #12]
 8002798:	4b48      	ldr	r3, [pc, #288]	; (80028bc <HAL_ADC_PollForConversion+0x1fc>)
 800279a:	400b      	ands	r3, r1
 800279c:	2b00      	cmp	r3, #0
 800279e:	d111      	bne.n	80027c4 <HAL_ADC_PollForConversion+0x104>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6919      	ldr	r1, [r3, #16]
 80027a6:	4b46      	ldr	r3, [pc, #280]	; (80028c0 <HAL_ADC_PollForConversion+0x200>)
 80027a8:	400b      	ands	r3, r1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d108      	bne.n	80027c0 <HAL_ADC_PollForConversion+0x100>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68d9      	ldr	r1, [r3, #12]
 80027b4:	4b43      	ldr	r3, [pc, #268]	; (80028c4 <HAL_ADC_PollForConversion+0x204>)
 80027b6:	400b      	ands	r3, r1
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_ADC_PollForConversion+0x100>
 80027bc:	2314      	movs	r3, #20
 80027be:	e020      	b.n	8002802 <HAL_ADC_PollForConversion+0x142>
 80027c0:	2329      	movs	r3, #41	; 0x29
 80027c2:	e01e      	b.n	8002802 <HAL_ADC_PollForConversion+0x142>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6919      	ldr	r1, [r3, #16]
 80027ca:	4b3d      	ldr	r3, [pc, #244]	; (80028c0 <HAL_ADC_PollForConversion+0x200>)
 80027cc:	400b      	ands	r3, r1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d106      	bne.n	80027e0 <HAL_ADC_PollForConversion+0x120>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68d9      	ldr	r1, [r3, #12]
 80027d8:	4b3a      	ldr	r3, [pc, #232]	; (80028c4 <HAL_ADC_PollForConversion+0x204>)
 80027da:	400b      	ands	r3, r1
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00d      	beq.n	80027fc <HAL_ADC_PollForConversion+0x13c>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6919      	ldr	r1, [r3, #16]
 80027e6:	4b38      	ldr	r3, [pc, #224]	; (80028c8 <HAL_ADC_PollForConversion+0x208>)
 80027e8:	400b      	ands	r3, r1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d108      	bne.n	8002800 <HAL_ADC_PollForConversion+0x140>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68d9      	ldr	r1, [r3, #12]
 80027f4:	4b34      	ldr	r3, [pc, #208]	; (80028c8 <HAL_ADC_PollForConversion+0x208>)
 80027f6:	400b      	ands	r3, r1
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_ADC_PollForConversion+0x140>
 80027fc:	2354      	movs	r3, #84	; 0x54
 80027fe:	e000      	b.n	8002802 <HAL_ADC_PollForConversion+0x142>
 8002800:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002802:	fb02 f303 	mul.w	r3, r2, r3
 8002806:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002808:	e021      	b.n	800284e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002810:	d01a      	beq.n	8002848 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d007      	beq.n	8002828 <HAL_ADC_PollForConversion+0x168>
 8002818:	f7ff fd9e 	bl	8002358 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	429a      	cmp	r2, r3
 8002826:	d20f      	bcs.n	8002848 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	429a      	cmp	r2, r3
 800282e:	d90b      	bls.n	8002848 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002834:	f043 0204 	orr.w	r2, r3, #4
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e030      	b.n	80028aa <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	3301      	adds	r3, #1
 800284c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	429a      	cmp	r2, r3
 8002854:	d8d9      	bhi.n	800280a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f06f 0212 	mvn.w	r2, #18
 800285e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002864:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002876:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800287a:	d115      	bne.n	80028a8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002880:	2b00      	cmp	r3, #0
 8002882:	d111      	bne.n	80028a8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002888:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002894:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d105      	bne.n	80028a8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a0:	f043 0201 	orr.w	r2, r3, #1
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	371c      	adds	r7, #28
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd90      	pop	{r4, r7, pc}
 80028b2:	bf00      	nop
 80028b4:	2000000c 	.word	0x2000000c
 80028b8:	24924924 	.word	0x24924924
 80028bc:	00924924 	.word	0x00924924
 80028c0:	12492492 	.word	0x12492492
 80028c4:	00492492 	.word	0x00492492
 80028c8:	00249249 	.word	0x00249249

080028cc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80028da:	4618      	mov	r0, r3
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr

080028e4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028ee:	2300      	movs	r3, #0
 80028f0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d101      	bne.n	8002904 <HAL_ADC_ConfigChannel+0x20>
 8002900:	2302      	movs	r3, #2
 8002902:	e0dc      	b.n	8002abe <HAL_ADC_ConfigChannel+0x1da>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2b06      	cmp	r3, #6
 8002912:	d81c      	bhi.n	800294e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	4613      	mov	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4413      	add	r3, r2
 8002924:	3b05      	subs	r3, #5
 8002926:	221f      	movs	r2, #31
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	43db      	mvns	r3, r3
 800292e:	4019      	ands	r1, r3
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	6818      	ldr	r0, [r3, #0]
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	4613      	mov	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	3b05      	subs	r3, #5
 8002940:	fa00 f203 	lsl.w	r2, r0, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	635a      	str	r2, [r3, #52]	; 0x34
 800294c:	e03c      	b.n	80029c8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2b0c      	cmp	r3, #12
 8002954:	d81c      	bhi.n	8002990 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	4613      	mov	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	3b23      	subs	r3, #35	; 0x23
 8002968:	221f      	movs	r2, #31
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43db      	mvns	r3, r3
 8002970:	4019      	ands	r1, r3
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	6818      	ldr	r0, [r3, #0]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	4613      	mov	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	3b23      	subs	r3, #35	; 0x23
 8002982:	fa00 f203 	lsl.w	r2, r0, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	430a      	orrs	r2, r1
 800298c:	631a      	str	r2, [r3, #48]	; 0x30
 800298e:	e01b      	b.n	80029c8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	4613      	mov	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	3b41      	subs	r3, #65	; 0x41
 80029a2:	221f      	movs	r2, #31
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	43db      	mvns	r3, r3
 80029aa:	4019      	ands	r1, r3
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	6818      	ldr	r0, [r3, #0]
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	4613      	mov	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4413      	add	r3, r2
 80029ba:	3b41      	subs	r3, #65	; 0x41
 80029bc:	fa00 f203 	lsl.w	r2, r0, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	430a      	orrs	r2, r1
 80029c6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2b09      	cmp	r3, #9
 80029ce:	d91c      	bls.n	8002a0a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68d9      	ldr	r1, [r3, #12]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	4613      	mov	r3, r2
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	4413      	add	r3, r2
 80029e0:	3b1e      	subs	r3, #30
 80029e2:	2207      	movs	r2, #7
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	43db      	mvns	r3, r3
 80029ea:	4019      	ands	r1, r3
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	6898      	ldr	r0, [r3, #8]
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	4613      	mov	r3, r2
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	4413      	add	r3, r2
 80029fa:	3b1e      	subs	r3, #30
 80029fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	60da      	str	r2, [r3, #12]
 8002a08:	e019      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6919      	ldr	r1, [r3, #16]
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	4613      	mov	r3, r2
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	4413      	add	r3, r2
 8002a1a:	2207      	movs	r2, #7
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	43db      	mvns	r3, r3
 8002a22:	4019      	ands	r1, r3
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	6898      	ldr	r0, [r3, #8]
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	4413      	add	r3, r2
 8002a32:	fa00 f203 	lsl.w	r2, r0, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2b10      	cmp	r3, #16
 8002a44:	d003      	beq.n	8002a4e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a4a:	2b11      	cmp	r3, #17
 8002a4c:	d132      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a1d      	ldr	r2, [pc, #116]	; (8002ac8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d125      	bne.n	8002aa4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d126      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002a74:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2b10      	cmp	r3, #16
 8002a7c:	d11a      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a7e:	4b13      	ldr	r3, [pc, #76]	; (8002acc <HAL_ADC_ConfigChannel+0x1e8>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a13      	ldr	r2, [pc, #76]	; (8002ad0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002a84:	fba2 2303 	umull	r2, r3, r2, r3
 8002a88:	0c9a      	lsrs	r2, r3, #18
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a94:	e002      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1f9      	bne.n	8002a96 <HAL_ADC_ConfigChannel+0x1b2>
 8002aa2:	e007      	b.n	8002ab4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa8:	f043 0220 	orr.w	r2, r3, #32
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bc80      	pop	{r7}
 8002ac6:	4770      	bx	lr
 8002ac8:	40012400 	.word	0x40012400
 8002acc:	2000000c 	.word	0x2000000c
 8002ad0:	431bde83 	.word	0x431bde83

08002ad4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d040      	beq.n	8002b74 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f042 0201 	orr.w	r2, r2, #1
 8002b00:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b02:	4b1f      	ldr	r3, [pc, #124]	; (8002b80 <ADC_Enable+0xac>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a1f      	ldr	r2, [pc, #124]	; (8002b84 <ADC_Enable+0xb0>)
 8002b08:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0c:	0c9b      	lsrs	r3, r3, #18
 8002b0e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b10:	e002      	b.n	8002b18 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	3b01      	subs	r3, #1
 8002b16:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1f9      	bne.n	8002b12 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b1e:	f7ff fc1b 	bl	8002358 <HAL_GetTick>
 8002b22:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b24:	e01f      	b.n	8002b66 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b26:	f7ff fc17 	bl	8002358 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d918      	bls.n	8002b66 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d011      	beq.n	8002b66 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b46:	f043 0210 	orr.w	r2, r3, #16
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b52:	f043 0201 	orr.w	r2, r3, #1
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e007      	b.n	8002b76 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d1d8      	bne.n	8002b26 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	2000000c 	.word	0x2000000c
 8002b84:	431bde83 	.word	0x431bde83

08002b88 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d12e      	bne.n	8002c00 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0201 	bic.w	r2, r2, #1
 8002bb0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002bb2:	f7ff fbd1 	bl	8002358 <HAL_GetTick>
 8002bb6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002bb8:	e01b      	b.n	8002bf2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002bba:	f7ff fbcd 	bl	8002358 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d914      	bls.n	8002bf2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d10d      	bne.n	8002bf2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bda:	f043 0210 	orr.w	r2, r3, #16
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be6:	f043 0201 	orr.w	r2, r3, #1
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e007      	b.n	8002c02 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d0dc      	beq.n	8002bba <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
	...

08002c0c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002c0c:	b590      	push	{r4, r7, lr}
 8002c0e:	b087      	sub	sp, #28
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c14:	2300      	movs	r3, #0
 8002c16:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d101      	bne.n	8002c2a <HAL_ADCEx_Calibration_Start+0x1e>
 8002c26:	2302      	movs	r3, #2
 8002c28:	e097      	b.n	8002d5a <HAL_ADCEx_Calibration_Start+0x14e>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7ff ffa8 	bl	8002b88 <ADC_ConversionStop_Disable>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7ff ff49 	bl	8002ad4 <ADC_Enable>
 8002c42:	4603      	mov	r3, r0
 8002c44:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8002c46:	7dfb      	ldrb	r3, [r7, #23]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f040 8081 	bne.w	8002d50 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c52:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c56:	f023 0302 	bic.w	r3, r3, #2
 8002c5a:	f043 0202 	orr.w	r2, r3, #2
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002c62:	4b40      	ldr	r3, [pc, #256]	; (8002d64 <HAL_ADCEx_Calibration_Start+0x158>)
 8002c64:	681c      	ldr	r4, [r3, #0]
 8002c66:	2002      	movs	r0, #2
 8002c68:	f000 fffe 	bl	8003c68 <HAL_RCCEx_GetPeriphCLKFreq>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002c72:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002c74:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002c76:	e002      	b.n	8002c7e <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1f9      	bne.n	8002c78 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689a      	ldr	r2, [r3, #8]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f042 0208 	orr.w	r2, r2, #8
 8002c92:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002c94:	f7ff fb60 	bl	8002358 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002c9a:	e01b      	b.n	8002cd4 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002c9c:	f7ff fb5c 	bl	8002358 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b0a      	cmp	r3, #10
 8002ca8:	d914      	bls.n	8002cd4 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 0308 	and.w	r3, r3, #8
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00d      	beq.n	8002cd4 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbc:	f023 0312 	bic.w	r3, r3, #18
 8002cc0:	f043 0210 	orr.w	r2, r3, #16
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e042      	b.n	8002d5a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f003 0308 	and.w	r3, r3, #8
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1dc      	bne.n	8002c9c <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f042 0204 	orr.w	r2, r2, #4
 8002cf0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002cf2:	f7ff fb31 	bl	8002358 <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002cf8:	e01b      	b.n	8002d32 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002cfa:	f7ff fb2d 	bl	8002358 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b0a      	cmp	r3, #10
 8002d06:	d914      	bls.n	8002d32 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 0304 	and.w	r3, r3, #4
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00d      	beq.n	8002d32 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1a:	f023 0312 	bic.w	r3, r3, #18
 8002d1e:	f043 0210 	orr.w	r2, r3, #16
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e013      	b.n	8002d5a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1dc      	bne.n	8002cfa <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d44:	f023 0303 	bic.w	r3, r3, #3
 8002d48:	f043 0201 	orr.w	r2, r3, #1
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002d58:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	371c      	adds	r7, #28
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd90      	pop	{r4, r7, pc}
 8002d62:	bf00      	nop
 8002d64:	2000000c 	.word	0x2000000c

08002d68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f003 0307 	and.w	r3, r3, #7
 8002d76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d78:	4b0c      	ldr	r3, [pc, #48]	; (8002dac <__NVIC_SetPriorityGrouping+0x44>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d7e:	68ba      	ldr	r2, [r7, #8]
 8002d80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d84:	4013      	ands	r3, r2
 8002d86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d9a:	4a04      	ldr	r2, [pc, #16]	; (8002dac <__NVIC_SetPriorityGrouping+0x44>)
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	60d3      	str	r3, [r2, #12]
}
 8002da0:	bf00      	nop
 8002da2:	3714      	adds	r7, #20
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bc80      	pop	{r7}
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	e000ed00 	.word	0xe000ed00

08002db0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002db4:	4b04      	ldr	r3, [pc, #16]	; (8002dc8 <__NVIC_GetPriorityGrouping+0x18>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	0a1b      	lsrs	r3, r3, #8
 8002dba:	f003 0307 	and.w	r3, r3, #7
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bc80      	pop	{r7}
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	e000ed00 	.word	0xe000ed00

08002dcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	db0b      	blt.n	8002df6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dde:	79fb      	ldrb	r3, [r7, #7]
 8002de0:	f003 021f 	and.w	r2, r3, #31
 8002de4:	4906      	ldr	r1, [pc, #24]	; (8002e00 <__NVIC_EnableIRQ+0x34>)
 8002de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dea:	095b      	lsrs	r3, r3, #5
 8002dec:	2001      	movs	r0, #1
 8002dee:	fa00 f202 	lsl.w	r2, r0, r2
 8002df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bc80      	pop	{r7}
 8002dfe:	4770      	bx	lr
 8002e00:	e000e100 	.word	0xe000e100

08002e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	6039      	str	r1, [r7, #0]
 8002e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	db0a      	blt.n	8002e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	490c      	ldr	r1, [pc, #48]	; (8002e50 <__NVIC_SetPriority+0x4c>)
 8002e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e22:	0112      	lsls	r2, r2, #4
 8002e24:	b2d2      	uxtb	r2, r2
 8002e26:	440b      	add	r3, r1
 8002e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e2c:	e00a      	b.n	8002e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	4908      	ldr	r1, [pc, #32]	; (8002e54 <__NVIC_SetPriority+0x50>)
 8002e34:	79fb      	ldrb	r3, [r7, #7]
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	3b04      	subs	r3, #4
 8002e3c:	0112      	lsls	r2, r2, #4
 8002e3e:	b2d2      	uxtb	r2, r2
 8002e40:	440b      	add	r3, r1
 8002e42:	761a      	strb	r2, [r3, #24]
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bc80      	pop	{r7}
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	e000e100 	.word	0xe000e100
 8002e54:	e000ed00 	.word	0xe000ed00

08002e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b089      	sub	sp, #36	; 0x24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	f1c3 0307 	rsb	r3, r3, #7
 8002e72:	2b04      	cmp	r3, #4
 8002e74:	bf28      	it	cs
 8002e76:	2304      	movcs	r3, #4
 8002e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	3304      	adds	r3, #4
 8002e7e:	2b06      	cmp	r3, #6
 8002e80:	d902      	bls.n	8002e88 <NVIC_EncodePriority+0x30>
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	3b03      	subs	r3, #3
 8002e86:	e000      	b.n	8002e8a <NVIC_EncodePriority+0x32>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	43da      	mvns	r2, r3
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	401a      	ands	r2, r3
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eaa:	43d9      	mvns	r1, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb0:	4313      	orrs	r3, r2
         );
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3724      	adds	r7, #36	; 0x24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr

08002ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ecc:	d301      	bcc.n	8002ed2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e00f      	b.n	8002ef2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ed2:	4a0a      	ldr	r2, [pc, #40]	; (8002efc <SysTick_Config+0x40>)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eda:	210f      	movs	r1, #15
 8002edc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee0:	f7ff ff90 	bl	8002e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ee4:	4b05      	ldr	r3, [pc, #20]	; (8002efc <SysTick_Config+0x40>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eea:	4b04      	ldr	r3, [pc, #16]	; (8002efc <SysTick_Config+0x40>)
 8002eec:	2207      	movs	r2, #7
 8002eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	e000e010 	.word	0xe000e010

08002f00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7ff ff2d 	bl	8002d68 <__NVIC_SetPriorityGrouping>
}
 8002f0e:	bf00      	nop
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b086      	sub	sp, #24
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	60b9      	str	r1, [r7, #8]
 8002f20:	607a      	str	r2, [r7, #4]
 8002f22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f28:	f7ff ff42 	bl	8002db0 <__NVIC_GetPriorityGrouping>
 8002f2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	68b9      	ldr	r1, [r7, #8]
 8002f32:	6978      	ldr	r0, [r7, #20]
 8002f34:	f7ff ff90 	bl	8002e58 <NVIC_EncodePriority>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f3e:	4611      	mov	r1, r2
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff ff5f 	bl	8002e04 <__NVIC_SetPriority>
}
 8002f46:	bf00      	nop
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b082      	sub	sp, #8
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	4603      	mov	r3, r0
 8002f56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7ff ff35 	bl	8002dcc <__NVIC_EnableIRQ>
}
 8002f62:	bf00      	nop
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b082      	sub	sp, #8
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7ff ffa2 	bl	8002ebc <SysTick_Config>
 8002f78:	4603      	mov	r3, r0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
	...

08002f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b08b      	sub	sp, #44	; 0x2c
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f92:	2300      	movs	r3, #0
 8002f94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f96:	e161      	b.n	800325c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f98:	2201      	movs	r2, #1
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	69fa      	ldr	r2, [r7, #28]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	f040 8150 	bne.w	8003256 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	4a97      	ldr	r2, [pc, #604]	; (8003218 <HAL_GPIO_Init+0x294>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d05e      	beq.n	800307e <HAL_GPIO_Init+0xfa>
 8002fc0:	4a95      	ldr	r2, [pc, #596]	; (8003218 <HAL_GPIO_Init+0x294>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d875      	bhi.n	80030b2 <HAL_GPIO_Init+0x12e>
 8002fc6:	4a95      	ldr	r2, [pc, #596]	; (800321c <HAL_GPIO_Init+0x298>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d058      	beq.n	800307e <HAL_GPIO_Init+0xfa>
 8002fcc:	4a93      	ldr	r2, [pc, #588]	; (800321c <HAL_GPIO_Init+0x298>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d86f      	bhi.n	80030b2 <HAL_GPIO_Init+0x12e>
 8002fd2:	4a93      	ldr	r2, [pc, #588]	; (8003220 <HAL_GPIO_Init+0x29c>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d052      	beq.n	800307e <HAL_GPIO_Init+0xfa>
 8002fd8:	4a91      	ldr	r2, [pc, #580]	; (8003220 <HAL_GPIO_Init+0x29c>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d869      	bhi.n	80030b2 <HAL_GPIO_Init+0x12e>
 8002fde:	4a91      	ldr	r2, [pc, #580]	; (8003224 <HAL_GPIO_Init+0x2a0>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d04c      	beq.n	800307e <HAL_GPIO_Init+0xfa>
 8002fe4:	4a8f      	ldr	r2, [pc, #572]	; (8003224 <HAL_GPIO_Init+0x2a0>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d863      	bhi.n	80030b2 <HAL_GPIO_Init+0x12e>
 8002fea:	4a8f      	ldr	r2, [pc, #572]	; (8003228 <HAL_GPIO_Init+0x2a4>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d046      	beq.n	800307e <HAL_GPIO_Init+0xfa>
 8002ff0:	4a8d      	ldr	r2, [pc, #564]	; (8003228 <HAL_GPIO_Init+0x2a4>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d85d      	bhi.n	80030b2 <HAL_GPIO_Init+0x12e>
 8002ff6:	2b12      	cmp	r3, #18
 8002ff8:	d82a      	bhi.n	8003050 <HAL_GPIO_Init+0xcc>
 8002ffa:	2b12      	cmp	r3, #18
 8002ffc:	d859      	bhi.n	80030b2 <HAL_GPIO_Init+0x12e>
 8002ffe:	a201      	add	r2, pc, #4	; (adr r2, 8003004 <HAL_GPIO_Init+0x80>)
 8003000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003004:	0800307f 	.word	0x0800307f
 8003008:	08003059 	.word	0x08003059
 800300c:	0800306b 	.word	0x0800306b
 8003010:	080030ad 	.word	0x080030ad
 8003014:	080030b3 	.word	0x080030b3
 8003018:	080030b3 	.word	0x080030b3
 800301c:	080030b3 	.word	0x080030b3
 8003020:	080030b3 	.word	0x080030b3
 8003024:	080030b3 	.word	0x080030b3
 8003028:	080030b3 	.word	0x080030b3
 800302c:	080030b3 	.word	0x080030b3
 8003030:	080030b3 	.word	0x080030b3
 8003034:	080030b3 	.word	0x080030b3
 8003038:	080030b3 	.word	0x080030b3
 800303c:	080030b3 	.word	0x080030b3
 8003040:	080030b3 	.word	0x080030b3
 8003044:	080030b3 	.word	0x080030b3
 8003048:	08003061 	.word	0x08003061
 800304c:	08003075 	.word	0x08003075
 8003050:	4a76      	ldr	r2, [pc, #472]	; (800322c <HAL_GPIO_Init+0x2a8>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d013      	beq.n	800307e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003056:	e02c      	b.n	80030b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	623b      	str	r3, [r7, #32]
          break;
 800305e:	e029      	b.n	80030b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	3304      	adds	r3, #4
 8003066:	623b      	str	r3, [r7, #32]
          break;
 8003068:	e024      	b.n	80030b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	3308      	adds	r3, #8
 8003070:	623b      	str	r3, [r7, #32]
          break;
 8003072:	e01f      	b.n	80030b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	330c      	adds	r3, #12
 800307a:	623b      	str	r3, [r7, #32]
          break;
 800307c:	e01a      	b.n	80030b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d102      	bne.n	800308c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003086:	2304      	movs	r3, #4
 8003088:	623b      	str	r3, [r7, #32]
          break;
 800308a:	e013      	b.n	80030b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d105      	bne.n	80030a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003094:	2308      	movs	r3, #8
 8003096:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	69fa      	ldr	r2, [r7, #28]
 800309c:	611a      	str	r2, [r3, #16]
          break;
 800309e:	e009      	b.n	80030b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030a0:	2308      	movs	r3, #8
 80030a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	69fa      	ldr	r2, [r7, #28]
 80030a8:	615a      	str	r2, [r3, #20]
          break;
 80030aa:	e003      	b.n	80030b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80030ac:	2300      	movs	r3, #0
 80030ae:	623b      	str	r3, [r7, #32]
          break;
 80030b0:	e000      	b.n	80030b4 <HAL_GPIO_Init+0x130>
          break;
 80030b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	2bff      	cmp	r3, #255	; 0xff
 80030b8:	d801      	bhi.n	80030be <HAL_GPIO_Init+0x13a>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	e001      	b.n	80030c2 <HAL_GPIO_Init+0x13e>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	3304      	adds	r3, #4
 80030c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	2bff      	cmp	r3, #255	; 0xff
 80030c8:	d802      	bhi.n	80030d0 <HAL_GPIO_Init+0x14c>
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	e002      	b.n	80030d6 <HAL_GPIO_Init+0x152>
 80030d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d2:	3b08      	subs	r3, #8
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	210f      	movs	r1, #15
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	fa01 f303 	lsl.w	r3, r1, r3
 80030e4:	43db      	mvns	r3, r3
 80030e6:	401a      	ands	r2, r3
 80030e8:	6a39      	ldr	r1, [r7, #32]
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	fa01 f303 	lsl.w	r3, r1, r3
 80030f0:	431a      	orrs	r2, r3
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 80a9 	beq.w	8003256 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003104:	4b4a      	ldr	r3, [pc, #296]	; (8003230 <HAL_GPIO_Init+0x2ac>)
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	4a49      	ldr	r2, [pc, #292]	; (8003230 <HAL_GPIO_Init+0x2ac>)
 800310a:	f043 0301 	orr.w	r3, r3, #1
 800310e:	6193      	str	r3, [r2, #24]
 8003110:	4b47      	ldr	r3, [pc, #284]	; (8003230 <HAL_GPIO_Init+0x2ac>)
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	60bb      	str	r3, [r7, #8]
 800311a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800311c:	4a45      	ldr	r2, [pc, #276]	; (8003234 <HAL_GPIO_Init+0x2b0>)
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	089b      	lsrs	r3, r3, #2
 8003122:	3302      	adds	r3, #2
 8003124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003128:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	f003 0303 	and.w	r3, r3, #3
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	220f      	movs	r2, #15
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	43db      	mvns	r3, r3
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	4013      	ands	r3, r2
 800313e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a3d      	ldr	r2, [pc, #244]	; (8003238 <HAL_GPIO_Init+0x2b4>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d00d      	beq.n	8003164 <HAL_GPIO_Init+0x1e0>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a3c      	ldr	r2, [pc, #240]	; (800323c <HAL_GPIO_Init+0x2b8>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d007      	beq.n	8003160 <HAL_GPIO_Init+0x1dc>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a3b      	ldr	r2, [pc, #236]	; (8003240 <HAL_GPIO_Init+0x2bc>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d101      	bne.n	800315c <HAL_GPIO_Init+0x1d8>
 8003158:	2302      	movs	r3, #2
 800315a:	e004      	b.n	8003166 <HAL_GPIO_Init+0x1e2>
 800315c:	2303      	movs	r3, #3
 800315e:	e002      	b.n	8003166 <HAL_GPIO_Init+0x1e2>
 8003160:	2301      	movs	r3, #1
 8003162:	e000      	b.n	8003166 <HAL_GPIO_Init+0x1e2>
 8003164:	2300      	movs	r3, #0
 8003166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003168:	f002 0203 	and.w	r2, r2, #3
 800316c:	0092      	lsls	r2, r2, #2
 800316e:	4093      	lsls	r3, r2
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	4313      	orrs	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003176:	492f      	ldr	r1, [pc, #188]	; (8003234 <HAL_GPIO_Init+0x2b0>)
 8003178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317a:	089b      	lsrs	r3, r3, #2
 800317c:	3302      	adds	r3, #2
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d006      	beq.n	800319e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003190:	4b2c      	ldr	r3, [pc, #176]	; (8003244 <HAL_GPIO_Init+0x2c0>)
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	492b      	ldr	r1, [pc, #172]	; (8003244 <HAL_GPIO_Init+0x2c0>)
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	4313      	orrs	r3, r2
 800319a:	608b      	str	r3, [r1, #8]
 800319c:	e006      	b.n	80031ac <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800319e:	4b29      	ldr	r3, [pc, #164]	; (8003244 <HAL_GPIO_Init+0x2c0>)
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	43db      	mvns	r3, r3
 80031a6:	4927      	ldr	r1, [pc, #156]	; (8003244 <HAL_GPIO_Init+0x2c0>)
 80031a8:	4013      	ands	r3, r2
 80031aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d006      	beq.n	80031c6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80031b8:	4b22      	ldr	r3, [pc, #136]	; (8003244 <HAL_GPIO_Init+0x2c0>)
 80031ba:	68da      	ldr	r2, [r3, #12]
 80031bc:	4921      	ldr	r1, [pc, #132]	; (8003244 <HAL_GPIO_Init+0x2c0>)
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	60cb      	str	r3, [r1, #12]
 80031c4:	e006      	b.n	80031d4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80031c6:	4b1f      	ldr	r3, [pc, #124]	; (8003244 <HAL_GPIO_Init+0x2c0>)
 80031c8:	68da      	ldr	r2, [r3, #12]
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	43db      	mvns	r3, r3
 80031ce:	491d      	ldr	r1, [pc, #116]	; (8003244 <HAL_GPIO_Init+0x2c0>)
 80031d0:	4013      	ands	r3, r2
 80031d2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d006      	beq.n	80031ee <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80031e0:	4b18      	ldr	r3, [pc, #96]	; (8003244 <HAL_GPIO_Init+0x2c0>)
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	4917      	ldr	r1, [pc, #92]	; (8003244 <HAL_GPIO_Init+0x2c0>)
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	604b      	str	r3, [r1, #4]
 80031ec:	e006      	b.n	80031fc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80031ee:	4b15      	ldr	r3, [pc, #84]	; (8003244 <HAL_GPIO_Init+0x2c0>)
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	43db      	mvns	r3, r3
 80031f6:	4913      	ldr	r1, [pc, #76]	; (8003244 <HAL_GPIO_Init+0x2c0>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d01f      	beq.n	8003248 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003208:	4b0e      	ldr	r3, [pc, #56]	; (8003244 <HAL_GPIO_Init+0x2c0>)
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	490d      	ldr	r1, [pc, #52]	; (8003244 <HAL_GPIO_Init+0x2c0>)
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	4313      	orrs	r3, r2
 8003212:	600b      	str	r3, [r1, #0]
 8003214:	e01f      	b.n	8003256 <HAL_GPIO_Init+0x2d2>
 8003216:	bf00      	nop
 8003218:	10320000 	.word	0x10320000
 800321c:	10310000 	.word	0x10310000
 8003220:	10220000 	.word	0x10220000
 8003224:	10210000 	.word	0x10210000
 8003228:	10120000 	.word	0x10120000
 800322c:	10110000 	.word	0x10110000
 8003230:	40021000 	.word	0x40021000
 8003234:	40010000 	.word	0x40010000
 8003238:	40010800 	.word	0x40010800
 800323c:	40010c00 	.word	0x40010c00
 8003240:	40011000 	.word	0x40011000
 8003244:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003248:	4b0b      	ldr	r3, [pc, #44]	; (8003278 <HAL_GPIO_Init+0x2f4>)
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	43db      	mvns	r3, r3
 8003250:	4909      	ldr	r1, [pc, #36]	; (8003278 <HAL_GPIO_Init+0x2f4>)
 8003252:	4013      	ands	r3, r2
 8003254:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003258:	3301      	adds	r3, #1
 800325a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	fa22 f303 	lsr.w	r3, r2, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	f47f ae96 	bne.w	8002f98 <HAL_GPIO_Init+0x14>
  }
}
 800326c:	bf00      	nop
 800326e:	bf00      	nop
 8003270:	372c      	adds	r7, #44	; 0x2c
 8003272:	46bd      	mov	sp, r7
 8003274:	bc80      	pop	{r7}
 8003276:	4770      	bx	lr
 8003278:	40010400 	.word	0x40010400

0800327c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	460b      	mov	r3, r1
 8003286:	807b      	strh	r3, [r7, #2]
 8003288:	4613      	mov	r3, r2
 800328a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800328c:	787b      	ldrb	r3, [r7, #1]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003292:	887a      	ldrh	r2, [r7, #2]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003298:	e003      	b.n	80032a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800329a:	887b      	ldrh	r3, [r7, #2]
 800329c:	041a      	lsls	r2, r3, #16
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	611a      	str	r2, [r3, #16]
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bc80      	pop	{r7}
 80032aa:	4770      	bx	lr

080032ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	4603      	mov	r3, r0
 80032b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80032b6:	4b08      	ldr	r3, [pc, #32]	; (80032d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032b8:	695a      	ldr	r2, [r3, #20]
 80032ba:	88fb      	ldrh	r3, [r7, #6]
 80032bc:	4013      	ands	r3, r2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d006      	beq.n	80032d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032c2:	4a05      	ldr	r2, [pc, #20]	; (80032d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032c4:	88fb      	ldrh	r3, [r7, #6]
 80032c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032c8:	88fb      	ldrh	r3, [r7, #6]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7fe fef4 	bl	80020b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80032d0:	bf00      	nop
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	40010400 	.word	0x40010400

080032dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e272      	b.n	80037d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 8087 	beq.w	800340a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032fc:	4b92      	ldr	r3, [pc, #584]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f003 030c 	and.w	r3, r3, #12
 8003304:	2b04      	cmp	r3, #4
 8003306:	d00c      	beq.n	8003322 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003308:	4b8f      	ldr	r3, [pc, #572]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f003 030c 	and.w	r3, r3, #12
 8003310:	2b08      	cmp	r3, #8
 8003312:	d112      	bne.n	800333a <HAL_RCC_OscConfig+0x5e>
 8003314:	4b8c      	ldr	r3, [pc, #560]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800331c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003320:	d10b      	bne.n	800333a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003322:	4b89      	ldr	r3, [pc, #548]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d06c      	beq.n	8003408 <HAL_RCC_OscConfig+0x12c>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d168      	bne.n	8003408 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e24c      	b.n	80037d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003342:	d106      	bne.n	8003352 <HAL_RCC_OscConfig+0x76>
 8003344:	4b80      	ldr	r3, [pc, #512]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a7f      	ldr	r2, [pc, #508]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 800334a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800334e:	6013      	str	r3, [r2, #0]
 8003350:	e02e      	b.n	80033b0 <HAL_RCC_OscConfig+0xd4>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10c      	bne.n	8003374 <HAL_RCC_OscConfig+0x98>
 800335a:	4b7b      	ldr	r3, [pc, #492]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a7a      	ldr	r2, [pc, #488]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 8003360:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003364:	6013      	str	r3, [r2, #0]
 8003366:	4b78      	ldr	r3, [pc, #480]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a77      	ldr	r2, [pc, #476]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 800336c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003370:	6013      	str	r3, [r2, #0]
 8003372:	e01d      	b.n	80033b0 <HAL_RCC_OscConfig+0xd4>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800337c:	d10c      	bne.n	8003398 <HAL_RCC_OscConfig+0xbc>
 800337e:	4b72      	ldr	r3, [pc, #456]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a71      	ldr	r2, [pc, #452]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 8003384:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003388:	6013      	str	r3, [r2, #0]
 800338a:	4b6f      	ldr	r3, [pc, #444]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a6e      	ldr	r2, [pc, #440]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 8003390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003394:	6013      	str	r3, [r2, #0]
 8003396:	e00b      	b.n	80033b0 <HAL_RCC_OscConfig+0xd4>
 8003398:	4b6b      	ldr	r3, [pc, #428]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a6a      	ldr	r2, [pc, #424]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 800339e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033a2:	6013      	str	r3, [r2, #0]
 80033a4:	4b68      	ldr	r3, [pc, #416]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a67      	ldr	r2, [pc, #412]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 80033aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d013      	beq.n	80033e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b8:	f7fe ffce 	bl	8002358 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033c0:	f7fe ffca 	bl	8002358 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b64      	cmp	r3, #100	; 0x64
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e200      	b.n	80037d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033d2:	4b5d      	ldr	r3, [pc, #372]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0f0      	beq.n	80033c0 <HAL_RCC_OscConfig+0xe4>
 80033de:	e014      	b.n	800340a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e0:	f7fe ffba 	bl	8002358 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e8:	f7fe ffb6 	bl	8002358 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b64      	cmp	r3, #100	; 0x64
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e1ec      	b.n	80037d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033fa:	4b53      	ldr	r3, [pc, #332]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1f0      	bne.n	80033e8 <HAL_RCC_OscConfig+0x10c>
 8003406:	e000      	b.n	800340a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003408:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d063      	beq.n	80034de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003416:	4b4c      	ldr	r3, [pc, #304]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f003 030c 	and.w	r3, r3, #12
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00b      	beq.n	800343a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003422:	4b49      	ldr	r3, [pc, #292]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f003 030c 	and.w	r3, r3, #12
 800342a:	2b08      	cmp	r3, #8
 800342c:	d11c      	bne.n	8003468 <HAL_RCC_OscConfig+0x18c>
 800342e:	4b46      	ldr	r3, [pc, #280]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d116      	bne.n	8003468 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800343a:	4b43      	ldr	r3, [pc, #268]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d005      	beq.n	8003452 <HAL_RCC_OscConfig+0x176>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d001      	beq.n	8003452 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e1c0      	b.n	80037d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003452:	4b3d      	ldr	r3, [pc, #244]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	4939      	ldr	r1, [pc, #228]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 8003462:	4313      	orrs	r3, r2
 8003464:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003466:	e03a      	b.n	80034de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d020      	beq.n	80034b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003470:	4b36      	ldr	r3, [pc, #216]	; (800354c <HAL_RCC_OscConfig+0x270>)
 8003472:	2201      	movs	r2, #1
 8003474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003476:	f7fe ff6f 	bl	8002358 <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800347e:	f7fe ff6b 	bl	8002358 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e1a1      	b.n	80037d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003490:	4b2d      	ldr	r3, [pc, #180]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0f0      	beq.n	800347e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800349c:	4b2a      	ldr	r3, [pc, #168]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	00db      	lsls	r3, r3, #3
 80034aa:	4927      	ldr	r1, [pc, #156]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	600b      	str	r3, [r1, #0]
 80034b0:	e015      	b.n	80034de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034b2:	4b26      	ldr	r3, [pc, #152]	; (800354c <HAL_RCC_OscConfig+0x270>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b8:	f7fe ff4e 	bl	8002358 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034c0:	f7fe ff4a 	bl	8002358 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e180      	b.n	80037d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034d2:	4b1d      	ldr	r3, [pc, #116]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1f0      	bne.n	80034c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d03a      	beq.n	8003560 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d019      	beq.n	8003526 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034f2:	4b17      	ldr	r3, [pc, #92]	; (8003550 <HAL_RCC_OscConfig+0x274>)
 80034f4:	2201      	movs	r2, #1
 80034f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034f8:	f7fe ff2e 	bl	8002358 <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003500:	f7fe ff2a 	bl	8002358 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e160      	b.n	80037d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003512:	4b0d      	ldr	r3, [pc, #52]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d0f0      	beq.n	8003500 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800351e:	2001      	movs	r0, #1
 8003520:	f000 face 	bl	8003ac0 <RCC_Delay>
 8003524:	e01c      	b.n	8003560 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003526:	4b0a      	ldr	r3, [pc, #40]	; (8003550 <HAL_RCC_OscConfig+0x274>)
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800352c:	f7fe ff14 	bl	8002358 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003532:	e00f      	b.n	8003554 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003534:	f7fe ff10 	bl	8002358 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d908      	bls.n	8003554 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e146      	b.n	80037d4 <HAL_RCC_OscConfig+0x4f8>
 8003546:	bf00      	nop
 8003548:	40021000 	.word	0x40021000
 800354c:	42420000 	.word	0x42420000
 8003550:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003554:	4b92      	ldr	r3, [pc, #584]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 8003556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1e9      	bne.n	8003534 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 80a6 	beq.w	80036ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800356e:	2300      	movs	r3, #0
 8003570:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003572:	4b8b      	ldr	r3, [pc, #556]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10d      	bne.n	800359a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800357e:	4b88      	ldr	r3, [pc, #544]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	4a87      	ldr	r2, [pc, #540]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 8003584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003588:	61d3      	str	r3, [r2, #28]
 800358a:	4b85      	ldr	r3, [pc, #532]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003592:	60bb      	str	r3, [r7, #8]
 8003594:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003596:	2301      	movs	r3, #1
 8003598:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800359a:	4b82      	ldr	r3, [pc, #520]	; (80037a4 <HAL_RCC_OscConfig+0x4c8>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d118      	bne.n	80035d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035a6:	4b7f      	ldr	r3, [pc, #508]	; (80037a4 <HAL_RCC_OscConfig+0x4c8>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a7e      	ldr	r2, [pc, #504]	; (80037a4 <HAL_RCC_OscConfig+0x4c8>)
 80035ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035b2:	f7fe fed1 	bl	8002358 <HAL_GetTick>
 80035b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b8:	e008      	b.n	80035cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ba:	f7fe fecd 	bl	8002358 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b64      	cmp	r3, #100	; 0x64
 80035c6:	d901      	bls.n	80035cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e103      	b.n	80037d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035cc:	4b75      	ldr	r3, [pc, #468]	; (80037a4 <HAL_RCC_OscConfig+0x4c8>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d0f0      	beq.n	80035ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d106      	bne.n	80035ee <HAL_RCC_OscConfig+0x312>
 80035e0:	4b6f      	ldr	r3, [pc, #444]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	4a6e      	ldr	r2, [pc, #440]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 80035e6:	f043 0301 	orr.w	r3, r3, #1
 80035ea:	6213      	str	r3, [r2, #32]
 80035ec:	e02d      	b.n	800364a <HAL_RCC_OscConfig+0x36e>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10c      	bne.n	8003610 <HAL_RCC_OscConfig+0x334>
 80035f6:	4b6a      	ldr	r3, [pc, #424]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	4a69      	ldr	r2, [pc, #420]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 80035fc:	f023 0301 	bic.w	r3, r3, #1
 8003600:	6213      	str	r3, [r2, #32]
 8003602:	4b67      	ldr	r3, [pc, #412]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	4a66      	ldr	r2, [pc, #408]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 8003608:	f023 0304 	bic.w	r3, r3, #4
 800360c:	6213      	str	r3, [r2, #32]
 800360e:	e01c      	b.n	800364a <HAL_RCC_OscConfig+0x36e>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	2b05      	cmp	r3, #5
 8003616:	d10c      	bne.n	8003632 <HAL_RCC_OscConfig+0x356>
 8003618:	4b61      	ldr	r3, [pc, #388]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	4a60      	ldr	r2, [pc, #384]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 800361e:	f043 0304 	orr.w	r3, r3, #4
 8003622:	6213      	str	r3, [r2, #32]
 8003624:	4b5e      	ldr	r3, [pc, #376]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	4a5d      	ldr	r2, [pc, #372]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 800362a:	f043 0301 	orr.w	r3, r3, #1
 800362e:	6213      	str	r3, [r2, #32]
 8003630:	e00b      	b.n	800364a <HAL_RCC_OscConfig+0x36e>
 8003632:	4b5b      	ldr	r3, [pc, #364]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	4a5a      	ldr	r2, [pc, #360]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 8003638:	f023 0301 	bic.w	r3, r3, #1
 800363c:	6213      	str	r3, [r2, #32]
 800363e:	4b58      	ldr	r3, [pc, #352]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	4a57      	ldr	r2, [pc, #348]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 8003644:	f023 0304 	bic.w	r3, r3, #4
 8003648:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d015      	beq.n	800367e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003652:	f7fe fe81 	bl	8002358 <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003658:	e00a      	b.n	8003670 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800365a:	f7fe fe7d 	bl	8002358 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	f241 3288 	movw	r2, #5000	; 0x1388
 8003668:	4293      	cmp	r3, r2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e0b1      	b.n	80037d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003670:	4b4b      	ldr	r3, [pc, #300]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d0ee      	beq.n	800365a <HAL_RCC_OscConfig+0x37e>
 800367c:	e014      	b.n	80036a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800367e:	f7fe fe6b 	bl	8002358 <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003684:	e00a      	b.n	800369c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003686:	f7fe fe67 	bl	8002358 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	f241 3288 	movw	r2, #5000	; 0x1388
 8003694:	4293      	cmp	r3, r2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e09b      	b.n	80037d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800369c:	4b40      	ldr	r3, [pc, #256]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1ee      	bne.n	8003686 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036a8:	7dfb      	ldrb	r3, [r7, #23]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d105      	bne.n	80036ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ae:	4b3c      	ldr	r3, [pc, #240]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	4a3b      	ldr	r2, [pc, #236]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 80036b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f000 8087 	beq.w	80037d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036c4:	4b36      	ldr	r3, [pc, #216]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f003 030c 	and.w	r3, r3, #12
 80036cc:	2b08      	cmp	r3, #8
 80036ce:	d061      	beq.n	8003794 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	69db      	ldr	r3, [r3, #28]
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d146      	bne.n	8003766 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d8:	4b33      	ldr	r3, [pc, #204]	; (80037a8 <HAL_RCC_OscConfig+0x4cc>)
 80036da:	2200      	movs	r2, #0
 80036dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036de:	f7fe fe3b 	bl	8002358 <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036e4:	e008      	b.n	80036f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036e6:	f7fe fe37 	bl	8002358 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e06d      	b.n	80037d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036f8:	4b29      	ldr	r3, [pc, #164]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1f0      	bne.n	80036e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800370c:	d108      	bne.n	8003720 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800370e:	4b24      	ldr	r3, [pc, #144]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	4921      	ldr	r1, [pc, #132]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 800371c:	4313      	orrs	r3, r2
 800371e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003720:	4b1f      	ldr	r3, [pc, #124]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a19      	ldr	r1, [r3, #32]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003730:	430b      	orrs	r3, r1
 8003732:	491b      	ldr	r1, [pc, #108]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 8003734:	4313      	orrs	r3, r2
 8003736:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003738:	4b1b      	ldr	r3, [pc, #108]	; (80037a8 <HAL_RCC_OscConfig+0x4cc>)
 800373a:	2201      	movs	r2, #1
 800373c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373e:	f7fe fe0b 	bl	8002358 <HAL_GetTick>
 8003742:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003744:	e008      	b.n	8003758 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003746:	f7fe fe07 	bl	8002358 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	2b02      	cmp	r3, #2
 8003752:	d901      	bls.n	8003758 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e03d      	b.n	80037d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003758:	4b11      	ldr	r3, [pc, #68]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d0f0      	beq.n	8003746 <HAL_RCC_OscConfig+0x46a>
 8003764:	e035      	b.n	80037d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003766:	4b10      	ldr	r3, [pc, #64]	; (80037a8 <HAL_RCC_OscConfig+0x4cc>)
 8003768:	2200      	movs	r2, #0
 800376a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800376c:	f7fe fdf4 	bl	8002358 <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003774:	f7fe fdf0 	bl	8002358 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e026      	b.n	80037d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003786:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1f0      	bne.n	8003774 <HAL_RCC_OscConfig+0x498>
 8003792:	e01e      	b.n	80037d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	69db      	ldr	r3, [r3, #28]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d107      	bne.n	80037ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e019      	b.n	80037d4 <HAL_RCC_OscConfig+0x4f8>
 80037a0:	40021000 	.word	0x40021000
 80037a4:	40007000 	.word	0x40007000
 80037a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037ac:	4b0b      	ldr	r3, [pc, #44]	; (80037dc <HAL_RCC_OscConfig+0x500>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d106      	bne.n	80037ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d001      	beq.n	80037d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e000      	b.n	80037d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3718      	adds	r7, #24
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	40021000 	.word	0x40021000

080037e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e0d0      	b.n	8003996 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037f4:	4b6a      	ldr	r3, [pc, #424]	; (80039a0 <HAL_RCC_ClockConfig+0x1c0>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0307 	and.w	r3, r3, #7
 80037fc:	683a      	ldr	r2, [r7, #0]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d910      	bls.n	8003824 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003802:	4b67      	ldr	r3, [pc, #412]	; (80039a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f023 0207 	bic.w	r2, r3, #7
 800380a:	4965      	ldr	r1, [pc, #404]	; (80039a0 <HAL_RCC_ClockConfig+0x1c0>)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	4313      	orrs	r3, r2
 8003810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003812:	4b63      	ldr	r3, [pc, #396]	; (80039a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	429a      	cmp	r2, r3
 800381e:	d001      	beq.n	8003824 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e0b8      	b.n	8003996 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d020      	beq.n	8003872 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b00      	cmp	r3, #0
 800383a:	d005      	beq.n	8003848 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800383c:	4b59      	ldr	r3, [pc, #356]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	4a58      	ldr	r2, [pc, #352]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003842:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003846:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0308 	and.w	r3, r3, #8
 8003850:	2b00      	cmp	r3, #0
 8003852:	d005      	beq.n	8003860 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003854:	4b53      	ldr	r3, [pc, #332]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	4a52      	ldr	r2, [pc, #328]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 800385a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800385e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003860:	4b50      	ldr	r3, [pc, #320]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	494d      	ldr	r1, [pc, #308]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 800386e:	4313      	orrs	r3, r2
 8003870:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b00      	cmp	r3, #0
 800387c:	d040      	beq.n	8003900 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d107      	bne.n	8003896 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003886:	4b47      	ldr	r3, [pc, #284]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d115      	bne.n	80038be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e07f      	b.n	8003996 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	2b02      	cmp	r3, #2
 800389c:	d107      	bne.n	80038ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800389e:	4b41      	ldr	r3, [pc, #260]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d109      	bne.n	80038be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e073      	b.n	8003996 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ae:	4b3d      	ldr	r3, [pc, #244]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e06b      	b.n	8003996 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038be:	4b39      	ldr	r3, [pc, #228]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f023 0203 	bic.w	r2, r3, #3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	4936      	ldr	r1, [pc, #216]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038d0:	f7fe fd42 	bl	8002358 <HAL_GetTick>
 80038d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038d6:	e00a      	b.n	80038ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038d8:	f7fe fd3e 	bl	8002358 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e053      	b.n	8003996 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ee:	4b2d      	ldr	r3, [pc, #180]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f003 020c 	and.w	r2, r3, #12
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d1eb      	bne.n	80038d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003900:	4b27      	ldr	r3, [pc, #156]	; (80039a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0307 	and.w	r3, r3, #7
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	429a      	cmp	r2, r3
 800390c:	d210      	bcs.n	8003930 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800390e:	4b24      	ldr	r3, [pc, #144]	; (80039a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f023 0207 	bic.w	r2, r3, #7
 8003916:	4922      	ldr	r1, [pc, #136]	; (80039a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	4313      	orrs	r3, r2
 800391c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800391e:	4b20      	ldr	r3, [pc, #128]	; (80039a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0307 	and.w	r3, r3, #7
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	429a      	cmp	r2, r3
 800392a:	d001      	beq.n	8003930 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e032      	b.n	8003996 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b00      	cmp	r3, #0
 800393a:	d008      	beq.n	800394e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800393c:	4b19      	ldr	r3, [pc, #100]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	4916      	ldr	r1, [pc, #88]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 800394a:	4313      	orrs	r3, r2
 800394c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0308 	and.w	r3, r3, #8
 8003956:	2b00      	cmp	r3, #0
 8003958:	d009      	beq.n	800396e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800395a:	4b12      	ldr	r3, [pc, #72]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	490e      	ldr	r1, [pc, #56]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 800396a:	4313      	orrs	r3, r2
 800396c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800396e:	f000 f821 	bl	80039b4 <HAL_RCC_GetSysClockFreq>
 8003972:	4602      	mov	r2, r0
 8003974:	4b0b      	ldr	r3, [pc, #44]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	091b      	lsrs	r3, r3, #4
 800397a:	f003 030f 	and.w	r3, r3, #15
 800397e:	490a      	ldr	r1, [pc, #40]	; (80039a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003980:	5ccb      	ldrb	r3, [r1, r3]
 8003982:	fa22 f303 	lsr.w	r3, r2, r3
 8003986:	4a09      	ldr	r2, [pc, #36]	; (80039ac <HAL_RCC_ClockConfig+0x1cc>)
 8003988:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800398a:	4b09      	ldr	r3, [pc, #36]	; (80039b0 <HAL_RCC_ClockConfig+0x1d0>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f7fe fca0 	bl	80022d4 <HAL_InitTick>

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	40022000 	.word	0x40022000
 80039a4:	40021000 	.word	0x40021000
 80039a8:	080077fc 	.word	0x080077fc
 80039ac:	2000000c 	.word	0x2000000c
 80039b0:	20000010 	.word	0x20000010

080039b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b087      	sub	sp, #28
 80039b8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039ba:	2300      	movs	r3, #0
 80039bc:	60fb      	str	r3, [r7, #12]
 80039be:	2300      	movs	r3, #0
 80039c0:	60bb      	str	r3, [r7, #8]
 80039c2:	2300      	movs	r3, #0
 80039c4:	617b      	str	r3, [r7, #20]
 80039c6:	2300      	movs	r3, #0
 80039c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80039ca:	2300      	movs	r3, #0
 80039cc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80039ce:	4b1e      	ldr	r3, [pc, #120]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x94>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f003 030c 	and.w	r3, r3, #12
 80039da:	2b04      	cmp	r3, #4
 80039dc:	d002      	beq.n	80039e4 <HAL_RCC_GetSysClockFreq+0x30>
 80039de:	2b08      	cmp	r3, #8
 80039e0:	d003      	beq.n	80039ea <HAL_RCC_GetSysClockFreq+0x36>
 80039e2:	e027      	b.n	8003a34 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039e4:	4b19      	ldr	r3, [pc, #100]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x98>)
 80039e6:	613b      	str	r3, [r7, #16]
      break;
 80039e8:	e027      	b.n	8003a3a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	0c9b      	lsrs	r3, r3, #18
 80039ee:	f003 030f 	and.w	r3, r3, #15
 80039f2:	4a17      	ldr	r2, [pc, #92]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x9c>)
 80039f4:	5cd3      	ldrb	r3, [r2, r3]
 80039f6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d010      	beq.n	8003a24 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a02:	4b11      	ldr	r3, [pc, #68]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	0c5b      	lsrs	r3, r3, #17
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	4a11      	ldr	r2, [pc, #68]	; (8003a54 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a0e:	5cd3      	ldrb	r3, [r2, r3]
 8003a10:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a0d      	ldr	r2, [pc, #52]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x98>)
 8003a16:	fb03 f202 	mul.w	r2, r3, r2
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a20:	617b      	str	r3, [r7, #20]
 8003a22:	e004      	b.n	8003a2e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a0c      	ldr	r2, [pc, #48]	; (8003a58 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a28:	fb02 f303 	mul.w	r3, r2, r3
 8003a2c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	613b      	str	r3, [r7, #16]
      break;
 8003a32:	e002      	b.n	8003a3a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a34:	4b05      	ldr	r3, [pc, #20]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x98>)
 8003a36:	613b      	str	r3, [r7, #16]
      break;
 8003a38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a3a:	693b      	ldr	r3, [r7, #16]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	371c      	adds	r7, #28
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bc80      	pop	{r7}
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	007a1200 	.word	0x007a1200
 8003a50:	08007814 	.word	0x08007814
 8003a54:	08007824 	.word	0x08007824
 8003a58:	003d0900 	.word	0x003d0900

08003a5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a60:	4b02      	ldr	r3, [pc, #8]	; (8003a6c <HAL_RCC_GetHCLKFreq+0x10>)
 8003a62:	681b      	ldr	r3, [r3, #0]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bc80      	pop	{r7}
 8003a6a:	4770      	bx	lr
 8003a6c:	2000000c 	.word	0x2000000c

08003a70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a74:	f7ff fff2 	bl	8003a5c <HAL_RCC_GetHCLKFreq>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	4b05      	ldr	r3, [pc, #20]	; (8003a90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	0a1b      	lsrs	r3, r3, #8
 8003a80:	f003 0307 	and.w	r3, r3, #7
 8003a84:	4903      	ldr	r1, [pc, #12]	; (8003a94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a86:	5ccb      	ldrb	r3, [r1, r3]
 8003a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40021000 	.word	0x40021000
 8003a94:	0800780c 	.word	0x0800780c

08003a98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a9c:	f7ff ffde 	bl	8003a5c <HAL_RCC_GetHCLKFreq>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	4b05      	ldr	r3, [pc, #20]	; (8003ab8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	0adb      	lsrs	r3, r3, #11
 8003aa8:	f003 0307 	and.w	r3, r3, #7
 8003aac:	4903      	ldr	r1, [pc, #12]	; (8003abc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003aae:	5ccb      	ldrb	r3, [r1, r3]
 8003ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	0800780c 	.word	0x0800780c

08003ac0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ac8:	4b0a      	ldr	r3, [pc, #40]	; (8003af4 <RCC_Delay+0x34>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a0a      	ldr	r2, [pc, #40]	; (8003af8 <RCC_Delay+0x38>)
 8003ace:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad2:	0a5b      	lsrs	r3, r3, #9
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	fb02 f303 	mul.w	r3, r2, r3
 8003ada:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003adc:	bf00      	nop
  }
  while (Delay --);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	1e5a      	subs	r2, r3, #1
 8003ae2:	60fa      	str	r2, [r7, #12]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1f9      	bne.n	8003adc <RCC_Delay+0x1c>
}
 8003ae8:	bf00      	nop
 8003aea:	bf00      	nop
 8003aec:	3714      	adds	r7, #20
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bc80      	pop	{r7}
 8003af2:	4770      	bx	lr
 8003af4:	2000000c 	.word	0x2000000c
 8003af8:	10624dd3 	.word	0x10624dd3

08003afc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003b04:	2300      	movs	r3, #0
 8003b06:	613b      	str	r3, [r7, #16]
 8003b08:	2300      	movs	r3, #0
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d07d      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b1c:	4b4f      	ldr	r3, [pc, #316]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b1e:	69db      	ldr	r3, [r3, #28]
 8003b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10d      	bne.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b28:	4b4c      	ldr	r3, [pc, #304]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b2a:	69db      	ldr	r3, [r3, #28]
 8003b2c:	4a4b      	ldr	r2, [pc, #300]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b32:	61d3      	str	r3, [r2, #28]
 8003b34:	4b49      	ldr	r3, [pc, #292]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b36:	69db      	ldr	r3, [r3, #28]
 8003b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b3c:	60bb      	str	r3, [r7, #8]
 8003b3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b40:	2301      	movs	r3, #1
 8003b42:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b44:	4b46      	ldr	r3, [pc, #280]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d118      	bne.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b50:	4b43      	ldr	r3, [pc, #268]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a42      	ldr	r2, [pc, #264]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b5c:	f7fe fbfc 	bl	8002358 <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b62:	e008      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b64:	f7fe fbf8 	bl	8002358 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b64      	cmp	r3, #100	; 0x64
 8003b70:	d901      	bls.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e06d      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b76:	4b3a      	ldr	r3, [pc, #232]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0f0      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b82:	4b36      	ldr	r3, [pc, #216]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b8a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d02e      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d027      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ba0:	4b2e      	ldr	r3, [pc, #184]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ba8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003baa:	4b2e      	ldr	r3, [pc, #184]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bac:	2201      	movs	r2, #1
 8003bae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bb0:	4b2c      	ldr	r3, [pc, #176]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003bb6:	4a29      	ldr	r2, [pc, #164]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d014      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc6:	f7fe fbc7 	bl	8002358 <HAL_GetTick>
 8003bca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bcc:	e00a      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bce:	f7fe fbc3 	bl	8002358 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d901      	bls.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e036      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be4:	4b1d      	ldr	r3, [pc, #116]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d0ee      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bf0:	4b1a      	ldr	r3, [pc, #104]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	4917      	ldr	r1, [pc, #92]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c02:	7dfb      	ldrb	r3, [r7, #23]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d105      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c08:	4b14      	ldr	r3, [pc, #80]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c0a:	69db      	ldr	r3, [r3, #28]
 8003c0c:	4a13      	ldr	r2, [pc, #76]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c12:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d008      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c20:	4b0e      	ldr	r3, [pc, #56]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	490b      	ldr	r1, [pc, #44]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0310 	and.w	r3, r3, #16
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d008      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c3e:	4b07      	ldr	r3, [pc, #28]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	4904      	ldr	r1, [pc, #16]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3718      	adds	r7, #24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	40007000 	.word	0x40007000
 8003c64:	42420440 	.word	0x42420440

08003c68 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b088      	sub	sp, #32
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003c70:	2300      	movs	r3, #0
 8003c72:	617b      	str	r3, [r7, #20]
 8003c74:	2300      	movs	r3, #0
 8003c76:	61fb      	str	r3, [r7, #28]
 8003c78:	2300      	movs	r3, #0
 8003c7a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	60fb      	str	r3, [r7, #12]
 8003c80:	2300      	movs	r3, #0
 8003c82:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b10      	cmp	r3, #16
 8003c88:	d00a      	beq.n	8003ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b10      	cmp	r3, #16
 8003c8e:	f200 808a 	bhi.w	8003da6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d045      	beq.n	8003d24 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d075      	beq.n	8003d8a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003c9e:	e082      	b.n	8003da6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003ca0:	4b46      	ldr	r3, [pc, #280]	; (8003dbc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003ca6:	4b45      	ldr	r3, [pc, #276]	; (8003dbc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d07b      	beq.n	8003daa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	0c9b      	lsrs	r3, r3, #18
 8003cb6:	f003 030f 	and.w	r3, r3, #15
 8003cba:	4a41      	ldr	r2, [pc, #260]	; (8003dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003cbc:	5cd3      	ldrb	r3, [r2, r3]
 8003cbe:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d015      	beq.n	8003cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003cca:	4b3c      	ldr	r3, [pc, #240]	; (8003dbc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	0c5b      	lsrs	r3, r3, #17
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	4a3b      	ldr	r2, [pc, #236]	; (8003dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003cd6:	5cd3      	ldrb	r3, [r2, r3]
 8003cd8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00d      	beq.n	8003d00 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003ce4:	4a38      	ldr	r2, [pc, #224]	; (8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	fb02 f303 	mul.w	r3, r2, r3
 8003cf2:	61fb      	str	r3, [r7, #28]
 8003cf4:	e004      	b.n	8003d00 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	4a34      	ldr	r2, [pc, #208]	; (8003dcc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003cfa:	fb02 f303 	mul.w	r3, r2, r3
 8003cfe:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003d00:	4b2e      	ldr	r3, [pc, #184]	; (8003dbc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d0c:	d102      	bne.n	8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	61bb      	str	r3, [r7, #24]
      break;
 8003d12:	e04a      	b.n	8003daa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	4a2d      	ldr	r2, [pc, #180]	; (8003dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1e:	085b      	lsrs	r3, r3, #1
 8003d20:	61bb      	str	r3, [r7, #24]
      break;
 8003d22:	e042      	b.n	8003daa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003d24:	4b25      	ldr	r3, [pc, #148]	; (8003dbc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d34:	d108      	bne.n	8003d48 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d003      	beq.n	8003d48 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003d40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d44:	61bb      	str	r3, [r7, #24]
 8003d46:	e01f      	b.n	8003d88 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d52:	d109      	bne.n	8003d68 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003d54:	4b19      	ldr	r3, [pc, #100]	; (8003dbc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d003      	beq.n	8003d68 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003d60:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003d64:	61bb      	str	r3, [r7, #24]
 8003d66:	e00f      	b.n	8003d88 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d72:	d11c      	bne.n	8003dae <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003d74:	4b11      	ldr	r3, [pc, #68]	; (8003dbc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d016      	beq.n	8003dae <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003d80:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003d84:	61bb      	str	r3, [r7, #24]
      break;
 8003d86:	e012      	b.n	8003dae <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003d88:	e011      	b.n	8003dae <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003d8a:	f7ff fe85 	bl	8003a98 <HAL_RCC_GetPCLK2Freq>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	4b0a      	ldr	r3, [pc, #40]	; (8003dbc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	0b9b      	lsrs	r3, r3, #14
 8003d96:	f003 0303 	and.w	r3, r3, #3
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da2:	61bb      	str	r3, [r7, #24]
      break;
 8003da4:	e004      	b.n	8003db0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003da6:	bf00      	nop
 8003da8:	e002      	b.n	8003db0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003daa:	bf00      	nop
 8003dac:	e000      	b.n	8003db0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003dae:	bf00      	nop
    }
  }
  return (frequency);
 8003db0:	69bb      	ldr	r3, [r7, #24]
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3720      	adds	r7, #32
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	08007828 	.word	0x08007828
 8003dc4:	08007838 	.word	0x08007838
 8003dc8:	007a1200 	.word	0x007a1200
 8003dcc:	003d0900 	.word	0x003d0900
 8003dd0:	aaaaaaab 	.word	0xaaaaaaab

08003dd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e041      	b.n	8003e6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d106      	bne.n	8003e00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7fe f8b4 	bl	8001f68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2202      	movs	r2, #2
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3304      	adds	r3, #4
 8003e10:	4619      	mov	r1, r3
 8003e12:	4610      	mov	r0, r2
 8003e14:	f000 fa6e 	bl	80042f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
	...

08003e74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d001      	beq.n	8003e8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e035      	b.n	8003ef8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2202      	movs	r2, #2
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68da      	ldr	r2, [r3, #12]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f042 0201 	orr.w	r2, r2, #1
 8003ea2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a16      	ldr	r2, [pc, #88]	; (8003f04 <HAL_TIM_Base_Start_IT+0x90>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d009      	beq.n	8003ec2 <HAL_TIM_Base_Start_IT+0x4e>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb6:	d004      	beq.n	8003ec2 <HAL_TIM_Base_Start_IT+0x4e>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a12      	ldr	r2, [pc, #72]	; (8003f08 <HAL_TIM_Base_Start_IT+0x94>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d111      	bne.n	8003ee6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f003 0307 	and.w	r3, r3, #7
 8003ecc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2b06      	cmp	r3, #6
 8003ed2:	d010      	beq.n	8003ef6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 0201 	orr.w	r2, r2, #1
 8003ee2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ee4:	e007      	b.n	8003ef6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f042 0201 	orr.w	r2, r2, #1
 8003ef4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3714      	adds	r7, #20
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bc80      	pop	{r7}
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	40012c00 	.word	0x40012c00
 8003f08:	40000400 	.word	0x40000400

08003f0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d122      	bne.n	8003f68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d11b      	bne.n	8003f68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f06f 0202 	mvn.w	r2, #2
 8003f38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	f003 0303 	and.w	r3, r3, #3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f9b4 	bl	80042bc <HAL_TIM_IC_CaptureCallback>
 8003f54:	e005      	b.n	8003f62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f9a7 	bl	80042aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 f9b6 	bl	80042ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	f003 0304 	and.w	r3, r3, #4
 8003f72:	2b04      	cmp	r3, #4
 8003f74:	d122      	bne.n	8003fbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b04      	cmp	r3, #4
 8003f82:	d11b      	bne.n	8003fbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f06f 0204 	mvn.w	r2, #4
 8003f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2202      	movs	r2, #2
 8003f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f98a 	bl	80042bc <HAL_TIM_IC_CaptureCallback>
 8003fa8:	e005      	b.n	8003fb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f97d 	bl	80042aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f98c 	bl	80042ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	f003 0308 	and.w	r3, r3, #8
 8003fc6:	2b08      	cmp	r3, #8
 8003fc8:	d122      	bne.n	8004010 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	f003 0308 	and.w	r3, r3, #8
 8003fd4:	2b08      	cmp	r3, #8
 8003fd6:	d11b      	bne.n	8004010 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f06f 0208 	mvn.w	r2, #8
 8003fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2204      	movs	r2, #4
 8003fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	f003 0303 	and.w	r3, r3, #3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f960 	bl	80042bc <HAL_TIM_IC_CaptureCallback>
 8003ffc:	e005      	b.n	800400a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f953 	bl	80042aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 f962 	bl	80042ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	f003 0310 	and.w	r3, r3, #16
 800401a:	2b10      	cmp	r3, #16
 800401c:	d122      	bne.n	8004064 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	f003 0310 	and.w	r3, r3, #16
 8004028:	2b10      	cmp	r3, #16
 800402a:	d11b      	bne.n	8004064 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f06f 0210 	mvn.w	r2, #16
 8004034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2208      	movs	r2, #8
 800403a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004046:	2b00      	cmp	r3, #0
 8004048:	d003      	beq.n	8004052 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f936 	bl	80042bc <HAL_TIM_IC_CaptureCallback>
 8004050:	e005      	b.n	800405e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f929 	bl	80042aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 f938 	bl	80042ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b01      	cmp	r3, #1
 8004070:	d10e      	bne.n	8004090 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	2b01      	cmp	r3, #1
 800407e:	d107      	bne.n	8004090 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f06f 0201 	mvn.w	r2, #1
 8004088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7fd fefc 	bl	8001e88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800409a:	2b80      	cmp	r3, #128	; 0x80
 800409c:	d10e      	bne.n	80040bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a8:	2b80      	cmp	r3, #128	; 0x80
 80040aa:	d107      	bne.n	80040bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 fa6b 	bl	8004592 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c6:	2b40      	cmp	r3, #64	; 0x40
 80040c8:	d10e      	bne.n	80040e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d4:	2b40      	cmp	r3, #64	; 0x40
 80040d6:	d107      	bne.n	80040e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f8fc 	bl	80042e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	f003 0320 	and.w	r3, r3, #32
 80040f2:	2b20      	cmp	r3, #32
 80040f4:	d10e      	bne.n	8004114 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	f003 0320 	and.w	r3, r3, #32
 8004100:	2b20      	cmp	r3, #32
 8004102:	d107      	bne.n	8004114 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f06f 0220 	mvn.w	r2, #32
 800410c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 fa36 	bl	8004580 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004114:	bf00      	nop
 8004116:	3708      	adds	r7, #8
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004126:	2300      	movs	r3, #0
 8004128:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004130:	2b01      	cmp	r3, #1
 8004132:	d101      	bne.n	8004138 <HAL_TIM_ConfigClockSource+0x1c>
 8004134:	2302      	movs	r3, #2
 8004136:	e0b4      	b.n	80042a2 <HAL_TIM_ConfigClockSource+0x186>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2202      	movs	r2, #2
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004156:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800415e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004170:	d03e      	beq.n	80041f0 <HAL_TIM_ConfigClockSource+0xd4>
 8004172:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004176:	f200 8087 	bhi.w	8004288 <HAL_TIM_ConfigClockSource+0x16c>
 800417a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800417e:	f000 8086 	beq.w	800428e <HAL_TIM_ConfigClockSource+0x172>
 8004182:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004186:	d87f      	bhi.n	8004288 <HAL_TIM_ConfigClockSource+0x16c>
 8004188:	2b70      	cmp	r3, #112	; 0x70
 800418a:	d01a      	beq.n	80041c2 <HAL_TIM_ConfigClockSource+0xa6>
 800418c:	2b70      	cmp	r3, #112	; 0x70
 800418e:	d87b      	bhi.n	8004288 <HAL_TIM_ConfigClockSource+0x16c>
 8004190:	2b60      	cmp	r3, #96	; 0x60
 8004192:	d050      	beq.n	8004236 <HAL_TIM_ConfigClockSource+0x11a>
 8004194:	2b60      	cmp	r3, #96	; 0x60
 8004196:	d877      	bhi.n	8004288 <HAL_TIM_ConfigClockSource+0x16c>
 8004198:	2b50      	cmp	r3, #80	; 0x50
 800419a:	d03c      	beq.n	8004216 <HAL_TIM_ConfigClockSource+0xfa>
 800419c:	2b50      	cmp	r3, #80	; 0x50
 800419e:	d873      	bhi.n	8004288 <HAL_TIM_ConfigClockSource+0x16c>
 80041a0:	2b40      	cmp	r3, #64	; 0x40
 80041a2:	d058      	beq.n	8004256 <HAL_TIM_ConfigClockSource+0x13a>
 80041a4:	2b40      	cmp	r3, #64	; 0x40
 80041a6:	d86f      	bhi.n	8004288 <HAL_TIM_ConfigClockSource+0x16c>
 80041a8:	2b30      	cmp	r3, #48	; 0x30
 80041aa:	d064      	beq.n	8004276 <HAL_TIM_ConfigClockSource+0x15a>
 80041ac:	2b30      	cmp	r3, #48	; 0x30
 80041ae:	d86b      	bhi.n	8004288 <HAL_TIM_ConfigClockSource+0x16c>
 80041b0:	2b20      	cmp	r3, #32
 80041b2:	d060      	beq.n	8004276 <HAL_TIM_ConfigClockSource+0x15a>
 80041b4:	2b20      	cmp	r3, #32
 80041b6:	d867      	bhi.n	8004288 <HAL_TIM_ConfigClockSource+0x16c>
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d05c      	beq.n	8004276 <HAL_TIM_ConfigClockSource+0x15a>
 80041bc:	2b10      	cmp	r3, #16
 80041be:	d05a      	beq.n	8004276 <HAL_TIM_ConfigClockSource+0x15a>
 80041c0:	e062      	b.n	8004288 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6818      	ldr	r0, [r3, #0]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	6899      	ldr	r1, [r3, #8]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	f000 f95e 	bl	8004492 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68ba      	ldr	r2, [r7, #8]
 80041ec:	609a      	str	r2, [r3, #8]
      break;
 80041ee:	e04f      	b.n	8004290 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6818      	ldr	r0, [r3, #0]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	6899      	ldr	r1, [r3, #8]
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f000 f947 	bl	8004492 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	689a      	ldr	r2, [r3, #8]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004212:	609a      	str	r2, [r3, #8]
      break;
 8004214:	e03c      	b.n	8004290 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6818      	ldr	r0, [r3, #0]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	6859      	ldr	r1, [r3, #4]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	461a      	mov	r2, r3
 8004224:	f000 f8be 	bl	80043a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2150      	movs	r1, #80	; 0x50
 800422e:	4618      	mov	r0, r3
 8004230:	f000 f915 	bl	800445e <TIM_ITRx_SetConfig>
      break;
 8004234:	e02c      	b.n	8004290 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6818      	ldr	r0, [r3, #0]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	6859      	ldr	r1, [r3, #4]
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	461a      	mov	r2, r3
 8004244:	f000 f8dc 	bl	8004400 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2160      	movs	r1, #96	; 0x60
 800424e:	4618      	mov	r0, r3
 8004250:	f000 f905 	bl	800445e <TIM_ITRx_SetConfig>
      break;
 8004254:	e01c      	b.n	8004290 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6818      	ldr	r0, [r3, #0]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	6859      	ldr	r1, [r3, #4]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	461a      	mov	r2, r3
 8004264:	f000 f89e 	bl	80043a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2140      	movs	r1, #64	; 0x40
 800426e:	4618      	mov	r0, r3
 8004270:	f000 f8f5 	bl	800445e <TIM_ITRx_SetConfig>
      break;
 8004274:	e00c      	b.n	8004290 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4619      	mov	r1, r3
 8004280:	4610      	mov	r0, r2
 8004282:	f000 f8ec 	bl	800445e <TIM_ITRx_SetConfig>
      break;
 8004286:	e003      	b.n	8004290 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	73fb      	strb	r3, [r7, #15]
      break;
 800428c:	e000      	b.n	8004290 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800428e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b083      	sub	sp, #12
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042b2:	bf00      	nop
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bc80      	pop	{r7}
 80042ba:	4770      	bx	lr

080042bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bc80      	pop	{r7}
 80042cc:	4770      	bx	lr

080042ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042ce:	b480      	push	{r7}
 80042d0:	b083      	sub	sp, #12
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042d6:	bf00      	nop
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	bc80      	pop	{r7}
 80042de:	4770      	bx	lr

080042e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bc80      	pop	{r7}
 80042f0:	4770      	bx	lr
	...

080042f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a25      	ldr	r2, [pc, #148]	; (800439c <TIM_Base_SetConfig+0xa8>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d007      	beq.n	800431c <TIM_Base_SetConfig+0x28>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004312:	d003      	beq.n	800431c <TIM_Base_SetConfig+0x28>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a22      	ldr	r2, [pc, #136]	; (80043a0 <TIM_Base_SetConfig+0xac>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d108      	bne.n	800432e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004322:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	4313      	orrs	r3, r2
 800432c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a1a      	ldr	r2, [pc, #104]	; (800439c <TIM_Base_SetConfig+0xa8>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d007      	beq.n	8004346 <TIM_Base_SetConfig+0x52>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800433c:	d003      	beq.n	8004346 <TIM_Base_SetConfig+0x52>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a17      	ldr	r2, [pc, #92]	; (80043a0 <TIM_Base_SetConfig+0xac>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d108      	bne.n	8004358 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800434c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	4313      	orrs	r3, r2
 8004356:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	4313      	orrs	r3, r2
 8004364:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a07      	ldr	r2, [pc, #28]	; (800439c <TIM_Base_SetConfig+0xa8>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d103      	bne.n	800438c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	691a      	ldr	r2, [r3, #16]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	615a      	str	r2, [r3, #20]
}
 8004392:	bf00      	nop
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	bc80      	pop	{r7}
 800439a:	4770      	bx	lr
 800439c:	40012c00 	.word	0x40012c00
 80043a0:	40000400 	.word	0x40000400

080043a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b087      	sub	sp, #28
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6a1b      	ldr	r3, [r3, #32]
 80043b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	f023 0201 	bic.w	r2, r3, #1
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	011b      	lsls	r3, r3, #4
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	f023 030a 	bic.w	r3, r3, #10
 80043e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	621a      	str	r2, [r3, #32]
}
 80043f6:	bf00      	nop
 80043f8:	371c      	adds	r7, #28
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bc80      	pop	{r7}
 80043fe:	4770      	bx	lr

08004400 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004400:	b480      	push	{r7}
 8004402:	b087      	sub	sp, #28
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6a1b      	ldr	r3, [r3, #32]
 8004410:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	f023 0210 	bic.w	r2, r3, #16
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800442a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	031b      	lsls	r3, r3, #12
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	4313      	orrs	r3, r2
 8004434:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800443c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	011b      	lsls	r3, r3, #4
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	4313      	orrs	r3, r2
 8004446:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	697a      	ldr	r2, [r7, #20]
 8004452:	621a      	str	r2, [r3, #32]
}
 8004454:	bf00      	nop
 8004456:	371c      	adds	r7, #28
 8004458:	46bd      	mov	sp, r7
 800445a:	bc80      	pop	{r7}
 800445c:	4770      	bx	lr

0800445e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800445e:	b480      	push	{r7}
 8004460:	b085      	sub	sp, #20
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
 8004466:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004474:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004476:	683a      	ldr	r2, [r7, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	4313      	orrs	r3, r2
 800447c:	f043 0307 	orr.w	r3, r3, #7
 8004480:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	609a      	str	r2, [r3, #8]
}
 8004488:	bf00      	nop
 800448a:	3714      	adds	r7, #20
 800448c:	46bd      	mov	sp, r7
 800448e:	bc80      	pop	{r7}
 8004490:	4770      	bx	lr

08004492 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004492:	b480      	push	{r7}
 8004494:	b087      	sub	sp, #28
 8004496:	af00      	add	r7, sp, #0
 8004498:	60f8      	str	r0, [r7, #12]
 800449a:	60b9      	str	r1, [r7, #8]
 800449c:	607a      	str	r2, [r7, #4]
 800449e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044ac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	021a      	lsls	r2, r3, #8
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	431a      	orrs	r2, r3
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	4313      	orrs	r3, r2
 80044be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	609a      	str	r2, [r3, #8]
}
 80044c6:	bf00      	nop
 80044c8:	371c      	adds	r7, #28
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bc80      	pop	{r7}
 80044ce:	4770      	bx	lr

080044d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d101      	bne.n	80044e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044e4:	2302      	movs	r3, #2
 80044e6:	e041      	b.n	800456c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2202      	movs	r2, #2
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800450e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	4313      	orrs	r3, r2
 8004518:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a14      	ldr	r2, [pc, #80]	; (8004578 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d009      	beq.n	8004540 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004534:	d004      	beq.n	8004540 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a10      	ldr	r2, [pc, #64]	; (800457c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d10c      	bne.n	800455a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004546:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	68ba      	ldr	r2, [r7, #8]
 800454e:	4313      	orrs	r3, r2
 8004550:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68ba      	ldr	r2, [r7, #8]
 8004558:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3714      	adds	r7, #20
 8004570:	46bd      	mov	sp, r7
 8004572:	bc80      	pop	{r7}
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	40012c00 	.word	0x40012c00
 800457c:	40000400 	.word	0x40000400

08004580 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	bc80      	pop	{r7}
 8004590:	4770      	bx	lr

08004592 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004592:	b480      	push	{r7}
 8004594:	b083      	sub	sp, #12
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800459a:	bf00      	nop
 800459c:	370c      	adds	r7, #12
 800459e:	46bd      	mov	sp, r7
 80045a0:	bc80      	pop	{r7}
 80045a2:	4770      	bx	lr

080045a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e042      	b.n	800463c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d106      	bne.n	80045d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f7fd fcf0 	bl	8001fb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2224      	movs	r2, #36	; 0x24
 80045d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68da      	ldr	r2, [r3, #12]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 f91d 	bl	8004828 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	691a      	ldr	r2, [r3, #16]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	695a      	ldr	r2, [r3, #20]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800460c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68da      	ldr	r2, [r3, #12]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800461c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2220      	movs	r2, #32
 8004628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2220      	movs	r2, #32
 8004630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3708      	adds	r7, #8
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b08a      	sub	sp, #40	; 0x28
 8004648:	af02      	add	r7, sp, #8
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	603b      	str	r3, [r7, #0]
 8004650:	4613      	mov	r3, r2
 8004652:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004654:	2300      	movs	r3, #0
 8004656:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b20      	cmp	r3, #32
 8004662:	d16d      	bne.n	8004740 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d002      	beq.n	8004670 <HAL_UART_Transmit+0x2c>
 800466a:	88fb      	ldrh	r3, [r7, #6]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d101      	bne.n	8004674 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e066      	b.n	8004742 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2221      	movs	r2, #33	; 0x21
 800467e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004682:	f7fd fe69 	bl	8002358 <HAL_GetTick>
 8004686:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	88fa      	ldrh	r2, [r7, #6]
 800468c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	88fa      	ldrh	r2, [r7, #6]
 8004692:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800469c:	d108      	bne.n	80046b0 <HAL_UART_Transmit+0x6c>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d104      	bne.n	80046b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80046a6:	2300      	movs	r3, #0
 80046a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	61bb      	str	r3, [r7, #24]
 80046ae:	e003      	b.n	80046b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046b4:	2300      	movs	r3, #0
 80046b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80046b8:	e02a      	b.n	8004710 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	2200      	movs	r2, #0
 80046c2:	2180      	movs	r1, #128	; 0x80
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	f000 f840 	bl	800474a <UART_WaitOnFlagUntilTimeout>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d001      	beq.n	80046d4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e036      	b.n	8004742 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10b      	bne.n	80046f2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	881b      	ldrh	r3, [r3, #0]
 80046de:	461a      	mov	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	3302      	adds	r3, #2
 80046ee:	61bb      	str	r3, [r7, #24]
 80046f0:	e007      	b.n	8004702 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	781a      	ldrb	r2, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	3301      	adds	r3, #1
 8004700:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004706:	b29b      	uxth	r3, r3
 8004708:	3b01      	subs	r3, #1
 800470a:	b29a      	uxth	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004714:	b29b      	uxth	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1cf      	bne.n	80046ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	2200      	movs	r2, #0
 8004722:	2140      	movs	r1, #64	; 0x40
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 f810 	bl	800474a <UART_WaitOnFlagUntilTimeout>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d001      	beq.n	8004734 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e006      	b.n	8004742 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2220      	movs	r2, #32
 8004738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800473c:	2300      	movs	r3, #0
 800473e:	e000      	b.n	8004742 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004740:	2302      	movs	r3, #2
  }
}
 8004742:	4618      	mov	r0, r3
 8004744:	3720      	adds	r7, #32
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b090      	sub	sp, #64	; 0x40
 800474e:	af00      	add	r7, sp, #0
 8004750:	60f8      	str	r0, [r7, #12]
 8004752:	60b9      	str	r1, [r7, #8]
 8004754:	603b      	str	r3, [r7, #0]
 8004756:	4613      	mov	r3, r2
 8004758:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800475a:	e050      	b.n	80047fe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800475c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800475e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004762:	d04c      	beq.n	80047fe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004764:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004766:	2b00      	cmp	r3, #0
 8004768:	d007      	beq.n	800477a <UART_WaitOnFlagUntilTimeout+0x30>
 800476a:	f7fd fdf5 	bl	8002358 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004776:	429a      	cmp	r2, r3
 8004778:	d241      	bcs.n	80047fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	330c      	adds	r3, #12
 8004780:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004784:	e853 3f00 	ldrex	r3, [r3]
 8004788:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004790:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	330c      	adds	r3, #12
 8004798:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800479a:	637a      	str	r2, [r7, #52]	; 0x34
 800479c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047a2:	e841 2300 	strex	r3, r2, [r1]
 80047a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80047a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1e5      	bne.n	800477a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	3314      	adds	r3, #20
 80047b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	e853 3f00 	ldrex	r3, [r3]
 80047bc:	613b      	str	r3, [r7, #16]
   return(result);
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	f023 0301 	bic.w	r3, r3, #1
 80047c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	3314      	adds	r3, #20
 80047cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047ce:	623a      	str	r2, [r7, #32]
 80047d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d2:	69f9      	ldr	r1, [r7, #28]
 80047d4:	6a3a      	ldr	r2, [r7, #32]
 80047d6:	e841 2300 	strex	r3, r2, [r1]
 80047da:	61bb      	str	r3, [r7, #24]
   return(result);
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1e5      	bne.n	80047ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2220      	movs	r2, #32
 80047e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2220      	movs	r2, #32
 80047ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e00f      	b.n	800481e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	4013      	ands	r3, r2
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	429a      	cmp	r2, r3
 800480c:	bf0c      	ite	eq
 800480e:	2301      	moveq	r3, #1
 8004810:	2300      	movne	r3, #0
 8004812:	b2db      	uxtb	r3, r3
 8004814:	461a      	mov	r2, r3
 8004816:	79fb      	ldrb	r3, [r7, #7]
 8004818:	429a      	cmp	r2, r3
 800481a:	d09f      	beq.n	800475c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3740      	adds	r7, #64	; 0x40
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
	...

08004828 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68da      	ldr	r2, [r3, #12]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	430a      	orrs	r2, r1
 8004844:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	689a      	ldr	r2, [r3, #8]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	431a      	orrs	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	4313      	orrs	r3, r2
 8004856:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004862:	f023 030c 	bic.w	r3, r3, #12
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	6812      	ldr	r2, [r2, #0]
 800486a:	68b9      	ldr	r1, [r7, #8]
 800486c:	430b      	orrs	r3, r1
 800486e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	699a      	ldr	r2, [r3, #24]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a2c      	ldr	r2, [pc, #176]	; (800493c <UART_SetConfig+0x114>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d103      	bne.n	8004898 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004890:	f7ff f902 	bl	8003a98 <HAL_RCC_GetPCLK2Freq>
 8004894:	60f8      	str	r0, [r7, #12]
 8004896:	e002      	b.n	800489e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004898:	f7ff f8ea 	bl	8003a70 <HAL_RCC_GetPCLK1Freq>
 800489c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	4613      	mov	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4413      	add	r3, r2
 80048a6:	009a      	lsls	r2, r3, #2
 80048a8:	441a      	add	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b4:	4a22      	ldr	r2, [pc, #136]	; (8004940 <UART_SetConfig+0x118>)
 80048b6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ba:	095b      	lsrs	r3, r3, #5
 80048bc:	0119      	lsls	r1, r3, #4
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	4613      	mov	r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	4413      	add	r3, r2
 80048c6:	009a      	lsls	r2, r3, #2
 80048c8:	441a      	add	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80048d4:	4b1a      	ldr	r3, [pc, #104]	; (8004940 <UART_SetConfig+0x118>)
 80048d6:	fba3 0302 	umull	r0, r3, r3, r2
 80048da:	095b      	lsrs	r3, r3, #5
 80048dc:	2064      	movs	r0, #100	; 0x64
 80048de:	fb00 f303 	mul.w	r3, r0, r3
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	011b      	lsls	r3, r3, #4
 80048e6:	3332      	adds	r3, #50	; 0x32
 80048e8:	4a15      	ldr	r2, [pc, #84]	; (8004940 <UART_SetConfig+0x118>)
 80048ea:	fba2 2303 	umull	r2, r3, r2, r3
 80048ee:	095b      	lsrs	r3, r3, #5
 80048f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048f4:	4419      	add	r1, r3
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	4613      	mov	r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	4413      	add	r3, r2
 80048fe:	009a      	lsls	r2, r3, #2
 8004900:	441a      	add	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	fbb2 f2f3 	udiv	r2, r2, r3
 800490c:	4b0c      	ldr	r3, [pc, #48]	; (8004940 <UART_SetConfig+0x118>)
 800490e:	fba3 0302 	umull	r0, r3, r3, r2
 8004912:	095b      	lsrs	r3, r3, #5
 8004914:	2064      	movs	r0, #100	; 0x64
 8004916:	fb00 f303 	mul.w	r3, r0, r3
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	011b      	lsls	r3, r3, #4
 800491e:	3332      	adds	r3, #50	; 0x32
 8004920:	4a07      	ldr	r2, [pc, #28]	; (8004940 <UART_SetConfig+0x118>)
 8004922:	fba2 2303 	umull	r2, r3, r2, r3
 8004926:	095b      	lsrs	r3, r3, #5
 8004928:	f003 020f 	and.w	r2, r3, #15
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	440a      	add	r2, r1
 8004932:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004934:	bf00      	nop
 8004936:	3710      	adds	r7, #16
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	40013800 	.word	0x40013800
 8004940:	51eb851f 	.word	0x51eb851f

08004944 <__errno>:
 8004944:	4b01      	ldr	r3, [pc, #4]	; (800494c <__errno+0x8>)
 8004946:	6818      	ldr	r0, [r3, #0]
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	20000018 	.word	0x20000018

08004950 <__libc_init_array>:
 8004950:	b570      	push	{r4, r5, r6, lr}
 8004952:	2600      	movs	r6, #0
 8004954:	4d0c      	ldr	r5, [pc, #48]	; (8004988 <__libc_init_array+0x38>)
 8004956:	4c0d      	ldr	r4, [pc, #52]	; (800498c <__libc_init_array+0x3c>)
 8004958:	1b64      	subs	r4, r4, r5
 800495a:	10a4      	asrs	r4, r4, #2
 800495c:	42a6      	cmp	r6, r4
 800495e:	d109      	bne.n	8004974 <__libc_init_array+0x24>
 8004960:	f002 fefa 	bl	8007758 <_init>
 8004964:	2600      	movs	r6, #0
 8004966:	4d0a      	ldr	r5, [pc, #40]	; (8004990 <__libc_init_array+0x40>)
 8004968:	4c0a      	ldr	r4, [pc, #40]	; (8004994 <__libc_init_array+0x44>)
 800496a:	1b64      	subs	r4, r4, r5
 800496c:	10a4      	asrs	r4, r4, #2
 800496e:	42a6      	cmp	r6, r4
 8004970:	d105      	bne.n	800497e <__libc_init_array+0x2e>
 8004972:	bd70      	pop	{r4, r5, r6, pc}
 8004974:	f855 3b04 	ldr.w	r3, [r5], #4
 8004978:	4798      	blx	r3
 800497a:	3601      	adds	r6, #1
 800497c:	e7ee      	b.n	800495c <__libc_init_array+0xc>
 800497e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004982:	4798      	blx	r3
 8004984:	3601      	adds	r6, #1
 8004986:	e7f2      	b.n	800496e <__libc_init_array+0x1e>
 8004988:	08007c14 	.word	0x08007c14
 800498c:	08007c14 	.word	0x08007c14
 8004990:	08007c14 	.word	0x08007c14
 8004994:	08007c18 	.word	0x08007c18

08004998 <memset>:
 8004998:	4603      	mov	r3, r0
 800499a:	4402      	add	r2, r0
 800499c:	4293      	cmp	r3, r2
 800499e:	d100      	bne.n	80049a2 <memset+0xa>
 80049a0:	4770      	bx	lr
 80049a2:	f803 1b01 	strb.w	r1, [r3], #1
 80049a6:	e7f9      	b.n	800499c <memset+0x4>

080049a8 <__cvt>:
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049ae:	461f      	mov	r7, r3
 80049b0:	bfbb      	ittet	lt
 80049b2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80049b6:	461f      	movlt	r7, r3
 80049b8:	2300      	movge	r3, #0
 80049ba:	232d      	movlt	r3, #45	; 0x2d
 80049bc:	b088      	sub	sp, #32
 80049be:	4614      	mov	r4, r2
 80049c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80049c2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80049c4:	7013      	strb	r3, [r2, #0]
 80049c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80049c8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80049cc:	f023 0820 	bic.w	r8, r3, #32
 80049d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80049d4:	d005      	beq.n	80049e2 <__cvt+0x3a>
 80049d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80049da:	d100      	bne.n	80049de <__cvt+0x36>
 80049dc:	3501      	adds	r5, #1
 80049de:	2302      	movs	r3, #2
 80049e0:	e000      	b.n	80049e4 <__cvt+0x3c>
 80049e2:	2303      	movs	r3, #3
 80049e4:	aa07      	add	r2, sp, #28
 80049e6:	9204      	str	r2, [sp, #16]
 80049e8:	aa06      	add	r2, sp, #24
 80049ea:	e9cd a202 	strd	sl, r2, [sp, #8]
 80049ee:	e9cd 3500 	strd	r3, r5, [sp]
 80049f2:	4622      	mov	r2, r4
 80049f4:	463b      	mov	r3, r7
 80049f6:	f000 fce3 	bl	80053c0 <_dtoa_r>
 80049fa:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80049fe:	4606      	mov	r6, r0
 8004a00:	d102      	bne.n	8004a08 <__cvt+0x60>
 8004a02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004a04:	07db      	lsls	r3, r3, #31
 8004a06:	d522      	bpl.n	8004a4e <__cvt+0xa6>
 8004a08:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004a0c:	eb06 0905 	add.w	r9, r6, r5
 8004a10:	d110      	bne.n	8004a34 <__cvt+0x8c>
 8004a12:	7833      	ldrb	r3, [r6, #0]
 8004a14:	2b30      	cmp	r3, #48	; 0x30
 8004a16:	d10a      	bne.n	8004a2e <__cvt+0x86>
 8004a18:	2200      	movs	r2, #0
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	4620      	mov	r0, r4
 8004a1e:	4639      	mov	r1, r7
 8004a20:	f7fb ffc2 	bl	80009a8 <__aeabi_dcmpeq>
 8004a24:	b918      	cbnz	r0, 8004a2e <__cvt+0x86>
 8004a26:	f1c5 0501 	rsb	r5, r5, #1
 8004a2a:	f8ca 5000 	str.w	r5, [sl]
 8004a2e:	f8da 3000 	ldr.w	r3, [sl]
 8004a32:	4499      	add	r9, r3
 8004a34:	2200      	movs	r2, #0
 8004a36:	2300      	movs	r3, #0
 8004a38:	4620      	mov	r0, r4
 8004a3a:	4639      	mov	r1, r7
 8004a3c:	f7fb ffb4 	bl	80009a8 <__aeabi_dcmpeq>
 8004a40:	b108      	cbz	r0, 8004a46 <__cvt+0x9e>
 8004a42:	f8cd 901c 	str.w	r9, [sp, #28]
 8004a46:	2230      	movs	r2, #48	; 0x30
 8004a48:	9b07      	ldr	r3, [sp, #28]
 8004a4a:	454b      	cmp	r3, r9
 8004a4c:	d307      	bcc.n	8004a5e <__cvt+0xb6>
 8004a4e:	4630      	mov	r0, r6
 8004a50:	9b07      	ldr	r3, [sp, #28]
 8004a52:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004a54:	1b9b      	subs	r3, r3, r6
 8004a56:	6013      	str	r3, [r2, #0]
 8004a58:	b008      	add	sp, #32
 8004a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a5e:	1c59      	adds	r1, r3, #1
 8004a60:	9107      	str	r1, [sp, #28]
 8004a62:	701a      	strb	r2, [r3, #0]
 8004a64:	e7f0      	b.n	8004a48 <__cvt+0xa0>

08004a66 <__exponent>:
 8004a66:	4603      	mov	r3, r0
 8004a68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a6a:	2900      	cmp	r1, #0
 8004a6c:	f803 2b02 	strb.w	r2, [r3], #2
 8004a70:	bfb6      	itet	lt
 8004a72:	222d      	movlt	r2, #45	; 0x2d
 8004a74:	222b      	movge	r2, #43	; 0x2b
 8004a76:	4249      	neglt	r1, r1
 8004a78:	2909      	cmp	r1, #9
 8004a7a:	7042      	strb	r2, [r0, #1]
 8004a7c:	dd2b      	ble.n	8004ad6 <__exponent+0x70>
 8004a7e:	f10d 0407 	add.w	r4, sp, #7
 8004a82:	46a4      	mov	ip, r4
 8004a84:	270a      	movs	r7, #10
 8004a86:	fb91 f6f7 	sdiv	r6, r1, r7
 8004a8a:	460a      	mov	r2, r1
 8004a8c:	46a6      	mov	lr, r4
 8004a8e:	fb07 1516 	mls	r5, r7, r6, r1
 8004a92:	2a63      	cmp	r2, #99	; 0x63
 8004a94:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004a98:	4631      	mov	r1, r6
 8004a9a:	f104 34ff 	add.w	r4, r4, #4294967295
 8004a9e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004aa2:	dcf0      	bgt.n	8004a86 <__exponent+0x20>
 8004aa4:	3130      	adds	r1, #48	; 0x30
 8004aa6:	f1ae 0502 	sub.w	r5, lr, #2
 8004aaa:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004aae:	4629      	mov	r1, r5
 8004ab0:	1c44      	adds	r4, r0, #1
 8004ab2:	4561      	cmp	r1, ip
 8004ab4:	d30a      	bcc.n	8004acc <__exponent+0x66>
 8004ab6:	f10d 0209 	add.w	r2, sp, #9
 8004aba:	eba2 020e 	sub.w	r2, r2, lr
 8004abe:	4565      	cmp	r5, ip
 8004ac0:	bf88      	it	hi
 8004ac2:	2200      	movhi	r2, #0
 8004ac4:	4413      	add	r3, r2
 8004ac6:	1a18      	subs	r0, r3, r0
 8004ac8:	b003      	add	sp, #12
 8004aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004acc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ad0:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004ad4:	e7ed      	b.n	8004ab2 <__exponent+0x4c>
 8004ad6:	2330      	movs	r3, #48	; 0x30
 8004ad8:	3130      	adds	r1, #48	; 0x30
 8004ada:	7083      	strb	r3, [r0, #2]
 8004adc:	70c1      	strb	r1, [r0, #3]
 8004ade:	1d03      	adds	r3, r0, #4
 8004ae0:	e7f1      	b.n	8004ac6 <__exponent+0x60>
	...

08004ae4 <_printf_float>:
 8004ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ae8:	b091      	sub	sp, #68	; 0x44
 8004aea:	460c      	mov	r4, r1
 8004aec:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004af0:	4616      	mov	r6, r2
 8004af2:	461f      	mov	r7, r3
 8004af4:	4605      	mov	r5, r0
 8004af6:	f001 fa51 	bl	8005f9c <_localeconv_r>
 8004afa:	6803      	ldr	r3, [r0, #0]
 8004afc:	4618      	mov	r0, r3
 8004afe:	9309      	str	r3, [sp, #36]	; 0x24
 8004b00:	f7fb fb26 	bl	8000150 <strlen>
 8004b04:	2300      	movs	r3, #0
 8004b06:	930e      	str	r3, [sp, #56]	; 0x38
 8004b08:	f8d8 3000 	ldr.w	r3, [r8]
 8004b0c:	900a      	str	r0, [sp, #40]	; 0x28
 8004b0e:	3307      	adds	r3, #7
 8004b10:	f023 0307 	bic.w	r3, r3, #7
 8004b14:	f103 0208 	add.w	r2, r3, #8
 8004b18:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004b1c:	f8d4 b000 	ldr.w	fp, [r4]
 8004b20:	f8c8 2000 	str.w	r2, [r8]
 8004b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b28:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004b2c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004b30:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004b34:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b36:	f04f 32ff 	mov.w	r2, #4294967295
 8004b3a:	4640      	mov	r0, r8
 8004b3c:	4b9c      	ldr	r3, [pc, #624]	; (8004db0 <_printf_float+0x2cc>)
 8004b3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b40:	f7fb ff64 	bl	8000a0c <__aeabi_dcmpun>
 8004b44:	bb70      	cbnz	r0, 8004ba4 <_printf_float+0xc0>
 8004b46:	f04f 32ff 	mov.w	r2, #4294967295
 8004b4a:	4640      	mov	r0, r8
 8004b4c:	4b98      	ldr	r3, [pc, #608]	; (8004db0 <_printf_float+0x2cc>)
 8004b4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b50:	f7fb ff3e 	bl	80009d0 <__aeabi_dcmple>
 8004b54:	bb30      	cbnz	r0, 8004ba4 <_printf_float+0xc0>
 8004b56:	2200      	movs	r2, #0
 8004b58:	2300      	movs	r3, #0
 8004b5a:	4640      	mov	r0, r8
 8004b5c:	4651      	mov	r1, sl
 8004b5e:	f7fb ff2d 	bl	80009bc <__aeabi_dcmplt>
 8004b62:	b110      	cbz	r0, 8004b6a <_printf_float+0x86>
 8004b64:	232d      	movs	r3, #45	; 0x2d
 8004b66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b6a:	4b92      	ldr	r3, [pc, #584]	; (8004db4 <_printf_float+0x2d0>)
 8004b6c:	4892      	ldr	r0, [pc, #584]	; (8004db8 <_printf_float+0x2d4>)
 8004b6e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004b72:	bf94      	ite	ls
 8004b74:	4698      	movls	r8, r3
 8004b76:	4680      	movhi	r8, r0
 8004b78:	2303      	movs	r3, #3
 8004b7a:	f04f 0a00 	mov.w	sl, #0
 8004b7e:	6123      	str	r3, [r4, #16]
 8004b80:	f02b 0304 	bic.w	r3, fp, #4
 8004b84:	6023      	str	r3, [r4, #0]
 8004b86:	4633      	mov	r3, r6
 8004b88:	4621      	mov	r1, r4
 8004b8a:	4628      	mov	r0, r5
 8004b8c:	9700      	str	r7, [sp, #0]
 8004b8e:	aa0f      	add	r2, sp, #60	; 0x3c
 8004b90:	f000 f9d4 	bl	8004f3c <_printf_common>
 8004b94:	3001      	adds	r0, #1
 8004b96:	f040 8090 	bne.w	8004cba <_printf_float+0x1d6>
 8004b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b9e:	b011      	add	sp, #68	; 0x44
 8004ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ba4:	4642      	mov	r2, r8
 8004ba6:	4653      	mov	r3, sl
 8004ba8:	4640      	mov	r0, r8
 8004baa:	4651      	mov	r1, sl
 8004bac:	f7fb ff2e 	bl	8000a0c <__aeabi_dcmpun>
 8004bb0:	b148      	cbz	r0, 8004bc6 <_printf_float+0xe2>
 8004bb2:	f1ba 0f00 	cmp.w	sl, #0
 8004bb6:	bfb8      	it	lt
 8004bb8:	232d      	movlt	r3, #45	; 0x2d
 8004bba:	4880      	ldr	r0, [pc, #512]	; (8004dbc <_printf_float+0x2d8>)
 8004bbc:	bfb8      	it	lt
 8004bbe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004bc2:	4b7f      	ldr	r3, [pc, #508]	; (8004dc0 <_printf_float+0x2dc>)
 8004bc4:	e7d3      	b.n	8004b6e <_printf_float+0x8a>
 8004bc6:	6863      	ldr	r3, [r4, #4]
 8004bc8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004bcc:	1c5a      	adds	r2, r3, #1
 8004bce:	d142      	bne.n	8004c56 <_printf_float+0x172>
 8004bd0:	2306      	movs	r3, #6
 8004bd2:	6063      	str	r3, [r4, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	9206      	str	r2, [sp, #24]
 8004bd8:	aa0e      	add	r2, sp, #56	; 0x38
 8004bda:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004bde:	aa0d      	add	r2, sp, #52	; 0x34
 8004be0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004be4:	9203      	str	r2, [sp, #12]
 8004be6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004bea:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004bee:	6023      	str	r3, [r4, #0]
 8004bf0:	6863      	ldr	r3, [r4, #4]
 8004bf2:	4642      	mov	r2, r8
 8004bf4:	9300      	str	r3, [sp, #0]
 8004bf6:	4628      	mov	r0, r5
 8004bf8:	4653      	mov	r3, sl
 8004bfa:	910b      	str	r1, [sp, #44]	; 0x2c
 8004bfc:	f7ff fed4 	bl	80049a8 <__cvt>
 8004c00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c02:	4680      	mov	r8, r0
 8004c04:	2947      	cmp	r1, #71	; 0x47
 8004c06:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004c08:	d108      	bne.n	8004c1c <_printf_float+0x138>
 8004c0a:	1cc8      	adds	r0, r1, #3
 8004c0c:	db02      	blt.n	8004c14 <_printf_float+0x130>
 8004c0e:	6863      	ldr	r3, [r4, #4]
 8004c10:	4299      	cmp	r1, r3
 8004c12:	dd40      	ble.n	8004c96 <_printf_float+0x1b2>
 8004c14:	f1a9 0902 	sub.w	r9, r9, #2
 8004c18:	fa5f f989 	uxtb.w	r9, r9
 8004c1c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004c20:	d81f      	bhi.n	8004c62 <_printf_float+0x17e>
 8004c22:	464a      	mov	r2, r9
 8004c24:	3901      	subs	r1, #1
 8004c26:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004c2a:	910d      	str	r1, [sp, #52]	; 0x34
 8004c2c:	f7ff ff1b 	bl	8004a66 <__exponent>
 8004c30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c32:	4682      	mov	sl, r0
 8004c34:	1813      	adds	r3, r2, r0
 8004c36:	2a01      	cmp	r2, #1
 8004c38:	6123      	str	r3, [r4, #16]
 8004c3a:	dc02      	bgt.n	8004c42 <_printf_float+0x15e>
 8004c3c:	6822      	ldr	r2, [r4, #0]
 8004c3e:	07d2      	lsls	r2, r2, #31
 8004c40:	d501      	bpl.n	8004c46 <_printf_float+0x162>
 8004c42:	3301      	adds	r3, #1
 8004c44:	6123      	str	r3, [r4, #16]
 8004c46:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d09b      	beq.n	8004b86 <_printf_float+0xa2>
 8004c4e:	232d      	movs	r3, #45	; 0x2d
 8004c50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c54:	e797      	b.n	8004b86 <_printf_float+0xa2>
 8004c56:	2947      	cmp	r1, #71	; 0x47
 8004c58:	d1bc      	bne.n	8004bd4 <_printf_float+0xf0>
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1ba      	bne.n	8004bd4 <_printf_float+0xf0>
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e7b7      	b.n	8004bd2 <_printf_float+0xee>
 8004c62:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004c66:	d118      	bne.n	8004c9a <_printf_float+0x1b6>
 8004c68:	2900      	cmp	r1, #0
 8004c6a:	6863      	ldr	r3, [r4, #4]
 8004c6c:	dd0b      	ble.n	8004c86 <_printf_float+0x1a2>
 8004c6e:	6121      	str	r1, [r4, #16]
 8004c70:	b913      	cbnz	r3, 8004c78 <_printf_float+0x194>
 8004c72:	6822      	ldr	r2, [r4, #0]
 8004c74:	07d0      	lsls	r0, r2, #31
 8004c76:	d502      	bpl.n	8004c7e <_printf_float+0x19a>
 8004c78:	3301      	adds	r3, #1
 8004c7a:	440b      	add	r3, r1
 8004c7c:	6123      	str	r3, [r4, #16]
 8004c7e:	f04f 0a00 	mov.w	sl, #0
 8004c82:	65a1      	str	r1, [r4, #88]	; 0x58
 8004c84:	e7df      	b.n	8004c46 <_printf_float+0x162>
 8004c86:	b913      	cbnz	r3, 8004c8e <_printf_float+0x1aa>
 8004c88:	6822      	ldr	r2, [r4, #0]
 8004c8a:	07d2      	lsls	r2, r2, #31
 8004c8c:	d501      	bpl.n	8004c92 <_printf_float+0x1ae>
 8004c8e:	3302      	adds	r3, #2
 8004c90:	e7f4      	b.n	8004c7c <_printf_float+0x198>
 8004c92:	2301      	movs	r3, #1
 8004c94:	e7f2      	b.n	8004c7c <_printf_float+0x198>
 8004c96:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004c9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c9c:	4299      	cmp	r1, r3
 8004c9e:	db05      	blt.n	8004cac <_printf_float+0x1c8>
 8004ca0:	6823      	ldr	r3, [r4, #0]
 8004ca2:	6121      	str	r1, [r4, #16]
 8004ca4:	07d8      	lsls	r0, r3, #31
 8004ca6:	d5ea      	bpl.n	8004c7e <_printf_float+0x19a>
 8004ca8:	1c4b      	adds	r3, r1, #1
 8004caa:	e7e7      	b.n	8004c7c <_printf_float+0x198>
 8004cac:	2900      	cmp	r1, #0
 8004cae:	bfcc      	ite	gt
 8004cb0:	2201      	movgt	r2, #1
 8004cb2:	f1c1 0202 	rsble	r2, r1, #2
 8004cb6:	4413      	add	r3, r2
 8004cb8:	e7e0      	b.n	8004c7c <_printf_float+0x198>
 8004cba:	6823      	ldr	r3, [r4, #0]
 8004cbc:	055a      	lsls	r2, r3, #21
 8004cbe:	d407      	bmi.n	8004cd0 <_printf_float+0x1ec>
 8004cc0:	6923      	ldr	r3, [r4, #16]
 8004cc2:	4642      	mov	r2, r8
 8004cc4:	4631      	mov	r1, r6
 8004cc6:	4628      	mov	r0, r5
 8004cc8:	47b8      	blx	r7
 8004cca:	3001      	adds	r0, #1
 8004ccc:	d12b      	bne.n	8004d26 <_printf_float+0x242>
 8004cce:	e764      	b.n	8004b9a <_printf_float+0xb6>
 8004cd0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004cd4:	f240 80dd 	bls.w	8004e92 <_printf_float+0x3ae>
 8004cd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004cdc:	2200      	movs	r2, #0
 8004cde:	2300      	movs	r3, #0
 8004ce0:	f7fb fe62 	bl	80009a8 <__aeabi_dcmpeq>
 8004ce4:	2800      	cmp	r0, #0
 8004ce6:	d033      	beq.n	8004d50 <_printf_float+0x26c>
 8004ce8:	2301      	movs	r3, #1
 8004cea:	4631      	mov	r1, r6
 8004cec:	4628      	mov	r0, r5
 8004cee:	4a35      	ldr	r2, [pc, #212]	; (8004dc4 <_printf_float+0x2e0>)
 8004cf0:	47b8      	blx	r7
 8004cf2:	3001      	adds	r0, #1
 8004cf4:	f43f af51 	beq.w	8004b9a <_printf_float+0xb6>
 8004cf8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	db02      	blt.n	8004d06 <_printf_float+0x222>
 8004d00:	6823      	ldr	r3, [r4, #0]
 8004d02:	07d8      	lsls	r0, r3, #31
 8004d04:	d50f      	bpl.n	8004d26 <_printf_float+0x242>
 8004d06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d0a:	4631      	mov	r1, r6
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	47b8      	blx	r7
 8004d10:	3001      	adds	r0, #1
 8004d12:	f43f af42 	beq.w	8004b9a <_printf_float+0xb6>
 8004d16:	f04f 0800 	mov.w	r8, #0
 8004d1a:	f104 091a 	add.w	r9, r4, #26
 8004d1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d20:	3b01      	subs	r3, #1
 8004d22:	4543      	cmp	r3, r8
 8004d24:	dc09      	bgt.n	8004d3a <_printf_float+0x256>
 8004d26:	6823      	ldr	r3, [r4, #0]
 8004d28:	079b      	lsls	r3, r3, #30
 8004d2a:	f100 8102 	bmi.w	8004f32 <_printf_float+0x44e>
 8004d2e:	68e0      	ldr	r0, [r4, #12]
 8004d30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d32:	4298      	cmp	r0, r3
 8004d34:	bfb8      	it	lt
 8004d36:	4618      	movlt	r0, r3
 8004d38:	e731      	b.n	8004b9e <_printf_float+0xba>
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	464a      	mov	r2, r9
 8004d3e:	4631      	mov	r1, r6
 8004d40:	4628      	mov	r0, r5
 8004d42:	47b8      	blx	r7
 8004d44:	3001      	adds	r0, #1
 8004d46:	f43f af28 	beq.w	8004b9a <_printf_float+0xb6>
 8004d4a:	f108 0801 	add.w	r8, r8, #1
 8004d4e:	e7e6      	b.n	8004d1e <_printf_float+0x23a>
 8004d50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	dc38      	bgt.n	8004dc8 <_printf_float+0x2e4>
 8004d56:	2301      	movs	r3, #1
 8004d58:	4631      	mov	r1, r6
 8004d5a:	4628      	mov	r0, r5
 8004d5c:	4a19      	ldr	r2, [pc, #100]	; (8004dc4 <_printf_float+0x2e0>)
 8004d5e:	47b8      	blx	r7
 8004d60:	3001      	adds	r0, #1
 8004d62:	f43f af1a 	beq.w	8004b9a <_printf_float+0xb6>
 8004d66:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	d102      	bne.n	8004d74 <_printf_float+0x290>
 8004d6e:	6823      	ldr	r3, [r4, #0]
 8004d70:	07d9      	lsls	r1, r3, #31
 8004d72:	d5d8      	bpl.n	8004d26 <_printf_float+0x242>
 8004d74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d78:	4631      	mov	r1, r6
 8004d7a:	4628      	mov	r0, r5
 8004d7c:	47b8      	blx	r7
 8004d7e:	3001      	adds	r0, #1
 8004d80:	f43f af0b 	beq.w	8004b9a <_printf_float+0xb6>
 8004d84:	f04f 0900 	mov.w	r9, #0
 8004d88:	f104 0a1a 	add.w	sl, r4, #26
 8004d8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d8e:	425b      	negs	r3, r3
 8004d90:	454b      	cmp	r3, r9
 8004d92:	dc01      	bgt.n	8004d98 <_printf_float+0x2b4>
 8004d94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d96:	e794      	b.n	8004cc2 <_printf_float+0x1de>
 8004d98:	2301      	movs	r3, #1
 8004d9a:	4652      	mov	r2, sl
 8004d9c:	4631      	mov	r1, r6
 8004d9e:	4628      	mov	r0, r5
 8004da0:	47b8      	blx	r7
 8004da2:	3001      	adds	r0, #1
 8004da4:	f43f aef9 	beq.w	8004b9a <_printf_float+0xb6>
 8004da8:	f109 0901 	add.w	r9, r9, #1
 8004dac:	e7ee      	b.n	8004d8c <_printf_float+0x2a8>
 8004dae:	bf00      	nop
 8004db0:	7fefffff 	.word	0x7fefffff
 8004db4:	08007840 	.word	0x08007840
 8004db8:	08007844 	.word	0x08007844
 8004dbc:	0800784c 	.word	0x0800784c
 8004dc0:	08007848 	.word	0x08007848
 8004dc4:	08007850 	.word	0x08007850
 8004dc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004dca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	bfa8      	it	ge
 8004dd0:	461a      	movge	r2, r3
 8004dd2:	2a00      	cmp	r2, #0
 8004dd4:	4691      	mov	r9, r2
 8004dd6:	dc37      	bgt.n	8004e48 <_printf_float+0x364>
 8004dd8:	f04f 0b00 	mov.w	fp, #0
 8004ddc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004de0:	f104 021a 	add.w	r2, r4, #26
 8004de4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004de8:	ebaa 0309 	sub.w	r3, sl, r9
 8004dec:	455b      	cmp	r3, fp
 8004dee:	dc33      	bgt.n	8004e58 <_printf_float+0x374>
 8004df0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004df4:	429a      	cmp	r2, r3
 8004df6:	db3b      	blt.n	8004e70 <_printf_float+0x38c>
 8004df8:	6823      	ldr	r3, [r4, #0]
 8004dfa:	07da      	lsls	r2, r3, #31
 8004dfc:	d438      	bmi.n	8004e70 <_printf_float+0x38c>
 8004dfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e00:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004e02:	eba3 020a 	sub.w	r2, r3, sl
 8004e06:	eba3 0901 	sub.w	r9, r3, r1
 8004e0a:	4591      	cmp	r9, r2
 8004e0c:	bfa8      	it	ge
 8004e0e:	4691      	movge	r9, r2
 8004e10:	f1b9 0f00 	cmp.w	r9, #0
 8004e14:	dc34      	bgt.n	8004e80 <_printf_float+0x39c>
 8004e16:	f04f 0800 	mov.w	r8, #0
 8004e1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e1e:	f104 0a1a 	add.w	sl, r4, #26
 8004e22:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004e26:	1a9b      	subs	r3, r3, r2
 8004e28:	eba3 0309 	sub.w	r3, r3, r9
 8004e2c:	4543      	cmp	r3, r8
 8004e2e:	f77f af7a 	ble.w	8004d26 <_printf_float+0x242>
 8004e32:	2301      	movs	r3, #1
 8004e34:	4652      	mov	r2, sl
 8004e36:	4631      	mov	r1, r6
 8004e38:	4628      	mov	r0, r5
 8004e3a:	47b8      	blx	r7
 8004e3c:	3001      	adds	r0, #1
 8004e3e:	f43f aeac 	beq.w	8004b9a <_printf_float+0xb6>
 8004e42:	f108 0801 	add.w	r8, r8, #1
 8004e46:	e7ec      	b.n	8004e22 <_printf_float+0x33e>
 8004e48:	4613      	mov	r3, r2
 8004e4a:	4631      	mov	r1, r6
 8004e4c:	4642      	mov	r2, r8
 8004e4e:	4628      	mov	r0, r5
 8004e50:	47b8      	blx	r7
 8004e52:	3001      	adds	r0, #1
 8004e54:	d1c0      	bne.n	8004dd8 <_printf_float+0x2f4>
 8004e56:	e6a0      	b.n	8004b9a <_printf_float+0xb6>
 8004e58:	2301      	movs	r3, #1
 8004e5a:	4631      	mov	r1, r6
 8004e5c:	4628      	mov	r0, r5
 8004e5e:	920b      	str	r2, [sp, #44]	; 0x2c
 8004e60:	47b8      	blx	r7
 8004e62:	3001      	adds	r0, #1
 8004e64:	f43f ae99 	beq.w	8004b9a <_printf_float+0xb6>
 8004e68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e6a:	f10b 0b01 	add.w	fp, fp, #1
 8004e6e:	e7b9      	b.n	8004de4 <_printf_float+0x300>
 8004e70:	4631      	mov	r1, r6
 8004e72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e76:	4628      	mov	r0, r5
 8004e78:	47b8      	blx	r7
 8004e7a:	3001      	adds	r0, #1
 8004e7c:	d1bf      	bne.n	8004dfe <_printf_float+0x31a>
 8004e7e:	e68c      	b.n	8004b9a <_printf_float+0xb6>
 8004e80:	464b      	mov	r3, r9
 8004e82:	4631      	mov	r1, r6
 8004e84:	4628      	mov	r0, r5
 8004e86:	eb08 020a 	add.w	r2, r8, sl
 8004e8a:	47b8      	blx	r7
 8004e8c:	3001      	adds	r0, #1
 8004e8e:	d1c2      	bne.n	8004e16 <_printf_float+0x332>
 8004e90:	e683      	b.n	8004b9a <_printf_float+0xb6>
 8004e92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e94:	2a01      	cmp	r2, #1
 8004e96:	dc01      	bgt.n	8004e9c <_printf_float+0x3b8>
 8004e98:	07db      	lsls	r3, r3, #31
 8004e9a:	d537      	bpl.n	8004f0c <_printf_float+0x428>
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	4642      	mov	r2, r8
 8004ea0:	4631      	mov	r1, r6
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	47b8      	blx	r7
 8004ea6:	3001      	adds	r0, #1
 8004ea8:	f43f ae77 	beq.w	8004b9a <_printf_float+0xb6>
 8004eac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004eb0:	4631      	mov	r1, r6
 8004eb2:	4628      	mov	r0, r5
 8004eb4:	47b8      	blx	r7
 8004eb6:	3001      	adds	r0, #1
 8004eb8:	f43f ae6f 	beq.w	8004b9a <_printf_float+0xb6>
 8004ebc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	f7fb fd70 	bl	80009a8 <__aeabi_dcmpeq>
 8004ec8:	b9d8      	cbnz	r0, 8004f02 <_printf_float+0x41e>
 8004eca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ecc:	f108 0201 	add.w	r2, r8, #1
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	4631      	mov	r1, r6
 8004ed4:	4628      	mov	r0, r5
 8004ed6:	47b8      	blx	r7
 8004ed8:	3001      	adds	r0, #1
 8004eda:	d10e      	bne.n	8004efa <_printf_float+0x416>
 8004edc:	e65d      	b.n	8004b9a <_printf_float+0xb6>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	464a      	mov	r2, r9
 8004ee2:	4631      	mov	r1, r6
 8004ee4:	4628      	mov	r0, r5
 8004ee6:	47b8      	blx	r7
 8004ee8:	3001      	adds	r0, #1
 8004eea:	f43f ae56 	beq.w	8004b9a <_printf_float+0xb6>
 8004eee:	f108 0801 	add.w	r8, r8, #1
 8004ef2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	4543      	cmp	r3, r8
 8004ef8:	dcf1      	bgt.n	8004ede <_printf_float+0x3fa>
 8004efa:	4653      	mov	r3, sl
 8004efc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004f00:	e6e0      	b.n	8004cc4 <_printf_float+0x1e0>
 8004f02:	f04f 0800 	mov.w	r8, #0
 8004f06:	f104 091a 	add.w	r9, r4, #26
 8004f0a:	e7f2      	b.n	8004ef2 <_printf_float+0x40e>
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	4642      	mov	r2, r8
 8004f10:	e7df      	b.n	8004ed2 <_printf_float+0x3ee>
 8004f12:	2301      	movs	r3, #1
 8004f14:	464a      	mov	r2, r9
 8004f16:	4631      	mov	r1, r6
 8004f18:	4628      	mov	r0, r5
 8004f1a:	47b8      	blx	r7
 8004f1c:	3001      	adds	r0, #1
 8004f1e:	f43f ae3c 	beq.w	8004b9a <_printf_float+0xb6>
 8004f22:	f108 0801 	add.w	r8, r8, #1
 8004f26:	68e3      	ldr	r3, [r4, #12]
 8004f28:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004f2a:	1a5b      	subs	r3, r3, r1
 8004f2c:	4543      	cmp	r3, r8
 8004f2e:	dcf0      	bgt.n	8004f12 <_printf_float+0x42e>
 8004f30:	e6fd      	b.n	8004d2e <_printf_float+0x24a>
 8004f32:	f04f 0800 	mov.w	r8, #0
 8004f36:	f104 0919 	add.w	r9, r4, #25
 8004f3a:	e7f4      	b.n	8004f26 <_printf_float+0x442>

08004f3c <_printf_common>:
 8004f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f40:	4616      	mov	r6, r2
 8004f42:	4699      	mov	r9, r3
 8004f44:	688a      	ldr	r2, [r1, #8]
 8004f46:	690b      	ldr	r3, [r1, #16]
 8004f48:	4607      	mov	r7, r0
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	bfb8      	it	lt
 8004f4e:	4613      	movlt	r3, r2
 8004f50:	6033      	str	r3, [r6, #0]
 8004f52:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f56:	460c      	mov	r4, r1
 8004f58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f5c:	b10a      	cbz	r2, 8004f62 <_printf_common+0x26>
 8004f5e:	3301      	adds	r3, #1
 8004f60:	6033      	str	r3, [r6, #0]
 8004f62:	6823      	ldr	r3, [r4, #0]
 8004f64:	0699      	lsls	r1, r3, #26
 8004f66:	bf42      	ittt	mi
 8004f68:	6833      	ldrmi	r3, [r6, #0]
 8004f6a:	3302      	addmi	r3, #2
 8004f6c:	6033      	strmi	r3, [r6, #0]
 8004f6e:	6825      	ldr	r5, [r4, #0]
 8004f70:	f015 0506 	ands.w	r5, r5, #6
 8004f74:	d106      	bne.n	8004f84 <_printf_common+0x48>
 8004f76:	f104 0a19 	add.w	sl, r4, #25
 8004f7a:	68e3      	ldr	r3, [r4, #12]
 8004f7c:	6832      	ldr	r2, [r6, #0]
 8004f7e:	1a9b      	subs	r3, r3, r2
 8004f80:	42ab      	cmp	r3, r5
 8004f82:	dc28      	bgt.n	8004fd6 <_printf_common+0x9a>
 8004f84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f88:	1e13      	subs	r3, r2, #0
 8004f8a:	6822      	ldr	r2, [r4, #0]
 8004f8c:	bf18      	it	ne
 8004f8e:	2301      	movne	r3, #1
 8004f90:	0692      	lsls	r2, r2, #26
 8004f92:	d42d      	bmi.n	8004ff0 <_printf_common+0xb4>
 8004f94:	4649      	mov	r1, r9
 8004f96:	4638      	mov	r0, r7
 8004f98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f9c:	47c0      	blx	r8
 8004f9e:	3001      	adds	r0, #1
 8004fa0:	d020      	beq.n	8004fe4 <_printf_common+0xa8>
 8004fa2:	6823      	ldr	r3, [r4, #0]
 8004fa4:	68e5      	ldr	r5, [r4, #12]
 8004fa6:	f003 0306 	and.w	r3, r3, #6
 8004faa:	2b04      	cmp	r3, #4
 8004fac:	bf18      	it	ne
 8004fae:	2500      	movne	r5, #0
 8004fb0:	6832      	ldr	r2, [r6, #0]
 8004fb2:	f04f 0600 	mov.w	r6, #0
 8004fb6:	68a3      	ldr	r3, [r4, #8]
 8004fb8:	bf08      	it	eq
 8004fba:	1aad      	subeq	r5, r5, r2
 8004fbc:	6922      	ldr	r2, [r4, #16]
 8004fbe:	bf08      	it	eq
 8004fc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	bfc4      	itt	gt
 8004fc8:	1a9b      	subgt	r3, r3, r2
 8004fca:	18ed      	addgt	r5, r5, r3
 8004fcc:	341a      	adds	r4, #26
 8004fce:	42b5      	cmp	r5, r6
 8004fd0:	d11a      	bne.n	8005008 <_printf_common+0xcc>
 8004fd2:	2000      	movs	r0, #0
 8004fd4:	e008      	b.n	8004fe8 <_printf_common+0xac>
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	4652      	mov	r2, sl
 8004fda:	4649      	mov	r1, r9
 8004fdc:	4638      	mov	r0, r7
 8004fde:	47c0      	blx	r8
 8004fe0:	3001      	adds	r0, #1
 8004fe2:	d103      	bne.n	8004fec <_printf_common+0xb0>
 8004fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fec:	3501      	adds	r5, #1
 8004fee:	e7c4      	b.n	8004f7a <_printf_common+0x3e>
 8004ff0:	2030      	movs	r0, #48	; 0x30
 8004ff2:	18e1      	adds	r1, r4, r3
 8004ff4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ff8:	1c5a      	adds	r2, r3, #1
 8004ffa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ffe:	4422      	add	r2, r4
 8005000:	3302      	adds	r3, #2
 8005002:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005006:	e7c5      	b.n	8004f94 <_printf_common+0x58>
 8005008:	2301      	movs	r3, #1
 800500a:	4622      	mov	r2, r4
 800500c:	4649      	mov	r1, r9
 800500e:	4638      	mov	r0, r7
 8005010:	47c0      	blx	r8
 8005012:	3001      	adds	r0, #1
 8005014:	d0e6      	beq.n	8004fe4 <_printf_common+0xa8>
 8005016:	3601      	adds	r6, #1
 8005018:	e7d9      	b.n	8004fce <_printf_common+0x92>
	...

0800501c <_printf_i>:
 800501c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005020:	7e0f      	ldrb	r7, [r1, #24]
 8005022:	4691      	mov	r9, r2
 8005024:	2f78      	cmp	r7, #120	; 0x78
 8005026:	4680      	mov	r8, r0
 8005028:	460c      	mov	r4, r1
 800502a:	469a      	mov	sl, r3
 800502c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800502e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005032:	d807      	bhi.n	8005044 <_printf_i+0x28>
 8005034:	2f62      	cmp	r7, #98	; 0x62
 8005036:	d80a      	bhi.n	800504e <_printf_i+0x32>
 8005038:	2f00      	cmp	r7, #0
 800503a:	f000 80d9 	beq.w	80051f0 <_printf_i+0x1d4>
 800503e:	2f58      	cmp	r7, #88	; 0x58
 8005040:	f000 80a4 	beq.w	800518c <_printf_i+0x170>
 8005044:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005048:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800504c:	e03a      	b.n	80050c4 <_printf_i+0xa8>
 800504e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005052:	2b15      	cmp	r3, #21
 8005054:	d8f6      	bhi.n	8005044 <_printf_i+0x28>
 8005056:	a101      	add	r1, pc, #4	; (adr r1, 800505c <_printf_i+0x40>)
 8005058:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800505c:	080050b5 	.word	0x080050b5
 8005060:	080050c9 	.word	0x080050c9
 8005064:	08005045 	.word	0x08005045
 8005068:	08005045 	.word	0x08005045
 800506c:	08005045 	.word	0x08005045
 8005070:	08005045 	.word	0x08005045
 8005074:	080050c9 	.word	0x080050c9
 8005078:	08005045 	.word	0x08005045
 800507c:	08005045 	.word	0x08005045
 8005080:	08005045 	.word	0x08005045
 8005084:	08005045 	.word	0x08005045
 8005088:	080051d7 	.word	0x080051d7
 800508c:	080050f9 	.word	0x080050f9
 8005090:	080051b9 	.word	0x080051b9
 8005094:	08005045 	.word	0x08005045
 8005098:	08005045 	.word	0x08005045
 800509c:	080051f9 	.word	0x080051f9
 80050a0:	08005045 	.word	0x08005045
 80050a4:	080050f9 	.word	0x080050f9
 80050a8:	08005045 	.word	0x08005045
 80050ac:	08005045 	.word	0x08005045
 80050b0:	080051c1 	.word	0x080051c1
 80050b4:	682b      	ldr	r3, [r5, #0]
 80050b6:	1d1a      	adds	r2, r3, #4
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	602a      	str	r2, [r5, #0]
 80050bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050c4:	2301      	movs	r3, #1
 80050c6:	e0a4      	b.n	8005212 <_printf_i+0x1f6>
 80050c8:	6820      	ldr	r0, [r4, #0]
 80050ca:	6829      	ldr	r1, [r5, #0]
 80050cc:	0606      	lsls	r6, r0, #24
 80050ce:	f101 0304 	add.w	r3, r1, #4
 80050d2:	d50a      	bpl.n	80050ea <_printf_i+0xce>
 80050d4:	680e      	ldr	r6, [r1, #0]
 80050d6:	602b      	str	r3, [r5, #0]
 80050d8:	2e00      	cmp	r6, #0
 80050da:	da03      	bge.n	80050e4 <_printf_i+0xc8>
 80050dc:	232d      	movs	r3, #45	; 0x2d
 80050de:	4276      	negs	r6, r6
 80050e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050e4:	230a      	movs	r3, #10
 80050e6:	485e      	ldr	r0, [pc, #376]	; (8005260 <_printf_i+0x244>)
 80050e8:	e019      	b.n	800511e <_printf_i+0x102>
 80050ea:	680e      	ldr	r6, [r1, #0]
 80050ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 80050f0:	602b      	str	r3, [r5, #0]
 80050f2:	bf18      	it	ne
 80050f4:	b236      	sxthne	r6, r6
 80050f6:	e7ef      	b.n	80050d8 <_printf_i+0xbc>
 80050f8:	682b      	ldr	r3, [r5, #0]
 80050fa:	6820      	ldr	r0, [r4, #0]
 80050fc:	1d19      	adds	r1, r3, #4
 80050fe:	6029      	str	r1, [r5, #0]
 8005100:	0601      	lsls	r1, r0, #24
 8005102:	d501      	bpl.n	8005108 <_printf_i+0xec>
 8005104:	681e      	ldr	r6, [r3, #0]
 8005106:	e002      	b.n	800510e <_printf_i+0xf2>
 8005108:	0646      	lsls	r6, r0, #25
 800510a:	d5fb      	bpl.n	8005104 <_printf_i+0xe8>
 800510c:	881e      	ldrh	r6, [r3, #0]
 800510e:	2f6f      	cmp	r7, #111	; 0x6f
 8005110:	bf0c      	ite	eq
 8005112:	2308      	moveq	r3, #8
 8005114:	230a      	movne	r3, #10
 8005116:	4852      	ldr	r0, [pc, #328]	; (8005260 <_printf_i+0x244>)
 8005118:	2100      	movs	r1, #0
 800511a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800511e:	6865      	ldr	r5, [r4, #4]
 8005120:	2d00      	cmp	r5, #0
 8005122:	bfa8      	it	ge
 8005124:	6821      	ldrge	r1, [r4, #0]
 8005126:	60a5      	str	r5, [r4, #8]
 8005128:	bfa4      	itt	ge
 800512a:	f021 0104 	bicge.w	r1, r1, #4
 800512e:	6021      	strge	r1, [r4, #0]
 8005130:	b90e      	cbnz	r6, 8005136 <_printf_i+0x11a>
 8005132:	2d00      	cmp	r5, #0
 8005134:	d04d      	beq.n	80051d2 <_printf_i+0x1b6>
 8005136:	4615      	mov	r5, r2
 8005138:	fbb6 f1f3 	udiv	r1, r6, r3
 800513c:	fb03 6711 	mls	r7, r3, r1, r6
 8005140:	5dc7      	ldrb	r7, [r0, r7]
 8005142:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005146:	4637      	mov	r7, r6
 8005148:	42bb      	cmp	r3, r7
 800514a:	460e      	mov	r6, r1
 800514c:	d9f4      	bls.n	8005138 <_printf_i+0x11c>
 800514e:	2b08      	cmp	r3, #8
 8005150:	d10b      	bne.n	800516a <_printf_i+0x14e>
 8005152:	6823      	ldr	r3, [r4, #0]
 8005154:	07de      	lsls	r6, r3, #31
 8005156:	d508      	bpl.n	800516a <_printf_i+0x14e>
 8005158:	6923      	ldr	r3, [r4, #16]
 800515a:	6861      	ldr	r1, [r4, #4]
 800515c:	4299      	cmp	r1, r3
 800515e:	bfde      	ittt	le
 8005160:	2330      	movle	r3, #48	; 0x30
 8005162:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005166:	f105 35ff 	addle.w	r5, r5, #4294967295
 800516a:	1b52      	subs	r2, r2, r5
 800516c:	6122      	str	r2, [r4, #16]
 800516e:	464b      	mov	r3, r9
 8005170:	4621      	mov	r1, r4
 8005172:	4640      	mov	r0, r8
 8005174:	f8cd a000 	str.w	sl, [sp]
 8005178:	aa03      	add	r2, sp, #12
 800517a:	f7ff fedf 	bl	8004f3c <_printf_common>
 800517e:	3001      	adds	r0, #1
 8005180:	d14c      	bne.n	800521c <_printf_i+0x200>
 8005182:	f04f 30ff 	mov.w	r0, #4294967295
 8005186:	b004      	add	sp, #16
 8005188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800518c:	4834      	ldr	r0, [pc, #208]	; (8005260 <_printf_i+0x244>)
 800518e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005192:	6829      	ldr	r1, [r5, #0]
 8005194:	6823      	ldr	r3, [r4, #0]
 8005196:	f851 6b04 	ldr.w	r6, [r1], #4
 800519a:	6029      	str	r1, [r5, #0]
 800519c:	061d      	lsls	r5, r3, #24
 800519e:	d514      	bpl.n	80051ca <_printf_i+0x1ae>
 80051a0:	07df      	lsls	r7, r3, #31
 80051a2:	bf44      	itt	mi
 80051a4:	f043 0320 	orrmi.w	r3, r3, #32
 80051a8:	6023      	strmi	r3, [r4, #0]
 80051aa:	b91e      	cbnz	r6, 80051b4 <_printf_i+0x198>
 80051ac:	6823      	ldr	r3, [r4, #0]
 80051ae:	f023 0320 	bic.w	r3, r3, #32
 80051b2:	6023      	str	r3, [r4, #0]
 80051b4:	2310      	movs	r3, #16
 80051b6:	e7af      	b.n	8005118 <_printf_i+0xfc>
 80051b8:	6823      	ldr	r3, [r4, #0]
 80051ba:	f043 0320 	orr.w	r3, r3, #32
 80051be:	6023      	str	r3, [r4, #0]
 80051c0:	2378      	movs	r3, #120	; 0x78
 80051c2:	4828      	ldr	r0, [pc, #160]	; (8005264 <_printf_i+0x248>)
 80051c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80051c8:	e7e3      	b.n	8005192 <_printf_i+0x176>
 80051ca:	0659      	lsls	r1, r3, #25
 80051cc:	bf48      	it	mi
 80051ce:	b2b6      	uxthmi	r6, r6
 80051d0:	e7e6      	b.n	80051a0 <_printf_i+0x184>
 80051d2:	4615      	mov	r5, r2
 80051d4:	e7bb      	b.n	800514e <_printf_i+0x132>
 80051d6:	682b      	ldr	r3, [r5, #0]
 80051d8:	6826      	ldr	r6, [r4, #0]
 80051da:	1d18      	adds	r0, r3, #4
 80051dc:	6961      	ldr	r1, [r4, #20]
 80051de:	6028      	str	r0, [r5, #0]
 80051e0:	0635      	lsls	r5, r6, #24
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	d501      	bpl.n	80051ea <_printf_i+0x1ce>
 80051e6:	6019      	str	r1, [r3, #0]
 80051e8:	e002      	b.n	80051f0 <_printf_i+0x1d4>
 80051ea:	0670      	lsls	r0, r6, #25
 80051ec:	d5fb      	bpl.n	80051e6 <_printf_i+0x1ca>
 80051ee:	8019      	strh	r1, [r3, #0]
 80051f0:	2300      	movs	r3, #0
 80051f2:	4615      	mov	r5, r2
 80051f4:	6123      	str	r3, [r4, #16]
 80051f6:	e7ba      	b.n	800516e <_printf_i+0x152>
 80051f8:	682b      	ldr	r3, [r5, #0]
 80051fa:	2100      	movs	r1, #0
 80051fc:	1d1a      	adds	r2, r3, #4
 80051fe:	602a      	str	r2, [r5, #0]
 8005200:	681d      	ldr	r5, [r3, #0]
 8005202:	6862      	ldr	r2, [r4, #4]
 8005204:	4628      	mov	r0, r5
 8005206:	f000 fed5 	bl	8005fb4 <memchr>
 800520a:	b108      	cbz	r0, 8005210 <_printf_i+0x1f4>
 800520c:	1b40      	subs	r0, r0, r5
 800520e:	6060      	str	r0, [r4, #4]
 8005210:	6863      	ldr	r3, [r4, #4]
 8005212:	6123      	str	r3, [r4, #16]
 8005214:	2300      	movs	r3, #0
 8005216:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800521a:	e7a8      	b.n	800516e <_printf_i+0x152>
 800521c:	462a      	mov	r2, r5
 800521e:	4649      	mov	r1, r9
 8005220:	4640      	mov	r0, r8
 8005222:	6923      	ldr	r3, [r4, #16]
 8005224:	47d0      	blx	sl
 8005226:	3001      	adds	r0, #1
 8005228:	d0ab      	beq.n	8005182 <_printf_i+0x166>
 800522a:	6823      	ldr	r3, [r4, #0]
 800522c:	079b      	lsls	r3, r3, #30
 800522e:	d413      	bmi.n	8005258 <_printf_i+0x23c>
 8005230:	68e0      	ldr	r0, [r4, #12]
 8005232:	9b03      	ldr	r3, [sp, #12]
 8005234:	4298      	cmp	r0, r3
 8005236:	bfb8      	it	lt
 8005238:	4618      	movlt	r0, r3
 800523a:	e7a4      	b.n	8005186 <_printf_i+0x16a>
 800523c:	2301      	movs	r3, #1
 800523e:	4632      	mov	r2, r6
 8005240:	4649      	mov	r1, r9
 8005242:	4640      	mov	r0, r8
 8005244:	47d0      	blx	sl
 8005246:	3001      	adds	r0, #1
 8005248:	d09b      	beq.n	8005182 <_printf_i+0x166>
 800524a:	3501      	adds	r5, #1
 800524c:	68e3      	ldr	r3, [r4, #12]
 800524e:	9903      	ldr	r1, [sp, #12]
 8005250:	1a5b      	subs	r3, r3, r1
 8005252:	42ab      	cmp	r3, r5
 8005254:	dcf2      	bgt.n	800523c <_printf_i+0x220>
 8005256:	e7eb      	b.n	8005230 <_printf_i+0x214>
 8005258:	2500      	movs	r5, #0
 800525a:	f104 0619 	add.w	r6, r4, #25
 800525e:	e7f5      	b.n	800524c <_printf_i+0x230>
 8005260:	08007852 	.word	0x08007852
 8005264:	08007863 	.word	0x08007863

08005268 <siprintf>:
 8005268:	b40e      	push	{r1, r2, r3}
 800526a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800526e:	b500      	push	{lr}
 8005270:	b09c      	sub	sp, #112	; 0x70
 8005272:	ab1d      	add	r3, sp, #116	; 0x74
 8005274:	9002      	str	r0, [sp, #8]
 8005276:	9006      	str	r0, [sp, #24]
 8005278:	9107      	str	r1, [sp, #28]
 800527a:	9104      	str	r1, [sp, #16]
 800527c:	4808      	ldr	r0, [pc, #32]	; (80052a0 <siprintf+0x38>)
 800527e:	4909      	ldr	r1, [pc, #36]	; (80052a4 <siprintf+0x3c>)
 8005280:	f853 2b04 	ldr.w	r2, [r3], #4
 8005284:	9105      	str	r1, [sp, #20]
 8005286:	6800      	ldr	r0, [r0, #0]
 8005288:	a902      	add	r1, sp, #8
 800528a:	9301      	str	r3, [sp, #4]
 800528c:	f001 fb7c 	bl	8006988 <_svfiprintf_r>
 8005290:	2200      	movs	r2, #0
 8005292:	9b02      	ldr	r3, [sp, #8]
 8005294:	701a      	strb	r2, [r3, #0]
 8005296:	b01c      	add	sp, #112	; 0x70
 8005298:	f85d eb04 	ldr.w	lr, [sp], #4
 800529c:	b003      	add	sp, #12
 800529e:	4770      	bx	lr
 80052a0:	20000018 	.word	0x20000018
 80052a4:	ffff0208 	.word	0xffff0208

080052a8 <quorem>:
 80052a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ac:	6903      	ldr	r3, [r0, #16]
 80052ae:	690c      	ldr	r4, [r1, #16]
 80052b0:	4607      	mov	r7, r0
 80052b2:	42a3      	cmp	r3, r4
 80052b4:	f2c0 8082 	blt.w	80053bc <quorem+0x114>
 80052b8:	3c01      	subs	r4, #1
 80052ba:	f100 0514 	add.w	r5, r0, #20
 80052be:	f101 0814 	add.w	r8, r1, #20
 80052c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80052c6:	9301      	str	r3, [sp, #4]
 80052c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80052cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80052d0:	3301      	adds	r3, #1
 80052d2:	429a      	cmp	r2, r3
 80052d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80052d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80052dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80052e0:	d331      	bcc.n	8005346 <quorem+0x9e>
 80052e2:	f04f 0e00 	mov.w	lr, #0
 80052e6:	4640      	mov	r0, r8
 80052e8:	46ac      	mov	ip, r5
 80052ea:	46f2      	mov	sl, lr
 80052ec:	f850 2b04 	ldr.w	r2, [r0], #4
 80052f0:	b293      	uxth	r3, r2
 80052f2:	fb06 e303 	mla	r3, r6, r3, lr
 80052f6:	0c12      	lsrs	r2, r2, #16
 80052f8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	fb06 e202 	mla	r2, r6, r2, lr
 8005302:	ebaa 0303 	sub.w	r3, sl, r3
 8005306:	f8dc a000 	ldr.w	sl, [ip]
 800530a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800530e:	fa1f fa8a 	uxth.w	sl, sl
 8005312:	4453      	add	r3, sl
 8005314:	f8dc a000 	ldr.w	sl, [ip]
 8005318:	b292      	uxth	r2, r2
 800531a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800531e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005322:	b29b      	uxth	r3, r3
 8005324:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005328:	4581      	cmp	r9, r0
 800532a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800532e:	f84c 3b04 	str.w	r3, [ip], #4
 8005332:	d2db      	bcs.n	80052ec <quorem+0x44>
 8005334:	f855 300b 	ldr.w	r3, [r5, fp]
 8005338:	b92b      	cbnz	r3, 8005346 <quorem+0x9e>
 800533a:	9b01      	ldr	r3, [sp, #4]
 800533c:	3b04      	subs	r3, #4
 800533e:	429d      	cmp	r5, r3
 8005340:	461a      	mov	r2, r3
 8005342:	d32f      	bcc.n	80053a4 <quorem+0xfc>
 8005344:	613c      	str	r4, [r7, #16]
 8005346:	4638      	mov	r0, r7
 8005348:	f001 f8ce 	bl	80064e8 <__mcmp>
 800534c:	2800      	cmp	r0, #0
 800534e:	db25      	blt.n	800539c <quorem+0xf4>
 8005350:	4628      	mov	r0, r5
 8005352:	f04f 0c00 	mov.w	ip, #0
 8005356:	3601      	adds	r6, #1
 8005358:	f858 1b04 	ldr.w	r1, [r8], #4
 800535c:	f8d0 e000 	ldr.w	lr, [r0]
 8005360:	b28b      	uxth	r3, r1
 8005362:	ebac 0303 	sub.w	r3, ip, r3
 8005366:	fa1f f28e 	uxth.w	r2, lr
 800536a:	4413      	add	r3, r2
 800536c:	0c0a      	lsrs	r2, r1, #16
 800536e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005372:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005376:	b29b      	uxth	r3, r3
 8005378:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800537c:	45c1      	cmp	r9, r8
 800537e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005382:	f840 3b04 	str.w	r3, [r0], #4
 8005386:	d2e7      	bcs.n	8005358 <quorem+0xb0>
 8005388:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800538c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005390:	b922      	cbnz	r2, 800539c <quorem+0xf4>
 8005392:	3b04      	subs	r3, #4
 8005394:	429d      	cmp	r5, r3
 8005396:	461a      	mov	r2, r3
 8005398:	d30a      	bcc.n	80053b0 <quorem+0x108>
 800539a:	613c      	str	r4, [r7, #16]
 800539c:	4630      	mov	r0, r6
 800539e:	b003      	add	sp, #12
 80053a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053a4:	6812      	ldr	r2, [r2, #0]
 80053a6:	3b04      	subs	r3, #4
 80053a8:	2a00      	cmp	r2, #0
 80053aa:	d1cb      	bne.n	8005344 <quorem+0x9c>
 80053ac:	3c01      	subs	r4, #1
 80053ae:	e7c6      	b.n	800533e <quorem+0x96>
 80053b0:	6812      	ldr	r2, [r2, #0]
 80053b2:	3b04      	subs	r3, #4
 80053b4:	2a00      	cmp	r2, #0
 80053b6:	d1f0      	bne.n	800539a <quorem+0xf2>
 80053b8:	3c01      	subs	r4, #1
 80053ba:	e7eb      	b.n	8005394 <quorem+0xec>
 80053bc:	2000      	movs	r0, #0
 80053be:	e7ee      	b.n	800539e <quorem+0xf6>

080053c0 <_dtoa_r>:
 80053c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053c4:	4616      	mov	r6, r2
 80053c6:	461f      	mov	r7, r3
 80053c8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80053ca:	b099      	sub	sp, #100	; 0x64
 80053cc:	4605      	mov	r5, r0
 80053ce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80053d2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80053d6:	b974      	cbnz	r4, 80053f6 <_dtoa_r+0x36>
 80053d8:	2010      	movs	r0, #16
 80053da:	f000 fde3 	bl	8005fa4 <malloc>
 80053de:	4602      	mov	r2, r0
 80053e0:	6268      	str	r0, [r5, #36]	; 0x24
 80053e2:	b920      	cbnz	r0, 80053ee <_dtoa_r+0x2e>
 80053e4:	21ea      	movs	r1, #234	; 0xea
 80053e6:	4ba8      	ldr	r3, [pc, #672]	; (8005688 <_dtoa_r+0x2c8>)
 80053e8:	48a8      	ldr	r0, [pc, #672]	; (800568c <_dtoa_r+0x2cc>)
 80053ea:	f001 fbdd 	bl	8006ba8 <__assert_func>
 80053ee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80053f2:	6004      	str	r4, [r0, #0]
 80053f4:	60c4      	str	r4, [r0, #12]
 80053f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80053f8:	6819      	ldr	r1, [r3, #0]
 80053fa:	b151      	cbz	r1, 8005412 <_dtoa_r+0x52>
 80053fc:	685a      	ldr	r2, [r3, #4]
 80053fe:	2301      	movs	r3, #1
 8005400:	4093      	lsls	r3, r2
 8005402:	604a      	str	r2, [r1, #4]
 8005404:	608b      	str	r3, [r1, #8]
 8005406:	4628      	mov	r0, r5
 8005408:	f000 fe30 	bl	800606c <_Bfree>
 800540c:	2200      	movs	r2, #0
 800540e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005410:	601a      	str	r2, [r3, #0]
 8005412:	1e3b      	subs	r3, r7, #0
 8005414:	bfaf      	iteee	ge
 8005416:	2300      	movge	r3, #0
 8005418:	2201      	movlt	r2, #1
 800541a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800541e:	9305      	strlt	r3, [sp, #20]
 8005420:	bfa8      	it	ge
 8005422:	f8c8 3000 	strge.w	r3, [r8]
 8005426:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800542a:	4b99      	ldr	r3, [pc, #612]	; (8005690 <_dtoa_r+0x2d0>)
 800542c:	bfb8      	it	lt
 800542e:	f8c8 2000 	strlt.w	r2, [r8]
 8005432:	ea33 0309 	bics.w	r3, r3, r9
 8005436:	d119      	bne.n	800546c <_dtoa_r+0xac>
 8005438:	f242 730f 	movw	r3, #9999	; 0x270f
 800543c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800543e:	6013      	str	r3, [r2, #0]
 8005440:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005444:	4333      	orrs	r3, r6
 8005446:	f000 857f 	beq.w	8005f48 <_dtoa_r+0xb88>
 800544a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800544c:	b953      	cbnz	r3, 8005464 <_dtoa_r+0xa4>
 800544e:	4b91      	ldr	r3, [pc, #580]	; (8005694 <_dtoa_r+0x2d4>)
 8005450:	e022      	b.n	8005498 <_dtoa_r+0xd8>
 8005452:	4b91      	ldr	r3, [pc, #580]	; (8005698 <_dtoa_r+0x2d8>)
 8005454:	9303      	str	r3, [sp, #12]
 8005456:	3308      	adds	r3, #8
 8005458:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800545a:	6013      	str	r3, [r2, #0]
 800545c:	9803      	ldr	r0, [sp, #12]
 800545e:	b019      	add	sp, #100	; 0x64
 8005460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005464:	4b8b      	ldr	r3, [pc, #556]	; (8005694 <_dtoa_r+0x2d4>)
 8005466:	9303      	str	r3, [sp, #12]
 8005468:	3303      	adds	r3, #3
 800546a:	e7f5      	b.n	8005458 <_dtoa_r+0x98>
 800546c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005470:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005474:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005478:	2200      	movs	r2, #0
 800547a:	2300      	movs	r3, #0
 800547c:	f7fb fa94 	bl	80009a8 <__aeabi_dcmpeq>
 8005480:	4680      	mov	r8, r0
 8005482:	b158      	cbz	r0, 800549c <_dtoa_r+0xdc>
 8005484:	2301      	movs	r3, #1
 8005486:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005488:	6013      	str	r3, [r2, #0]
 800548a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800548c:	2b00      	cmp	r3, #0
 800548e:	f000 8558 	beq.w	8005f42 <_dtoa_r+0xb82>
 8005492:	4882      	ldr	r0, [pc, #520]	; (800569c <_dtoa_r+0x2dc>)
 8005494:	6018      	str	r0, [r3, #0]
 8005496:	1e43      	subs	r3, r0, #1
 8005498:	9303      	str	r3, [sp, #12]
 800549a:	e7df      	b.n	800545c <_dtoa_r+0x9c>
 800549c:	ab16      	add	r3, sp, #88	; 0x58
 800549e:	9301      	str	r3, [sp, #4]
 80054a0:	ab17      	add	r3, sp, #92	; 0x5c
 80054a2:	9300      	str	r3, [sp, #0]
 80054a4:	4628      	mov	r0, r5
 80054a6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80054aa:	f001 f8c5 	bl	8006638 <__d2b>
 80054ae:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80054b2:	4683      	mov	fp, r0
 80054b4:	2c00      	cmp	r4, #0
 80054b6:	d07f      	beq.n	80055b8 <_dtoa_r+0x1f8>
 80054b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80054bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054be:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80054c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054c6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80054ca:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80054ce:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80054d2:	2200      	movs	r2, #0
 80054d4:	4b72      	ldr	r3, [pc, #456]	; (80056a0 <_dtoa_r+0x2e0>)
 80054d6:	f7fa fe47 	bl	8000168 <__aeabi_dsub>
 80054da:	a365      	add	r3, pc, #404	; (adr r3, 8005670 <_dtoa_r+0x2b0>)
 80054dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e0:	f7fa fffa 	bl	80004d8 <__aeabi_dmul>
 80054e4:	a364      	add	r3, pc, #400	; (adr r3, 8005678 <_dtoa_r+0x2b8>)
 80054e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ea:	f7fa fe3f 	bl	800016c <__adddf3>
 80054ee:	4606      	mov	r6, r0
 80054f0:	4620      	mov	r0, r4
 80054f2:	460f      	mov	r7, r1
 80054f4:	f7fa ff86 	bl	8000404 <__aeabi_i2d>
 80054f8:	a361      	add	r3, pc, #388	; (adr r3, 8005680 <_dtoa_r+0x2c0>)
 80054fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fe:	f7fa ffeb 	bl	80004d8 <__aeabi_dmul>
 8005502:	4602      	mov	r2, r0
 8005504:	460b      	mov	r3, r1
 8005506:	4630      	mov	r0, r6
 8005508:	4639      	mov	r1, r7
 800550a:	f7fa fe2f 	bl	800016c <__adddf3>
 800550e:	4606      	mov	r6, r0
 8005510:	460f      	mov	r7, r1
 8005512:	f7fb fa91 	bl	8000a38 <__aeabi_d2iz>
 8005516:	2200      	movs	r2, #0
 8005518:	4682      	mov	sl, r0
 800551a:	2300      	movs	r3, #0
 800551c:	4630      	mov	r0, r6
 800551e:	4639      	mov	r1, r7
 8005520:	f7fb fa4c 	bl	80009bc <__aeabi_dcmplt>
 8005524:	b148      	cbz	r0, 800553a <_dtoa_r+0x17a>
 8005526:	4650      	mov	r0, sl
 8005528:	f7fa ff6c 	bl	8000404 <__aeabi_i2d>
 800552c:	4632      	mov	r2, r6
 800552e:	463b      	mov	r3, r7
 8005530:	f7fb fa3a 	bl	80009a8 <__aeabi_dcmpeq>
 8005534:	b908      	cbnz	r0, 800553a <_dtoa_r+0x17a>
 8005536:	f10a 3aff 	add.w	sl, sl, #4294967295
 800553a:	f1ba 0f16 	cmp.w	sl, #22
 800553e:	d858      	bhi.n	80055f2 <_dtoa_r+0x232>
 8005540:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005544:	4b57      	ldr	r3, [pc, #348]	; (80056a4 <_dtoa_r+0x2e4>)
 8005546:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800554a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554e:	f7fb fa35 	bl	80009bc <__aeabi_dcmplt>
 8005552:	2800      	cmp	r0, #0
 8005554:	d04f      	beq.n	80055f6 <_dtoa_r+0x236>
 8005556:	2300      	movs	r3, #0
 8005558:	f10a 3aff 	add.w	sl, sl, #4294967295
 800555c:	930f      	str	r3, [sp, #60]	; 0x3c
 800555e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005560:	1b1c      	subs	r4, r3, r4
 8005562:	1e63      	subs	r3, r4, #1
 8005564:	9309      	str	r3, [sp, #36]	; 0x24
 8005566:	bf49      	itett	mi
 8005568:	f1c4 0301 	rsbmi	r3, r4, #1
 800556c:	2300      	movpl	r3, #0
 800556e:	9306      	strmi	r3, [sp, #24]
 8005570:	2300      	movmi	r3, #0
 8005572:	bf54      	ite	pl
 8005574:	9306      	strpl	r3, [sp, #24]
 8005576:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005578:	f1ba 0f00 	cmp.w	sl, #0
 800557c:	db3d      	blt.n	80055fa <_dtoa_r+0x23a>
 800557e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005580:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005584:	4453      	add	r3, sl
 8005586:	9309      	str	r3, [sp, #36]	; 0x24
 8005588:	2300      	movs	r3, #0
 800558a:	930a      	str	r3, [sp, #40]	; 0x28
 800558c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800558e:	2b09      	cmp	r3, #9
 8005590:	f200 808c 	bhi.w	80056ac <_dtoa_r+0x2ec>
 8005594:	2b05      	cmp	r3, #5
 8005596:	bfc4      	itt	gt
 8005598:	3b04      	subgt	r3, #4
 800559a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800559c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800559e:	bfc8      	it	gt
 80055a0:	2400      	movgt	r4, #0
 80055a2:	f1a3 0302 	sub.w	r3, r3, #2
 80055a6:	bfd8      	it	le
 80055a8:	2401      	movle	r4, #1
 80055aa:	2b03      	cmp	r3, #3
 80055ac:	f200 808a 	bhi.w	80056c4 <_dtoa_r+0x304>
 80055b0:	e8df f003 	tbb	[pc, r3]
 80055b4:	5b4d4f2d 	.word	0x5b4d4f2d
 80055b8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80055bc:	441c      	add	r4, r3
 80055be:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80055c2:	2b20      	cmp	r3, #32
 80055c4:	bfc3      	ittte	gt
 80055c6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80055ca:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80055ce:	fa09 f303 	lslgt.w	r3, r9, r3
 80055d2:	f1c3 0320 	rsble	r3, r3, #32
 80055d6:	bfc6      	itte	gt
 80055d8:	fa26 f000 	lsrgt.w	r0, r6, r0
 80055dc:	4318      	orrgt	r0, r3
 80055de:	fa06 f003 	lslle.w	r0, r6, r3
 80055e2:	f7fa feff 	bl	80003e4 <__aeabi_ui2d>
 80055e6:	2301      	movs	r3, #1
 80055e8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80055ec:	3c01      	subs	r4, #1
 80055ee:	9313      	str	r3, [sp, #76]	; 0x4c
 80055f0:	e76f      	b.n	80054d2 <_dtoa_r+0x112>
 80055f2:	2301      	movs	r3, #1
 80055f4:	e7b2      	b.n	800555c <_dtoa_r+0x19c>
 80055f6:	900f      	str	r0, [sp, #60]	; 0x3c
 80055f8:	e7b1      	b.n	800555e <_dtoa_r+0x19e>
 80055fa:	9b06      	ldr	r3, [sp, #24]
 80055fc:	eba3 030a 	sub.w	r3, r3, sl
 8005600:	9306      	str	r3, [sp, #24]
 8005602:	f1ca 0300 	rsb	r3, sl, #0
 8005606:	930a      	str	r3, [sp, #40]	; 0x28
 8005608:	2300      	movs	r3, #0
 800560a:	930e      	str	r3, [sp, #56]	; 0x38
 800560c:	e7be      	b.n	800558c <_dtoa_r+0x1cc>
 800560e:	2300      	movs	r3, #0
 8005610:	930b      	str	r3, [sp, #44]	; 0x2c
 8005612:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005614:	2b00      	cmp	r3, #0
 8005616:	dc58      	bgt.n	80056ca <_dtoa_r+0x30a>
 8005618:	f04f 0901 	mov.w	r9, #1
 800561c:	464b      	mov	r3, r9
 800561e:	f8cd 9020 	str.w	r9, [sp, #32]
 8005622:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8005626:	2200      	movs	r2, #0
 8005628:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800562a:	6042      	str	r2, [r0, #4]
 800562c:	2204      	movs	r2, #4
 800562e:	f102 0614 	add.w	r6, r2, #20
 8005632:	429e      	cmp	r6, r3
 8005634:	6841      	ldr	r1, [r0, #4]
 8005636:	d94e      	bls.n	80056d6 <_dtoa_r+0x316>
 8005638:	4628      	mov	r0, r5
 800563a:	f000 fcd7 	bl	8005fec <_Balloc>
 800563e:	9003      	str	r0, [sp, #12]
 8005640:	2800      	cmp	r0, #0
 8005642:	d14c      	bne.n	80056de <_dtoa_r+0x31e>
 8005644:	4602      	mov	r2, r0
 8005646:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800564a:	4b17      	ldr	r3, [pc, #92]	; (80056a8 <_dtoa_r+0x2e8>)
 800564c:	e6cc      	b.n	80053e8 <_dtoa_r+0x28>
 800564e:	2301      	movs	r3, #1
 8005650:	e7de      	b.n	8005610 <_dtoa_r+0x250>
 8005652:	2300      	movs	r3, #0
 8005654:	930b      	str	r3, [sp, #44]	; 0x2c
 8005656:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005658:	eb0a 0903 	add.w	r9, sl, r3
 800565c:	f109 0301 	add.w	r3, r9, #1
 8005660:	2b01      	cmp	r3, #1
 8005662:	9308      	str	r3, [sp, #32]
 8005664:	bfb8      	it	lt
 8005666:	2301      	movlt	r3, #1
 8005668:	e7dd      	b.n	8005626 <_dtoa_r+0x266>
 800566a:	2301      	movs	r3, #1
 800566c:	e7f2      	b.n	8005654 <_dtoa_r+0x294>
 800566e:	bf00      	nop
 8005670:	636f4361 	.word	0x636f4361
 8005674:	3fd287a7 	.word	0x3fd287a7
 8005678:	8b60c8b3 	.word	0x8b60c8b3
 800567c:	3fc68a28 	.word	0x3fc68a28
 8005680:	509f79fb 	.word	0x509f79fb
 8005684:	3fd34413 	.word	0x3fd34413
 8005688:	08007881 	.word	0x08007881
 800568c:	08007898 	.word	0x08007898
 8005690:	7ff00000 	.word	0x7ff00000
 8005694:	0800787d 	.word	0x0800787d
 8005698:	08007874 	.word	0x08007874
 800569c:	08007851 	.word	0x08007851
 80056a0:	3ff80000 	.word	0x3ff80000
 80056a4:	08007988 	.word	0x08007988
 80056a8:	080078f3 	.word	0x080078f3
 80056ac:	2401      	movs	r4, #1
 80056ae:	2300      	movs	r3, #0
 80056b0:	940b      	str	r4, [sp, #44]	; 0x2c
 80056b2:	9322      	str	r3, [sp, #136]	; 0x88
 80056b4:	f04f 39ff 	mov.w	r9, #4294967295
 80056b8:	2200      	movs	r2, #0
 80056ba:	2312      	movs	r3, #18
 80056bc:	f8cd 9020 	str.w	r9, [sp, #32]
 80056c0:	9223      	str	r2, [sp, #140]	; 0x8c
 80056c2:	e7b0      	b.n	8005626 <_dtoa_r+0x266>
 80056c4:	2301      	movs	r3, #1
 80056c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80056c8:	e7f4      	b.n	80056b4 <_dtoa_r+0x2f4>
 80056ca:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80056ce:	464b      	mov	r3, r9
 80056d0:	f8cd 9020 	str.w	r9, [sp, #32]
 80056d4:	e7a7      	b.n	8005626 <_dtoa_r+0x266>
 80056d6:	3101      	adds	r1, #1
 80056d8:	6041      	str	r1, [r0, #4]
 80056da:	0052      	lsls	r2, r2, #1
 80056dc:	e7a7      	b.n	800562e <_dtoa_r+0x26e>
 80056de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80056e0:	9a03      	ldr	r2, [sp, #12]
 80056e2:	601a      	str	r2, [r3, #0]
 80056e4:	9b08      	ldr	r3, [sp, #32]
 80056e6:	2b0e      	cmp	r3, #14
 80056e8:	f200 80a8 	bhi.w	800583c <_dtoa_r+0x47c>
 80056ec:	2c00      	cmp	r4, #0
 80056ee:	f000 80a5 	beq.w	800583c <_dtoa_r+0x47c>
 80056f2:	f1ba 0f00 	cmp.w	sl, #0
 80056f6:	dd34      	ble.n	8005762 <_dtoa_r+0x3a2>
 80056f8:	4a9a      	ldr	r2, [pc, #616]	; (8005964 <_dtoa_r+0x5a4>)
 80056fa:	f00a 030f 	and.w	r3, sl, #15
 80056fe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005702:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005706:	e9d3 3400 	ldrd	r3, r4, [r3]
 800570a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800570e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8005712:	d016      	beq.n	8005742 <_dtoa_r+0x382>
 8005714:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005718:	4b93      	ldr	r3, [pc, #588]	; (8005968 <_dtoa_r+0x5a8>)
 800571a:	2703      	movs	r7, #3
 800571c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005720:	f7fb f804 	bl	800072c <__aeabi_ddiv>
 8005724:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005728:	f004 040f 	and.w	r4, r4, #15
 800572c:	4e8e      	ldr	r6, [pc, #568]	; (8005968 <_dtoa_r+0x5a8>)
 800572e:	b954      	cbnz	r4, 8005746 <_dtoa_r+0x386>
 8005730:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005734:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005738:	f7fa fff8 	bl	800072c <__aeabi_ddiv>
 800573c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005740:	e029      	b.n	8005796 <_dtoa_r+0x3d6>
 8005742:	2702      	movs	r7, #2
 8005744:	e7f2      	b.n	800572c <_dtoa_r+0x36c>
 8005746:	07e1      	lsls	r1, r4, #31
 8005748:	d508      	bpl.n	800575c <_dtoa_r+0x39c>
 800574a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800574e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005752:	f7fa fec1 	bl	80004d8 <__aeabi_dmul>
 8005756:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800575a:	3701      	adds	r7, #1
 800575c:	1064      	asrs	r4, r4, #1
 800575e:	3608      	adds	r6, #8
 8005760:	e7e5      	b.n	800572e <_dtoa_r+0x36e>
 8005762:	f000 80a5 	beq.w	80058b0 <_dtoa_r+0x4f0>
 8005766:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800576a:	f1ca 0400 	rsb	r4, sl, #0
 800576e:	4b7d      	ldr	r3, [pc, #500]	; (8005964 <_dtoa_r+0x5a4>)
 8005770:	f004 020f 	and.w	r2, r4, #15
 8005774:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577c:	f7fa feac 	bl	80004d8 <__aeabi_dmul>
 8005780:	2702      	movs	r7, #2
 8005782:	2300      	movs	r3, #0
 8005784:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005788:	4e77      	ldr	r6, [pc, #476]	; (8005968 <_dtoa_r+0x5a8>)
 800578a:	1124      	asrs	r4, r4, #4
 800578c:	2c00      	cmp	r4, #0
 800578e:	f040 8084 	bne.w	800589a <_dtoa_r+0x4da>
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1d2      	bne.n	800573c <_dtoa_r+0x37c>
 8005796:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005798:	2b00      	cmp	r3, #0
 800579a:	f000 808b 	beq.w	80058b4 <_dtoa_r+0x4f4>
 800579e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80057a2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80057a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80057aa:	2200      	movs	r2, #0
 80057ac:	4b6f      	ldr	r3, [pc, #444]	; (800596c <_dtoa_r+0x5ac>)
 80057ae:	f7fb f905 	bl	80009bc <__aeabi_dcmplt>
 80057b2:	2800      	cmp	r0, #0
 80057b4:	d07e      	beq.n	80058b4 <_dtoa_r+0x4f4>
 80057b6:	9b08      	ldr	r3, [sp, #32]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d07b      	beq.n	80058b4 <_dtoa_r+0x4f4>
 80057bc:	f1b9 0f00 	cmp.w	r9, #0
 80057c0:	dd38      	ble.n	8005834 <_dtoa_r+0x474>
 80057c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80057c6:	2200      	movs	r2, #0
 80057c8:	4b69      	ldr	r3, [pc, #420]	; (8005970 <_dtoa_r+0x5b0>)
 80057ca:	f7fa fe85 	bl	80004d8 <__aeabi_dmul>
 80057ce:	464c      	mov	r4, r9
 80057d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057d4:	f10a 38ff 	add.w	r8, sl, #4294967295
 80057d8:	3701      	adds	r7, #1
 80057da:	4638      	mov	r0, r7
 80057dc:	f7fa fe12 	bl	8000404 <__aeabi_i2d>
 80057e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057e4:	f7fa fe78 	bl	80004d8 <__aeabi_dmul>
 80057e8:	2200      	movs	r2, #0
 80057ea:	4b62      	ldr	r3, [pc, #392]	; (8005974 <_dtoa_r+0x5b4>)
 80057ec:	f7fa fcbe 	bl	800016c <__adddf3>
 80057f0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80057f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80057f8:	9611      	str	r6, [sp, #68]	; 0x44
 80057fa:	2c00      	cmp	r4, #0
 80057fc:	d15d      	bne.n	80058ba <_dtoa_r+0x4fa>
 80057fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005802:	2200      	movs	r2, #0
 8005804:	4b5c      	ldr	r3, [pc, #368]	; (8005978 <_dtoa_r+0x5b8>)
 8005806:	f7fa fcaf 	bl	8000168 <__aeabi_dsub>
 800580a:	4602      	mov	r2, r0
 800580c:	460b      	mov	r3, r1
 800580e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005812:	4633      	mov	r3, r6
 8005814:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005816:	f7fb f8ef 	bl	80009f8 <__aeabi_dcmpgt>
 800581a:	2800      	cmp	r0, #0
 800581c:	f040 829c 	bne.w	8005d58 <_dtoa_r+0x998>
 8005820:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005824:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005826:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800582a:	f7fb f8c7 	bl	80009bc <__aeabi_dcmplt>
 800582e:	2800      	cmp	r0, #0
 8005830:	f040 8290 	bne.w	8005d54 <_dtoa_r+0x994>
 8005834:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005838:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800583c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800583e:	2b00      	cmp	r3, #0
 8005840:	f2c0 8152 	blt.w	8005ae8 <_dtoa_r+0x728>
 8005844:	f1ba 0f0e 	cmp.w	sl, #14
 8005848:	f300 814e 	bgt.w	8005ae8 <_dtoa_r+0x728>
 800584c:	4b45      	ldr	r3, [pc, #276]	; (8005964 <_dtoa_r+0x5a4>)
 800584e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005852:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005856:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800585a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800585c:	2b00      	cmp	r3, #0
 800585e:	f280 80db 	bge.w	8005a18 <_dtoa_r+0x658>
 8005862:	9b08      	ldr	r3, [sp, #32]
 8005864:	2b00      	cmp	r3, #0
 8005866:	f300 80d7 	bgt.w	8005a18 <_dtoa_r+0x658>
 800586a:	f040 8272 	bne.w	8005d52 <_dtoa_r+0x992>
 800586e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005872:	2200      	movs	r2, #0
 8005874:	4b40      	ldr	r3, [pc, #256]	; (8005978 <_dtoa_r+0x5b8>)
 8005876:	f7fa fe2f 	bl	80004d8 <__aeabi_dmul>
 800587a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800587e:	f7fb f8b1 	bl	80009e4 <__aeabi_dcmpge>
 8005882:	9c08      	ldr	r4, [sp, #32]
 8005884:	4626      	mov	r6, r4
 8005886:	2800      	cmp	r0, #0
 8005888:	f040 8248 	bne.w	8005d1c <_dtoa_r+0x95c>
 800588c:	2331      	movs	r3, #49	; 0x31
 800588e:	9f03      	ldr	r7, [sp, #12]
 8005890:	f10a 0a01 	add.w	sl, sl, #1
 8005894:	f807 3b01 	strb.w	r3, [r7], #1
 8005898:	e244      	b.n	8005d24 <_dtoa_r+0x964>
 800589a:	07e2      	lsls	r2, r4, #31
 800589c:	d505      	bpl.n	80058aa <_dtoa_r+0x4ea>
 800589e:	e9d6 2300 	ldrd	r2, r3, [r6]
 80058a2:	f7fa fe19 	bl	80004d8 <__aeabi_dmul>
 80058a6:	2301      	movs	r3, #1
 80058a8:	3701      	adds	r7, #1
 80058aa:	1064      	asrs	r4, r4, #1
 80058ac:	3608      	adds	r6, #8
 80058ae:	e76d      	b.n	800578c <_dtoa_r+0x3cc>
 80058b0:	2702      	movs	r7, #2
 80058b2:	e770      	b.n	8005796 <_dtoa_r+0x3d6>
 80058b4:	46d0      	mov	r8, sl
 80058b6:	9c08      	ldr	r4, [sp, #32]
 80058b8:	e78f      	b.n	80057da <_dtoa_r+0x41a>
 80058ba:	9903      	ldr	r1, [sp, #12]
 80058bc:	4b29      	ldr	r3, [pc, #164]	; (8005964 <_dtoa_r+0x5a4>)
 80058be:	4421      	add	r1, r4
 80058c0:	9112      	str	r1, [sp, #72]	; 0x48
 80058c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80058c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80058c8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80058cc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80058d0:	2900      	cmp	r1, #0
 80058d2:	d055      	beq.n	8005980 <_dtoa_r+0x5c0>
 80058d4:	2000      	movs	r0, #0
 80058d6:	4929      	ldr	r1, [pc, #164]	; (800597c <_dtoa_r+0x5bc>)
 80058d8:	f7fa ff28 	bl	800072c <__aeabi_ddiv>
 80058dc:	463b      	mov	r3, r7
 80058de:	4632      	mov	r2, r6
 80058e0:	f7fa fc42 	bl	8000168 <__aeabi_dsub>
 80058e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80058e8:	9f03      	ldr	r7, [sp, #12]
 80058ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058ee:	f7fb f8a3 	bl	8000a38 <__aeabi_d2iz>
 80058f2:	4604      	mov	r4, r0
 80058f4:	f7fa fd86 	bl	8000404 <__aeabi_i2d>
 80058f8:	4602      	mov	r2, r0
 80058fa:	460b      	mov	r3, r1
 80058fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005900:	f7fa fc32 	bl	8000168 <__aeabi_dsub>
 8005904:	4602      	mov	r2, r0
 8005906:	460b      	mov	r3, r1
 8005908:	3430      	adds	r4, #48	; 0x30
 800590a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800590e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005912:	f807 4b01 	strb.w	r4, [r7], #1
 8005916:	f7fb f851 	bl	80009bc <__aeabi_dcmplt>
 800591a:	2800      	cmp	r0, #0
 800591c:	d174      	bne.n	8005a08 <_dtoa_r+0x648>
 800591e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005922:	2000      	movs	r0, #0
 8005924:	4911      	ldr	r1, [pc, #68]	; (800596c <_dtoa_r+0x5ac>)
 8005926:	f7fa fc1f 	bl	8000168 <__aeabi_dsub>
 800592a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800592e:	f7fb f845 	bl	80009bc <__aeabi_dcmplt>
 8005932:	2800      	cmp	r0, #0
 8005934:	f040 80b7 	bne.w	8005aa6 <_dtoa_r+0x6e6>
 8005938:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800593a:	429f      	cmp	r7, r3
 800593c:	f43f af7a 	beq.w	8005834 <_dtoa_r+0x474>
 8005940:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005944:	2200      	movs	r2, #0
 8005946:	4b0a      	ldr	r3, [pc, #40]	; (8005970 <_dtoa_r+0x5b0>)
 8005948:	f7fa fdc6 	bl	80004d8 <__aeabi_dmul>
 800594c:	2200      	movs	r2, #0
 800594e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005952:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005956:	4b06      	ldr	r3, [pc, #24]	; (8005970 <_dtoa_r+0x5b0>)
 8005958:	f7fa fdbe 	bl	80004d8 <__aeabi_dmul>
 800595c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005960:	e7c3      	b.n	80058ea <_dtoa_r+0x52a>
 8005962:	bf00      	nop
 8005964:	08007988 	.word	0x08007988
 8005968:	08007960 	.word	0x08007960
 800596c:	3ff00000 	.word	0x3ff00000
 8005970:	40240000 	.word	0x40240000
 8005974:	401c0000 	.word	0x401c0000
 8005978:	40140000 	.word	0x40140000
 800597c:	3fe00000 	.word	0x3fe00000
 8005980:	4630      	mov	r0, r6
 8005982:	4639      	mov	r1, r7
 8005984:	f7fa fda8 	bl	80004d8 <__aeabi_dmul>
 8005988:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800598a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800598e:	9c03      	ldr	r4, [sp, #12]
 8005990:	9314      	str	r3, [sp, #80]	; 0x50
 8005992:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005996:	f7fb f84f 	bl	8000a38 <__aeabi_d2iz>
 800599a:	9015      	str	r0, [sp, #84]	; 0x54
 800599c:	f7fa fd32 	bl	8000404 <__aeabi_i2d>
 80059a0:	4602      	mov	r2, r0
 80059a2:	460b      	mov	r3, r1
 80059a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059a8:	f7fa fbde 	bl	8000168 <__aeabi_dsub>
 80059ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80059ae:	4606      	mov	r6, r0
 80059b0:	3330      	adds	r3, #48	; 0x30
 80059b2:	f804 3b01 	strb.w	r3, [r4], #1
 80059b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80059b8:	460f      	mov	r7, r1
 80059ba:	429c      	cmp	r4, r3
 80059bc:	f04f 0200 	mov.w	r2, #0
 80059c0:	d124      	bne.n	8005a0c <_dtoa_r+0x64c>
 80059c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80059c6:	4bb0      	ldr	r3, [pc, #704]	; (8005c88 <_dtoa_r+0x8c8>)
 80059c8:	f7fa fbd0 	bl	800016c <__adddf3>
 80059cc:	4602      	mov	r2, r0
 80059ce:	460b      	mov	r3, r1
 80059d0:	4630      	mov	r0, r6
 80059d2:	4639      	mov	r1, r7
 80059d4:	f7fb f810 	bl	80009f8 <__aeabi_dcmpgt>
 80059d8:	2800      	cmp	r0, #0
 80059da:	d163      	bne.n	8005aa4 <_dtoa_r+0x6e4>
 80059dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80059e0:	2000      	movs	r0, #0
 80059e2:	49a9      	ldr	r1, [pc, #676]	; (8005c88 <_dtoa_r+0x8c8>)
 80059e4:	f7fa fbc0 	bl	8000168 <__aeabi_dsub>
 80059e8:	4602      	mov	r2, r0
 80059ea:	460b      	mov	r3, r1
 80059ec:	4630      	mov	r0, r6
 80059ee:	4639      	mov	r1, r7
 80059f0:	f7fa ffe4 	bl	80009bc <__aeabi_dcmplt>
 80059f4:	2800      	cmp	r0, #0
 80059f6:	f43f af1d 	beq.w	8005834 <_dtoa_r+0x474>
 80059fa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80059fc:	1e7b      	subs	r3, r7, #1
 80059fe:	9314      	str	r3, [sp, #80]	; 0x50
 8005a00:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005a04:	2b30      	cmp	r3, #48	; 0x30
 8005a06:	d0f8      	beq.n	80059fa <_dtoa_r+0x63a>
 8005a08:	46c2      	mov	sl, r8
 8005a0a:	e03b      	b.n	8005a84 <_dtoa_r+0x6c4>
 8005a0c:	4b9f      	ldr	r3, [pc, #636]	; (8005c8c <_dtoa_r+0x8cc>)
 8005a0e:	f7fa fd63 	bl	80004d8 <__aeabi_dmul>
 8005a12:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a16:	e7bc      	b.n	8005992 <_dtoa_r+0x5d2>
 8005a18:	9f03      	ldr	r7, [sp, #12]
 8005a1a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005a1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a22:	4640      	mov	r0, r8
 8005a24:	4649      	mov	r1, r9
 8005a26:	f7fa fe81 	bl	800072c <__aeabi_ddiv>
 8005a2a:	f7fb f805 	bl	8000a38 <__aeabi_d2iz>
 8005a2e:	4604      	mov	r4, r0
 8005a30:	f7fa fce8 	bl	8000404 <__aeabi_i2d>
 8005a34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a38:	f7fa fd4e 	bl	80004d8 <__aeabi_dmul>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	460b      	mov	r3, r1
 8005a40:	4640      	mov	r0, r8
 8005a42:	4649      	mov	r1, r9
 8005a44:	f7fa fb90 	bl	8000168 <__aeabi_dsub>
 8005a48:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005a4c:	f807 6b01 	strb.w	r6, [r7], #1
 8005a50:	9e03      	ldr	r6, [sp, #12]
 8005a52:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005a56:	1bbe      	subs	r6, r7, r6
 8005a58:	45b4      	cmp	ip, r6
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	d136      	bne.n	8005ace <_dtoa_r+0x70e>
 8005a60:	f7fa fb84 	bl	800016c <__adddf3>
 8005a64:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a68:	4680      	mov	r8, r0
 8005a6a:	4689      	mov	r9, r1
 8005a6c:	f7fa ffc4 	bl	80009f8 <__aeabi_dcmpgt>
 8005a70:	bb58      	cbnz	r0, 8005aca <_dtoa_r+0x70a>
 8005a72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a76:	4640      	mov	r0, r8
 8005a78:	4649      	mov	r1, r9
 8005a7a:	f7fa ff95 	bl	80009a8 <__aeabi_dcmpeq>
 8005a7e:	b108      	cbz	r0, 8005a84 <_dtoa_r+0x6c4>
 8005a80:	07e1      	lsls	r1, r4, #31
 8005a82:	d422      	bmi.n	8005aca <_dtoa_r+0x70a>
 8005a84:	4628      	mov	r0, r5
 8005a86:	4659      	mov	r1, fp
 8005a88:	f000 faf0 	bl	800606c <_Bfree>
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	703b      	strb	r3, [r7, #0]
 8005a90:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005a92:	f10a 0001 	add.w	r0, sl, #1
 8005a96:	6018      	str	r0, [r3, #0]
 8005a98:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	f43f acde 	beq.w	800545c <_dtoa_r+0x9c>
 8005aa0:	601f      	str	r7, [r3, #0]
 8005aa2:	e4db      	b.n	800545c <_dtoa_r+0x9c>
 8005aa4:	4627      	mov	r7, r4
 8005aa6:	463b      	mov	r3, r7
 8005aa8:	461f      	mov	r7, r3
 8005aaa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005aae:	2a39      	cmp	r2, #57	; 0x39
 8005ab0:	d107      	bne.n	8005ac2 <_dtoa_r+0x702>
 8005ab2:	9a03      	ldr	r2, [sp, #12]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d1f7      	bne.n	8005aa8 <_dtoa_r+0x6e8>
 8005ab8:	2230      	movs	r2, #48	; 0x30
 8005aba:	9903      	ldr	r1, [sp, #12]
 8005abc:	f108 0801 	add.w	r8, r8, #1
 8005ac0:	700a      	strb	r2, [r1, #0]
 8005ac2:	781a      	ldrb	r2, [r3, #0]
 8005ac4:	3201      	adds	r2, #1
 8005ac6:	701a      	strb	r2, [r3, #0]
 8005ac8:	e79e      	b.n	8005a08 <_dtoa_r+0x648>
 8005aca:	46d0      	mov	r8, sl
 8005acc:	e7eb      	b.n	8005aa6 <_dtoa_r+0x6e6>
 8005ace:	2200      	movs	r2, #0
 8005ad0:	4b6e      	ldr	r3, [pc, #440]	; (8005c8c <_dtoa_r+0x8cc>)
 8005ad2:	f7fa fd01 	bl	80004d8 <__aeabi_dmul>
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	2300      	movs	r3, #0
 8005ada:	4680      	mov	r8, r0
 8005adc:	4689      	mov	r9, r1
 8005ade:	f7fa ff63 	bl	80009a8 <__aeabi_dcmpeq>
 8005ae2:	2800      	cmp	r0, #0
 8005ae4:	d09b      	beq.n	8005a1e <_dtoa_r+0x65e>
 8005ae6:	e7cd      	b.n	8005a84 <_dtoa_r+0x6c4>
 8005ae8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005aea:	2a00      	cmp	r2, #0
 8005aec:	f000 80d0 	beq.w	8005c90 <_dtoa_r+0x8d0>
 8005af0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005af2:	2a01      	cmp	r2, #1
 8005af4:	f300 80ae 	bgt.w	8005c54 <_dtoa_r+0x894>
 8005af8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005afa:	2a00      	cmp	r2, #0
 8005afc:	f000 80a6 	beq.w	8005c4c <_dtoa_r+0x88c>
 8005b00:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005b04:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005b06:	9f06      	ldr	r7, [sp, #24]
 8005b08:	9a06      	ldr	r2, [sp, #24]
 8005b0a:	2101      	movs	r1, #1
 8005b0c:	441a      	add	r2, r3
 8005b0e:	9206      	str	r2, [sp, #24]
 8005b10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b12:	4628      	mov	r0, r5
 8005b14:	441a      	add	r2, r3
 8005b16:	9209      	str	r2, [sp, #36]	; 0x24
 8005b18:	f000 fb5e 	bl	80061d8 <__i2b>
 8005b1c:	4606      	mov	r6, r0
 8005b1e:	2f00      	cmp	r7, #0
 8005b20:	dd0c      	ble.n	8005b3c <_dtoa_r+0x77c>
 8005b22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	dd09      	ble.n	8005b3c <_dtoa_r+0x77c>
 8005b28:	42bb      	cmp	r3, r7
 8005b2a:	bfa8      	it	ge
 8005b2c:	463b      	movge	r3, r7
 8005b2e:	9a06      	ldr	r2, [sp, #24]
 8005b30:	1aff      	subs	r7, r7, r3
 8005b32:	1ad2      	subs	r2, r2, r3
 8005b34:	9206      	str	r2, [sp, #24]
 8005b36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	9309      	str	r3, [sp, #36]	; 0x24
 8005b3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b3e:	b1f3      	cbz	r3, 8005b7e <_dtoa_r+0x7be>
 8005b40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f000 80a8 	beq.w	8005c98 <_dtoa_r+0x8d8>
 8005b48:	2c00      	cmp	r4, #0
 8005b4a:	dd10      	ble.n	8005b6e <_dtoa_r+0x7ae>
 8005b4c:	4631      	mov	r1, r6
 8005b4e:	4622      	mov	r2, r4
 8005b50:	4628      	mov	r0, r5
 8005b52:	f000 fbff 	bl	8006354 <__pow5mult>
 8005b56:	465a      	mov	r2, fp
 8005b58:	4601      	mov	r1, r0
 8005b5a:	4606      	mov	r6, r0
 8005b5c:	4628      	mov	r0, r5
 8005b5e:	f000 fb51 	bl	8006204 <__multiply>
 8005b62:	4680      	mov	r8, r0
 8005b64:	4659      	mov	r1, fp
 8005b66:	4628      	mov	r0, r5
 8005b68:	f000 fa80 	bl	800606c <_Bfree>
 8005b6c:	46c3      	mov	fp, r8
 8005b6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b70:	1b1a      	subs	r2, r3, r4
 8005b72:	d004      	beq.n	8005b7e <_dtoa_r+0x7be>
 8005b74:	4659      	mov	r1, fp
 8005b76:	4628      	mov	r0, r5
 8005b78:	f000 fbec 	bl	8006354 <__pow5mult>
 8005b7c:	4683      	mov	fp, r0
 8005b7e:	2101      	movs	r1, #1
 8005b80:	4628      	mov	r0, r5
 8005b82:	f000 fb29 	bl	80061d8 <__i2b>
 8005b86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b88:	4604      	mov	r4, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f340 8086 	ble.w	8005c9c <_dtoa_r+0x8dc>
 8005b90:	461a      	mov	r2, r3
 8005b92:	4601      	mov	r1, r0
 8005b94:	4628      	mov	r0, r5
 8005b96:	f000 fbdd 	bl	8006354 <__pow5mult>
 8005b9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b9c:	4604      	mov	r4, r0
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	dd7f      	ble.n	8005ca2 <_dtoa_r+0x8e2>
 8005ba2:	f04f 0800 	mov.w	r8, #0
 8005ba6:	6923      	ldr	r3, [r4, #16]
 8005ba8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005bac:	6918      	ldr	r0, [r3, #16]
 8005bae:	f000 fac5 	bl	800613c <__hi0bits>
 8005bb2:	f1c0 0020 	rsb	r0, r0, #32
 8005bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bb8:	4418      	add	r0, r3
 8005bba:	f010 001f 	ands.w	r0, r0, #31
 8005bbe:	f000 8092 	beq.w	8005ce6 <_dtoa_r+0x926>
 8005bc2:	f1c0 0320 	rsb	r3, r0, #32
 8005bc6:	2b04      	cmp	r3, #4
 8005bc8:	f340 808a 	ble.w	8005ce0 <_dtoa_r+0x920>
 8005bcc:	f1c0 001c 	rsb	r0, r0, #28
 8005bd0:	9b06      	ldr	r3, [sp, #24]
 8005bd2:	4407      	add	r7, r0
 8005bd4:	4403      	add	r3, r0
 8005bd6:	9306      	str	r3, [sp, #24]
 8005bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bda:	4403      	add	r3, r0
 8005bdc:	9309      	str	r3, [sp, #36]	; 0x24
 8005bde:	9b06      	ldr	r3, [sp, #24]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	dd05      	ble.n	8005bf0 <_dtoa_r+0x830>
 8005be4:	4659      	mov	r1, fp
 8005be6:	461a      	mov	r2, r3
 8005be8:	4628      	mov	r0, r5
 8005bea:	f000 fc0d 	bl	8006408 <__lshift>
 8005bee:	4683      	mov	fp, r0
 8005bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	dd05      	ble.n	8005c02 <_dtoa_r+0x842>
 8005bf6:	4621      	mov	r1, r4
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	4628      	mov	r0, r5
 8005bfc:	f000 fc04 	bl	8006408 <__lshift>
 8005c00:	4604      	mov	r4, r0
 8005c02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d070      	beq.n	8005cea <_dtoa_r+0x92a>
 8005c08:	4621      	mov	r1, r4
 8005c0a:	4658      	mov	r0, fp
 8005c0c:	f000 fc6c 	bl	80064e8 <__mcmp>
 8005c10:	2800      	cmp	r0, #0
 8005c12:	da6a      	bge.n	8005cea <_dtoa_r+0x92a>
 8005c14:	2300      	movs	r3, #0
 8005c16:	4659      	mov	r1, fp
 8005c18:	220a      	movs	r2, #10
 8005c1a:	4628      	mov	r0, r5
 8005c1c:	f000 fa48 	bl	80060b0 <__multadd>
 8005c20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c22:	4683      	mov	fp, r0
 8005c24:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f000 8194 	beq.w	8005f56 <_dtoa_r+0xb96>
 8005c2e:	4631      	mov	r1, r6
 8005c30:	2300      	movs	r3, #0
 8005c32:	220a      	movs	r2, #10
 8005c34:	4628      	mov	r0, r5
 8005c36:	f000 fa3b 	bl	80060b0 <__multadd>
 8005c3a:	f1b9 0f00 	cmp.w	r9, #0
 8005c3e:	4606      	mov	r6, r0
 8005c40:	f300 8093 	bgt.w	8005d6a <_dtoa_r+0x9aa>
 8005c44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	dc57      	bgt.n	8005cfa <_dtoa_r+0x93a>
 8005c4a:	e08e      	b.n	8005d6a <_dtoa_r+0x9aa>
 8005c4c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005c4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005c52:	e757      	b.n	8005b04 <_dtoa_r+0x744>
 8005c54:	9b08      	ldr	r3, [sp, #32]
 8005c56:	1e5c      	subs	r4, r3, #1
 8005c58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c5a:	42a3      	cmp	r3, r4
 8005c5c:	bfb7      	itett	lt
 8005c5e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005c60:	1b1c      	subge	r4, r3, r4
 8005c62:	1ae2      	sublt	r2, r4, r3
 8005c64:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005c66:	bfbe      	ittt	lt
 8005c68:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005c6a:	189b      	addlt	r3, r3, r2
 8005c6c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005c6e:	9b08      	ldr	r3, [sp, #32]
 8005c70:	bfb8      	it	lt
 8005c72:	2400      	movlt	r4, #0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	bfbb      	ittet	lt
 8005c78:	9b06      	ldrlt	r3, [sp, #24]
 8005c7a:	9a08      	ldrlt	r2, [sp, #32]
 8005c7c:	9f06      	ldrge	r7, [sp, #24]
 8005c7e:	1a9f      	sublt	r7, r3, r2
 8005c80:	bfac      	ite	ge
 8005c82:	9b08      	ldrge	r3, [sp, #32]
 8005c84:	2300      	movlt	r3, #0
 8005c86:	e73f      	b.n	8005b08 <_dtoa_r+0x748>
 8005c88:	3fe00000 	.word	0x3fe00000
 8005c8c:	40240000 	.word	0x40240000
 8005c90:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005c92:	9f06      	ldr	r7, [sp, #24]
 8005c94:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005c96:	e742      	b.n	8005b1e <_dtoa_r+0x75e>
 8005c98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c9a:	e76b      	b.n	8005b74 <_dtoa_r+0x7b4>
 8005c9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	dc19      	bgt.n	8005cd6 <_dtoa_r+0x916>
 8005ca2:	9b04      	ldr	r3, [sp, #16]
 8005ca4:	b9bb      	cbnz	r3, 8005cd6 <_dtoa_r+0x916>
 8005ca6:	9b05      	ldr	r3, [sp, #20]
 8005ca8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005cac:	b99b      	cbnz	r3, 8005cd6 <_dtoa_r+0x916>
 8005cae:	9b05      	ldr	r3, [sp, #20]
 8005cb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005cb4:	0d1b      	lsrs	r3, r3, #20
 8005cb6:	051b      	lsls	r3, r3, #20
 8005cb8:	b183      	cbz	r3, 8005cdc <_dtoa_r+0x91c>
 8005cba:	f04f 0801 	mov.w	r8, #1
 8005cbe:	9b06      	ldr	r3, [sp, #24]
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	9306      	str	r3, [sp, #24]
 8005cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	9309      	str	r3, [sp, #36]	; 0x24
 8005cca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f47f af6a 	bne.w	8005ba6 <_dtoa_r+0x7e6>
 8005cd2:	2001      	movs	r0, #1
 8005cd4:	e76f      	b.n	8005bb6 <_dtoa_r+0x7f6>
 8005cd6:	f04f 0800 	mov.w	r8, #0
 8005cda:	e7f6      	b.n	8005cca <_dtoa_r+0x90a>
 8005cdc:	4698      	mov	r8, r3
 8005cde:	e7f4      	b.n	8005cca <_dtoa_r+0x90a>
 8005ce0:	f43f af7d 	beq.w	8005bde <_dtoa_r+0x81e>
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	301c      	adds	r0, #28
 8005ce8:	e772      	b.n	8005bd0 <_dtoa_r+0x810>
 8005cea:	9b08      	ldr	r3, [sp, #32]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	dc36      	bgt.n	8005d5e <_dtoa_r+0x99e>
 8005cf0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	dd33      	ble.n	8005d5e <_dtoa_r+0x99e>
 8005cf6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005cfa:	f1b9 0f00 	cmp.w	r9, #0
 8005cfe:	d10d      	bne.n	8005d1c <_dtoa_r+0x95c>
 8005d00:	4621      	mov	r1, r4
 8005d02:	464b      	mov	r3, r9
 8005d04:	2205      	movs	r2, #5
 8005d06:	4628      	mov	r0, r5
 8005d08:	f000 f9d2 	bl	80060b0 <__multadd>
 8005d0c:	4601      	mov	r1, r0
 8005d0e:	4604      	mov	r4, r0
 8005d10:	4658      	mov	r0, fp
 8005d12:	f000 fbe9 	bl	80064e8 <__mcmp>
 8005d16:	2800      	cmp	r0, #0
 8005d18:	f73f adb8 	bgt.w	800588c <_dtoa_r+0x4cc>
 8005d1c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005d1e:	9f03      	ldr	r7, [sp, #12]
 8005d20:	ea6f 0a03 	mvn.w	sl, r3
 8005d24:	f04f 0800 	mov.w	r8, #0
 8005d28:	4621      	mov	r1, r4
 8005d2a:	4628      	mov	r0, r5
 8005d2c:	f000 f99e 	bl	800606c <_Bfree>
 8005d30:	2e00      	cmp	r6, #0
 8005d32:	f43f aea7 	beq.w	8005a84 <_dtoa_r+0x6c4>
 8005d36:	f1b8 0f00 	cmp.w	r8, #0
 8005d3a:	d005      	beq.n	8005d48 <_dtoa_r+0x988>
 8005d3c:	45b0      	cmp	r8, r6
 8005d3e:	d003      	beq.n	8005d48 <_dtoa_r+0x988>
 8005d40:	4641      	mov	r1, r8
 8005d42:	4628      	mov	r0, r5
 8005d44:	f000 f992 	bl	800606c <_Bfree>
 8005d48:	4631      	mov	r1, r6
 8005d4a:	4628      	mov	r0, r5
 8005d4c:	f000 f98e 	bl	800606c <_Bfree>
 8005d50:	e698      	b.n	8005a84 <_dtoa_r+0x6c4>
 8005d52:	2400      	movs	r4, #0
 8005d54:	4626      	mov	r6, r4
 8005d56:	e7e1      	b.n	8005d1c <_dtoa_r+0x95c>
 8005d58:	46c2      	mov	sl, r8
 8005d5a:	4626      	mov	r6, r4
 8005d5c:	e596      	b.n	800588c <_dtoa_r+0x4cc>
 8005d5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	f000 80fd 	beq.w	8005f64 <_dtoa_r+0xba4>
 8005d6a:	2f00      	cmp	r7, #0
 8005d6c:	dd05      	ble.n	8005d7a <_dtoa_r+0x9ba>
 8005d6e:	4631      	mov	r1, r6
 8005d70:	463a      	mov	r2, r7
 8005d72:	4628      	mov	r0, r5
 8005d74:	f000 fb48 	bl	8006408 <__lshift>
 8005d78:	4606      	mov	r6, r0
 8005d7a:	f1b8 0f00 	cmp.w	r8, #0
 8005d7e:	d05c      	beq.n	8005e3a <_dtoa_r+0xa7a>
 8005d80:	4628      	mov	r0, r5
 8005d82:	6871      	ldr	r1, [r6, #4]
 8005d84:	f000 f932 	bl	8005fec <_Balloc>
 8005d88:	4607      	mov	r7, r0
 8005d8a:	b928      	cbnz	r0, 8005d98 <_dtoa_r+0x9d8>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005d92:	4b7f      	ldr	r3, [pc, #508]	; (8005f90 <_dtoa_r+0xbd0>)
 8005d94:	f7ff bb28 	b.w	80053e8 <_dtoa_r+0x28>
 8005d98:	6932      	ldr	r2, [r6, #16]
 8005d9a:	f106 010c 	add.w	r1, r6, #12
 8005d9e:	3202      	adds	r2, #2
 8005da0:	0092      	lsls	r2, r2, #2
 8005da2:	300c      	adds	r0, #12
 8005da4:	f000 f914 	bl	8005fd0 <memcpy>
 8005da8:	2201      	movs	r2, #1
 8005daa:	4639      	mov	r1, r7
 8005dac:	4628      	mov	r0, r5
 8005dae:	f000 fb2b 	bl	8006408 <__lshift>
 8005db2:	46b0      	mov	r8, r6
 8005db4:	4606      	mov	r6, r0
 8005db6:	9b03      	ldr	r3, [sp, #12]
 8005db8:	3301      	adds	r3, #1
 8005dba:	9308      	str	r3, [sp, #32]
 8005dbc:	9b03      	ldr	r3, [sp, #12]
 8005dbe:	444b      	add	r3, r9
 8005dc0:	930a      	str	r3, [sp, #40]	; 0x28
 8005dc2:	9b04      	ldr	r3, [sp, #16]
 8005dc4:	f003 0301 	and.w	r3, r3, #1
 8005dc8:	9309      	str	r3, [sp, #36]	; 0x24
 8005dca:	9b08      	ldr	r3, [sp, #32]
 8005dcc:	4621      	mov	r1, r4
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	4658      	mov	r0, fp
 8005dd2:	9304      	str	r3, [sp, #16]
 8005dd4:	f7ff fa68 	bl	80052a8 <quorem>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	4641      	mov	r1, r8
 8005ddc:	3330      	adds	r3, #48	; 0x30
 8005dde:	9006      	str	r0, [sp, #24]
 8005de0:	4658      	mov	r0, fp
 8005de2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005de4:	f000 fb80 	bl	80064e8 <__mcmp>
 8005de8:	4632      	mov	r2, r6
 8005dea:	4681      	mov	r9, r0
 8005dec:	4621      	mov	r1, r4
 8005dee:	4628      	mov	r0, r5
 8005df0:	f000 fb96 	bl	8006520 <__mdiff>
 8005df4:	68c2      	ldr	r2, [r0, #12]
 8005df6:	4607      	mov	r7, r0
 8005df8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005dfa:	bb02      	cbnz	r2, 8005e3e <_dtoa_r+0xa7e>
 8005dfc:	4601      	mov	r1, r0
 8005dfe:	4658      	mov	r0, fp
 8005e00:	f000 fb72 	bl	80064e8 <__mcmp>
 8005e04:	4602      	mov	r2, r0
 8005e06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e08:	4639      	mov	r1, r7
 8005e0a:	4628      	mov	r0, r5
 8005e0c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005e10:	f000 f92c 	bl	800606c <_Bfree>
 8005e14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e18:	9f08      	ldr	r7, [sp, #32]
 8005e1a:	ea43 0102 	orr.w	r1, r3, r2
 8005e1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e20:	430b      	orrs	r3, r1
 8005e22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e24:	d10d      	bne.n	8005e42 <_dtoa_r+0xa82>
 8005e26:	2b39      	cmp	r3, #57	; 0x39
 8005e28:	d029      	beq.n	8005e7e <_dtoa_r+0xabe>
 8005e2a:	f1b9 0f00 	cmp.w	r9, #0
 8005e2e:	dd01      	ble.n	8005e34 <_dtoa_r+0xa74>
 8005e30:	9b06      	ldr	r3, [sp, #24]
 8005e32:	3331      	adds	r3, #49	; 0x31
 8005e34:	9a04      	ldr	r2, [sp, #16]
 8005e36:	7013      	strb	r3, [r2, #0]
 8005e38:	e776      	b.n	8005d28 <_dtoa_r+0x968>
 8005e3a:	4630      	mov	r0, r6
 8005e3c:	e7b9      	b.n	8005db2 <_dtoa_r+0x9f2>
 8005e3e:	2201      	movs	r2, #1
 8005e40:	e7e2      	b.n	8005e08 <_dtoa_r+0xa48>
 8005e42:	f1b9 0f00 	cmp.w	r9, #0
 8005e46:	db06      	blt.n	8005e56 <_dtoa_r+0xa96>
 8005e48:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005e4a:	ea41 0909 	orr.w	r9, r1, r9
 8005e4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e50:	ea59 0101 	orrs.w	r1, r9, r1
 8005e54:	d120      	bne.n	8005e98 <_dtoa_r+0xad8>
 8005e56:	2a00      	cmp	r2, #0
 8005e58:	ddec      	ble.n	8005e34 <_dtoa_r+0xa74>
 8005e5a:	4659      	mov	r1, fp
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	4628      	mov	r0, r5
 8005e60:	9308      	str	r3, [sp, #32]
 8005e62:	f000 fad1 	bl	8006408 <__lshift>
 8005e66:	4621      	mov	r1, r4
 8005e68:	4683      	mov	fp, r0
 8005e6a:	f000 fb3d 	bl	80064e8 <__mcmp>
 8005e6e:	2800      	cmp	r0, #0
 8005e70:	9b08      	ldr	r3, [sp, #32]
 8005e72:	dc02      	bgt.n	8005e7a <_dtoa_r+0xaba>
 8005e74:	d1de      	bne.n	8005e34 <_dtoa_r+0xa74>
 8005e76:	07da      	lsls	r2, r3, #31
 8005e78:	d5dc      	bpl.n	8005e34 <_dtoa_r+0xa74>
 8005e7a:	2b39      	cmp	r3, #57	; 0x39
 8005e7c:	d1d8      	bne.n	8005e30 <_dtoa_r+0xa70>
 8005e7e:	2339      	movs	r3, #57	; 0x39
 8005e80:	9a04      	ldr	r2, [sp, #16]
 8005e82:	7013      	strb	r3, [r2, #0]
 8005e84:	463b      	mov	r3, r7
 8005e86:	461f      	mov	r7, r3
 8005e88:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	2a39      	cmp	r2, #57	; 0x39
 8005e90:	d050      	beq.n	8005f34 <_dtoa_r+0xb74>
 8005e92:	3201      	adds	r2, #1
 8005e94:	701a      	strb	r2, [r3, #0]
 8005e96:	e747      	b.n	8005d28 <_dtoa_r+0x968>
 8005e98:	2a00      	cmp	r2, #0
 8005e9a:	dd03      	ble.n	8005ea4 <_dtoa_r+0xae4>
 8005e9c:	2b39      	cmp	r3, #57	; 0x39
 8005e9e:	d0ee      	beq.n	8005e7e <_dtoa_r+0xabe>
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	e7c7      	b.n	8005e34 <_dtoa_r+0xa74>
 8005ea4:	9a08      	ldr	r2, [sp, #32]
 8005ea6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005ea8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005eac:	428a      	cmp	r2, r1
 8005eae:	d02a      	beq.n	8005f06 <_dtoa_r+0xb46>
 8005eb0:	4659      	mov	r1, fp
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	220a      	movs	r2, #10
 8005eb6:	4628      	mov	r0, r5
 8005eb8:	f000 f8fa 	bl	80060b0 <__multadd>
 8005ebc:	45b0      	cmp	r8, r6
 8005ebe:	4683      	mov	fp, r0
 8005ec0:	f04f 0300 	mov.w	r3, #0
 8005ec4:	f04f 020a 	mov.w	r2, #10
 8005ec8:	4641      	mov	r1, r8
 8005eca:	4628      	mov	r0, r5
 8005ecc:	d107      	bne.n	8005ede <_dtoa_r+0xb1e>
 8005ece:	f000 f8ef 	bl	80060b0 <__multadd>
 8005ed2:	4680      	mov	r8, r0
 8005ed4:	4606      	mov	r6, r0
 8005ed6:	9b08      	ldr	r3, [sp, #32]
 8005ed8:	3301      	adds	r3, #1
 8005eda:	9308      	str	r3, [sp, #32]
 8005edc:	e775      	b.n	8005dca <_dtoa_r+0xa0a>
 8005ede:	f000 f8e7 	bl	80060b0 <__multadd>
 8005ee2:	4631      	mov	r1, r6
 8005ee4:	4680      	mov	r8, r0
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	220a      	movs	r2, #10
 8005eea:	4628      	mov	r0, r5
 8005eec:	f000 f8e0 	bl	80060b0 <__multadd>
 8005ef0:	4606      	mov	r6, r0
 8005ef2:	e7f0      	b.n	8005ed6 <_dtoa_r+0xb16>
 8005ef4:	f1b9 0f00 	cmp.w	r9, #0
 8005ef8:	bfcc      	ite	gt
 8005efa:	464f      	movgt	r7, r9
 8005efc:	2701      	movle	r7, #1
 8005efe:	f04f 0800 	mov.w	r8, #0
 8005f02:	9a03      	ldr	r2, [sp, #12]
 8005f04:	4417      	add	r7, r2
 8005f06:	4659      	mov	r1, fp
 8005f08:	2201      	movs	r2, #1
 8005f0a:	4628      	mov	r0, r5
 8005f0c:	9308      	str	r3, [sp, #32]
 8005f0e:	f000 fa7b 	bl	8006408 <__lshift>
 8005f12:	4621      	mov	r1, r4
 8005f14:	4683      	mov	fp, r0
 8005f16:	f000 fae7 	bl	80064e8 <__mcmp>
 8005f1a:	2800      	cmp	r0, #0
 8005f1c:	dcb2      	bgt.n	8005e84 <_dtoa_r+0xac4>
 8005f1e:	d102      	bne.n	8005f26 <_dtoa_r+0xb66>
 8005f20:	9b08      	ldr	r3, [sp, #32]
 8005f22:	07db      	lsls	r3, r3, #31
 8005f24:	d4ae      	bmi.n	8005e84 <_dtoa_r+0xac4>
 8005f26:	463b      	mov	r3, r7
 8005f28:	461f      	mov	r7, r3
 8005f2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f2e:	2a30      	cmp	r2, #48	; 0x30
 8005f30:	d0fa      	beq.n	8005f28 <_dtoa_r+0xb68>
 8005f32:	e6f9      	b.n	8005d28 <_dtoa_r+0x968>
 8005f34:	9a03      	ldr	r2, [sp, #12]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d1a5      	bne.n	8005e86 <_dtoa_r+0xac6>
 8005f3a:	2331      	movs	r3, #49	; 0x31
 8005f3c:	f10a 0a01 	add.w	sl, sl, #1
 8005f40:	e779      	b.n	8005e36 <_dtoa_r+0xa76>
 8005f42:	4b14      	ldr	r3, [pc, #80]	; (8005f94 <_dtoa_r+0xbd4>)
 8005f44:	f7ff baa8 	b.w	8005498 <_dtoa_r+0xd8>
 8005f48:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f47f aa81 	bne.w	8005452 <_dtoa_r+0x92>
 8005f50:	4b11      	ldr	r3, [pc, #68]	; (8005f98 <_dtoa_r+0xbd8>)
 8005f52:	f7ff baa1 	b.w	8005498 <_dtoa_r+0xd8>
 8005f56:	f1b9 0f00 	cmp.w	r9, #0
 8005f5a:	dc03      	bgt.n	8005f64 <_dtoa_r+0xba4>
 8005f5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	f73f aecb 	bgt.w	8005cfa <_dtoa_r+0x93a>
 8005f64:	9f03      	ldr	r7, [sp, #12]
 8005f66:	4621      	mov	r1, r4
 8005f68:	4658      	mov	r0, fp
 8005f6a:	f7ff f99d 	bl	80052a8 <quorem>
 8005f6e:	9a03      	ldr	r2, [sp, #12]
 8005f70:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005f74:	f807 3b01 	strb.w	r3, [r7], #1
 8005f78:	1aba      	subs	r2, r7, r2
 8005f7a:	4591      	cmp	r9, r2
 8005f7c:	ddba      	ble.n	8005ef4 <_dtoa_r+0xb34>
 8005f7e:	4659      	mov	r1, fp
 8005f80:	2300      	movs	r3, #0
 8005f82:	220a      	movs	r2, #10
 8005f84:	4628      	mov	r0, r5
 8005f86:	f000 f893 	bl	80060b0 <__multadd>
 8005f8a:	4683      	mov	fp, r0
 8005f8c:	e7eb      	b.n	8005f66 <_dtoa_r+0xba6>
 8005f8e:	bf00      	nop
 8005f90:	080078f3 	.word	0x080078f3
 8005f94:	08007850 	.word	0x08007850
 8005f98:	08007874 	.word	0x08007874

08005f9c <_localeconv_r>:
 8005f9c:	4800      	ldr	r0, [pc, #0]	; (8005fa0 <_localeconv_r+0x4>)
 8005f9e:	4770      	bx	lr
 8005fa0:	2000016c 	.word	0x2000016c

08005fa4 <malloc>:
 8005fa4:	4b02      	ldr	r3, [pc, #8]	; (8005fb0 <malloc+0xc>)
 8005fa6:	4601      	mov	r1, r0
 8005fa8:	6818      	ldr	r0, [r3, #0]
 8005faa:	f000 bc1d 	b.w	80067e8 <_malloc_r>
 8005fae:	bf00      	nop
 8005fb0:	20000018 	.word	0x20000018

08005fb4 <memchr>:
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	b510      	push	{r4, lr}
 8005fb8:	b2c9      	uxtb	r1, r1
 8005fba:	4402      	add	r2, r0
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	d101      	bne.n	8005fc6 <memchr+0x12>
 8005fc2:	2000      	movs	r0, #0
 8005fc4:	e003      	b.n	8005fce <memchr+0x1a>
 8005fc6:	7804      	ldrb	r4, [r0, #0]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	428c      	cmp	r4, r1
 8005fcc:	d1f6      	bne.n	8005fbc <memchr+0x8>
 8005fce:	bd10      	pop	{r4, pc}

08005fd0 <memcpy>:
 8005fd0:	440a      	add	r2, r1
 8005fd2:	4291      	cmp	r1, r2
 8005fd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005fd8:	d100      	bne.n	8005fdc <memcpy+0xc>
 8005fda:	4770      	bx	lr
 8005fdc:	b510      	push	{r4, lr}
 8005fde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fe2:	4291      	cmp	r1, r2
 8005fe4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fe8:	d1f9      	bne.n	8005fde <memcpy+0xe>
 8005fea:	bd10      	pop	{r4, pc}

08005fec <_Balloc>:
 8005fec:	b570      	push	{r4, r5, r6, lr}
 8005fee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005ff0:	4604      	mov	r4, r0
 8005ff2:	460d      	mov	r5, r1
 8005ff4:	b976      	cbnz	r6, 8006014 <_Balloc+0x28>
 8005ff6:	2010      	movs	r0, #16
 8005ff8:	f7ff ffd4 	bl	8005fa4 <malloc>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	6260      	str	r0, [r4, #36]	; 0x24
 8006000:	b920      	cbnz	r0, 800600c <_Balloc+0x20>
 8006002:	2166      	movs	r1, #102	; 0x66
 8006004:	4b17      	ldr	r3, [pc, #92]	; (8006064 <_Balloc+0x78>)
 8006006:	4818      	ldr	r0, [pc, #96]	; (8006068 <_Balloc+0x7c>)
 8006008:	f000 fdce 	bl	8006ba8 <__assert_func>
 800600c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006010:	6006      	str	r6, [r0, #0]
 8006012:	60c6      	str	r6, [r0, #12]
 8006014:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006016:	68f3      	ldr	r3, [r6, #12]
 8006018:	b183      	cbz	r3, 800603c <_Balloc+0x50>
 800601a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006022:	b9b8      	cbnz	r0, 8006054 <_Balloc+0x68>
 8006024:	2101      	movs	r1, #1
 8006026:	fa01 f605 	lsl.w	r6, r1, r5
 800602a:	1d72      	adds	r2, r6, #5
 800602c:	4620      	mov	r0, r4
 800602e:	0092      	lsls	r2, r2, #2
 8006030:	f000 fb5e 	bl	80066f0 <_calloc_r>
 8006034:	b160      	cbz	r0, 8006050 <_Balloc+0x64>
 8006036:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800603a:	e00e      	b.n	800605a <_Balloc+0x6e>
 800603c:	2221      	movs	r2, #33	; 0x21
 800603e:	2104      	movs	r1, #4
 8006040:	4620      	mov	r0, r4
 8006042:	f000 fb55 	bl	80066f0 <_calloc_r>
 8006046:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006048:	60f0      	str	r0, [r6, #12]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1e4      	bne.n	800601a <_Balloc+0x2e>
 8006050:	2000      	movs	r0, #0
 8006052:	bd70      	pop	{r4, r5, r6, pc}
 8006054:	6802      	ldr	r2, [r0, #0]
 8006056:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800605a:	2300      	movs	r3, #0
 800605c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006060:	e7f7      	b.n	8006052 <_Balloc+0x66>
 8006062:	bf00      	nop
 8006064:	08007881 	.word	0x08007881
 8006068:	08007904 	.word	0x08007904

0800606c <_Bfree>:
 800606c:	b570      	push	{r4, r5, r6, lr}
 800606e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006070:	4605      	mov	r5, r0
 8006072:	460c      	mov	r4, r1
 8006074:	b976      	cbnz	r6, 8006094 <_Bfree+0x28>
 8006076:	2010      	movs	r0, #16
 8006078:	f7ff ff94 	bl	8005fa4 <malloc>
 800607c:	4602      	mov	r2, r0
 800607e:	6268      	str	r0, [r5, #36]	; 0x24
 8006080:	b920      	cbnz	r0, 800608c <_Bfree+0x20>
 8006082:	218a      	movs	r1, #138	; 0x8a
 8006084:	4b08      	ldr	r3, [pc, #32]	; (80060a8 <_Bfree+0x3c>)
 8006086:	4809      	ldr	r0, [pc, #36]	; (80060ac <_Bfree+0x40>)
 8006088:	f000 fd8e 	bl	8006ba8 <__assert_func>
 800608c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006090:	6006      	str	r6, [r0, #0]
 8006092:	60c6      	str	r6, [r0, #12]
 8006094:	b13c      	cbz	r4, 80060a6 <_Bfree+0x3a>
 8006096:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006098:	6862      	ldr	r2, [r4, #4]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80060a0:	6021      	str	r1, [r4, #0]
 80060a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80060a6:	bd70      	pop	{r4, r5, r6, pc}
 80060a8:	08007881 	.word	0x08007881
 80060ac:	08007904 	.word	0x08007904

080060b0 <__multadd>:
 80060b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060b4:	4607      	mov	r7, r0
 80060b6:	460c      	mov	r4, r1
 80060b8:	461e      	mov	r6, r3
 80060ba:	2000      	movs	r0, #0
 80060bc:	690d      	ldr	r5, [r1, #16]
 80060be:	f101 0c14 	add.w	ip, r1, #20
 80060c2:	f8dc 3000 	ldr.w	r3, [ip]
 80060c6:	3001      	adds	r0, #1
 80060c8:	b299      	uxth	r1, r3
 80060ca:	fb02 6101 	mla	r1, r2, r1, r6
 80060ce:	0c1e      	lsrs	r6, r3, #16
 80060d0:	0c0b      	lsrs	r3, r1, #16
 80060d2:	fb02 3306 	mla	r3, r2, r6, r3
 80060d6:	b289      	uxth	r1, r1
 80060d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80060dc:	4285      	cmp	r5, r0
 80060de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80060e2:	f84c 1b04 	str.w	r1, [ip], #4
 80060e6:	dcec      	bgt.n	80060c2 <__multadd+0x12>
 80060e8:	b30e      	cbz	r6, 800612e <__multadd+0x7e>
 80060ea:	68a3      	ldr	r3, [r4, #8]
 80060ec:	42ab      	cmp	r3, r5
 80060ee:	dc19      	bgt.n	8006124 <__multadd+0x74>
 80060f0:	6861      	ldr	r1, [r4, #4]
 80060f2:	4638      	mov	r0, r7
 80060f4:	3101      	adds	r1, #1
 80060f6:	f7ff ff79 	bl	8005fec <_Balloc>
 80060fa:	4680      	mov	r8, r0
 80060fc:	b928      	cbnz	r0, 800610a <__multadd+0x5a>
 80060fe:	4602      	mov	r2, r0
 8006100:	21b5      	movs	r1, #181	; 0xb5
 8006102:	4b0c      	ldr	r3, [pc, #48]	; (8006134 <__multadd+0x84>)
 8006104:	480c      	ldr	r0, [pc, #48]	; (8006138 <__multadd+0x88>)
 8006106:	f000 fd4f 	bl	8006ba8 <__assert_func>
 800610a:	6922      	ldr	r2, [r4, #16]
 800610c:	f104 010c 	add.w	r1, r4, #12
 8006110:	3202      	adds	r2, #2
 8006112:	0092      	lsls	r2, r2, #2
 8006114:	300c      	adds	r0, #12
 8006116:	f7ff ff5b 	bl	8005fd0 <memcpy>
 800611a:	4621      	mov	r1, r4
 800611c:	4638      	mov	r0, r7
 800611e:	f7ff ffa5 	bl	800606c <_Bfree>
 8006122:	4644      	mov	r4, r8
 8006124:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006128:	3501      	adds	r5, #1
 800612a:	615e      	str	r6, [r3, #20]
 800612c:	6125      	str	r5, [r4, #16]
 800612e:	4620      	mov	r0, r4
 8006130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006134:	080078f3 	.word	0x080078f3
 8006138:	08007904 	.word	0x08007904

0800613c <__hi0bits>:
 800613c:	0c02      	lsrs	r2, r0, #16
 800613e:	0412      	lsls	r2, r2, #16
 8006140:	4603      	mov	r3, r0
 8006142:	b9ca      	cbnz	r2, 8006178 <__hi0bits+0x3c>
 8006144:	0403      	lsls	r3, r0, #16
 8006146:	2010      	movs	r0, #16
 8006148:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800614c:	bf04      	itt	eq
 800614e:	021b      	lsleq	r3, r3, #8
 8006150:	3008      	addeq	r0, #8
 8006152:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006156:	bf04      	itt	eq
 8006158:	011b      	lsleq	r3, r3, #4
 800615a:	3004      	addeq	r0, #4
 800615c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006160:	bf04      	itt	eq
 8006162:	009b      	lsleq	r3, r3, #2
 8006164:	3002      	addeq	r0, #2
 8006166:	2b00      	cmp	r3, #0
 8006168:	db05      	blt.n	8006176 <__hi0bits+0x3a>
 800616a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800616e:	f100 0001 	add.w	r0, r0, #1
 8006172:	bf08      	it	eq
 8006174:	2020      	moveq	r0, #32
 8006176:	4770      	bx	lr
 8006178:	2000      	movs	r0, #0
 800617a:	e7e5      	b.n	8006148 <__hi0bits+0xc>

0800617c <__lo0bits>:
 800617c:	6803      	ldr	r3, [r0, #0]
 800617e:	4602      	mov	r2, r0
 8006180:	f013 0007 	ands.w	r0, r3, #7
 8006184:	d00b      	beq.n	800619e <__lo0bits+0x22>
 8006186:	07d9      	lsls	r1, r3, #31
 8006188:	d421      	bmi.n	80061ce <__lo0bits+0x52>
 800618a:	0798      	lsls	r0, r3, #30
 800618c:	bf49      	itett	mi
 800618e:	085b      	lsrmi	r3, r3, #1
 8006190:	089b      	lsrpl	r3, r3, #2
 8006192:	2001      	movmi	r0, #1
 8006194:	6013      	strmi	r3, [r2, #0]
 8006196:	bf5c      	itt	pl
 8006198:	2002      	movpl	r0, #2
 800619a:	6013      	strpl	r3, [r2, #0]
 800619c:	4770      	bx	lr
 800619e:	b299      	uxth	r1, r3
 80061a0:	b909      	cbnz	r1, 80061a6 <__lo0bits+0x2a>
 80061a2:	2010      	movs	r0, #16
 80061a4:	0c1b      	lsrs	r3, r3, #16
 80061a6:	b2d9      	uxtb	r1, r3
 80061a8:	b909      	cbnz	r1, 80061ae <__lo0bits+0x32>
 80061aa:	3008      	adds	r0, #8
 80061ac:	0a1b      	lsrs	r3, r3, #8
 80061ae:	0719      	lsls	r1, r3, #28
 80061b0:	bf04      	itt	eq
 80061b2:	091b      	lsreq	r3, r3, #4
 80061b4:	3004      	addeq	r0, #4
 80061b6:	0799      	lsls	r1, r3, #30
 80061b8:	bf04      	itt	eq
 80061ba:	089b      	lsreq	r3, r3, #2
 80061bc:	3002      	addeq	r0, #2
 80061be:	07d9      	lsls	r1, r3, #31
 80061c0:	d403      	bmi.n	80061ca <__lo0bits+0x4e>
 80061c2:	085b      	lsrs	r3, r3, #1
 80061c4:	f100 0001 	add.w	r0, r0, #1
 80061c8:	d003      	beq.n	80061d2 <__lo0bits+0x56>
 80061ca:	6013      	str	r3, [r2, #0]
 80061cc:	4770      	bx	lr
 80061ce:	2000      	movs	r0, #0
 80061d0:	4770      	bx	lr
 80061d2:	2020      	movs	r0, #32
 80061d4:	4770      	bx	lr
	...

080061d8 <__i2b>:
 80061d8:	b510      	push	{r4, lr}
 80061da:	460c      	mov	r4, r1
 80061dc:	2101      	movs	r1, #1
 80061de:	f7ff ff05 	bl	8005fec <_Balloc>
 80061e2:	4602      	mov	r2, r0
 80061e4:	b928      	cbnz	r0, 80061f2 <__i2b+0x1a>
 80061e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80061ea:	4b04      	ldr	r3, [pc, #16]	; (80061fc <__i2b+0x24>)
 80061ec:	4804      	ldr	r0, [pc, #16]	; (8006200 <__i2b+0x28>)
 80061ee:	f000 fcdb 	bl	8006ba8 <__assert_func>
 80061f2:	2301      	movs	r3, #1
 80061f4:	6144      	str	r4, [r0, #20]
 80061f6:	6103      	str	r3, [r0, #16]
 80061f8:	bd10      	pop	{r4, pc}
 80061fa:	bf00      	nop
 80061fc:	080078f3 	.word	0x080078f3
 8006200:	08007904 	.word	0x08007904

08006204 <__multiply>:
 8006204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006208:	4691      	mov	r9, r2
 800620a:	690a      	ldr	r2, [r1, #16]
 800620c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006210:	460c      	mov	r4, r1
 8006212:	429a      	cmp	r2, r3
 8006214:	bfbe      	ittt	lt
 8006216:	460b      	movlt	r3, r1
 8006218:	464c      	movlt	r4, r9
 800621a:	4699      	movlt	r9, r3
 800621c:	6927      	ldr	r7, [r4, #16]
 800621e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006222:	68a3      	ldr	r3, [r4, #8]
 8006224:	6861      	ldr	r1, [r4, #4]
 8006226:	eb07 060a 	add.w	r6, r7, sl
 800622a:	42b3      	cmp	r3, r6
 800622c:	b085      	sub	sp, #20
 800622e:	bfb8      	it	lt
 8006230:	3101      	addlt	r1, #1
 8006232:	f7ff fedb 	bl	8005fec <_Balloc>
 8006236:	b930      	cbnz	r0, 8006246 <__multiply+0x42>
 8006238:	4602      	mov	r2, r0
 800623a:	f240 115d 	movw	r1, #349	; 0x15d
 800623e:	4b43      	ldr	r3, [pc, #268]	; (800634c <__multiply+0x148>)
 8006240:	4843      	ldr	r0, [pc, #268]	; (8006350 <__multiply+0x14c>)
 8006242:	f000 fcb1 	bl	8006ba8 <__assert_func>
 8006246:	f100 0514 	add.w	r5, r0, #20
 800624a:	462b      	mov	r3, r5
 800624c:	2200      	movs	r2, #0
 800624e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006252:	4543      	cmp	r3, r8
 8006254:	d321      	bcc.n	800629a <__multiply+0x96>
 8006256:	f104 0314 	add.w	r3, r4, #20
 800625a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800625e:	f109 0314 	add.w	r3, r9, #20
 8006262:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006266:	9202      	str	r2, [sp, #8]
 8006268:	1b3a      	subs	r2, r7, r4
 800626a:	3a15      	subs	r2, #21
 800626c:	f022 0203 	bic.w	r2, r2, #3
 8006270:	3204      	adds	r2, #4
 8006272:	f104 0115 	add.w	r1, r4, #21
 8006276:	428f      	cmp	r7, r1
 8006278:	bf38      	it	cc
 800627a:	2204      	movcc	r2, #4
 800627c:	9201      	str	r2, [sp, #4]
 800627e:	9a02      	ldr	r2, [sp, #8]
 8006280:	9303      	str	r3, [sp, #12]
 8006282:	429a      	cmp	r2, r3
 8006284:	d80c      	bhi.n	80062a0 <__multiply+0x9c>
 8006286:	2e00      	cmp	r6, #0
 8006288:	dd03      	ble.n	8006292 <__multiply+0x8e>
 800628a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800628e:	2b00      	cmp	r3, #0
 8006290:	d059      	beq.n	8006346 <__multiply+0x142>
 8006292:	6106      	str	r6, [r0, #16]
 8006294:	b005      	add	sp, #20
 8006296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800629a:	f843 2b04 	str.w	r2, [r3], #4
 800629e:	e7d8      	b.n	8006252 <__multiply+0x4e>
 80062a0:	f8b3 a000 	ldrh.w	sl, [r3]
 80062a4:	f1ba 0f00 	cmp.w	sl, #0
 80062a8:	d023      	beq.n	80062f2 <__multiply+0xee>
 80062aa:	46a9      	mov	r9, r5
 80062ac:	f04f 0c00 	mov.w	ip, #0
 80062b0:	f104 0e14 	add.w	lr, r4, #20
 80062b4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80062b8:	f8d9 1000 	ldr.w	r1, [r9]
 80062bc:	fa1f fb82 	uxth.w	fp, r2
 80062c0:	b289      	uxth	r1, r1
 80062c2:	fb0a 110b 	mla	r1, sl, fp, r1
 80062c6:	4461      	add	r1, ip
 80062c8:	f8d9 c000 	ldr.w	ip, [r9]
 80062cc:	0c12      	lsrs	r2, r2, #16
 80062ce:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80062d2:	fb0a c202 	mla	r2, sl, r2, ip
 80062d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80062da:	b289      	uxth	r1, r1
 80062dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80062e0:	4577      	cmp	r7, lr
 80062e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80062e6:	f849 1b04 	str.w	r1, [r9], #4
 80062ea:	d8e3      	bhi.n	80062b4 <__multiply+0xb0>
 80062ec:	9a01      	ldr	r2, [sp, #4]
 80062ee:	f845 c002 	str.w	ip, [r5, r2]
 80062f2:	9a03      	ldr	r2, [sp, #12]
 80062f4:	3304      	adds	r3, #4
 80062f6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80062fa:	f1b9 0f00 	cmp.w	r9, #0
 80062fe:	d020      	beq.n	8006342 <__multiply+0x13e>
 8006300:	46ae      	mov	lr, r5
 8006302:	f04f 0a00 	mov.w	sl, #0
 8006306:	6829      	ldr	r1, [r5, #0]
 8006308:	f104 0c14 	add.w	ip, r4, #20
 800630c:	f8bc b000 	ldrh.w	fp, [ip]
 8006310:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006314:	b289      	uxth	r1, r1
 8006316:	fb09 220b 	mla	r2, r9, fp, r2
 800631a:	4492      	add	sl, r2
 800631c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006320:	f84e 1b04 	str.w	r1, [lr], #4
 8006324:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006328:	f8be 1000 	ldrh.w	r1, [lr]
 800632c:	0c12      	lsrs	r2, r2, #16
 800632e:	fb09 1102 	mla	r1, r9, r2, r1
 8006332:	4567      	cmp	r7, ip
 8006334:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006338:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800633c:	d8e6      	bhi.n	800630c <__multiply+0x108>
 800633e:	9a01      	ldr	r2, [sp, #4]
 8006340:	50a9      	str	r1, [r5, r2]
 8006342:	3504      	adds	r5, #4
 8006344:	e79b      	b.n	800627e <__multiply+0x7a>
 8006346:	3e01      	subs	r6, #1
 8006348:	e79d      	b.n	8006286 <__multiply+0x82>
 800634a:	bf00      	nop
 800634c:	080078f3 	.word	0x080078f3
 8006350:	08007904 	.word	0x08007904

08006354 <__pow5mult>:
 8006354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006358:	4615      	mov	r5, r2
 800635a:	f012 0203 	ands.w	r2, r2, #3
 800635e:	4606      	mov	r6, r0
 8006360:	460f      	mov	r7, r1
 8006362:	d007      	beq.n	8006374 <__pow5mult+0x20>
 8006364:	4c25      	ldr	r4, [pc, #148]	; (80063fc <__pow5mult+0xa8>)
 8006366:	3a01      	subs	r2, #1
 8006368:	2300      	movs	r3, #0
 800636a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800636e:	f7ff fe9f 	bl	80060b0 <__multadd>
 8006372:	4607      	mov	r7, r0
 8006374:	10ad      	asrs	r5, r5, #2
 8006376:	d03d      	beq.n	80063f4 <__pow5mult+0xa0>
 8006378:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800637a:	b97c      	cbnz	r4, 800639c <__pow5mult+0x48>
 800637c:	2010      	movs	r0, #16
 800637e:	f7ff fe11 	bl	8005fa4 <malloc>
 8006382:	4602      	mov	r2, r0
 8006384:	6270      	str	r0, [r6, #36]	; 0x24
 8006386:	b928      	cbnz	r0, 8006394 <__pow5mult+0x40>
 8006388:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800638c:	4b1c      	ldr	r3, [pc, #112]	; (8006400 <__pow5mult+0xac>)
 800638e:	481d      	ldr	r0, [pc, #116]	; (8006404 <__pow5mult+0xb0>)
 8006390:	f000 fc0a 	bl	8006ba8 <__assert_func>
 8006394:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006398:	6004      	str	r4, [r0, #0]
 800639a:	60c4      	str	r4, [r0, #12]
 800639c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80063a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80063a4:	b94c      	cbnz	r4, 80063ba <__pow5mult+0x66>
 80063a6:	f240 2171 	movw	r1, #625	; 0x271
 80063aa:	4630      	mov	r0, r6
 80063ac:	f7ff ff14 	bl	80061d8 <__i2b>
 80063b0:	2300      	movs	r3, #0
 80063b2:	4604      	mov	r4, r0
 80063b4:	f8c8 0008 	str.w	r0, [r8, #8]
 80063b8:	6003      	str	r3, [r0, #0]
 80063ba:	f04f 0900 	mov.w	r9, #0
 80063be:	07eb      	lsls	r3, r5, #31
 80063c0:	d50a      	bpl.n	80063d8 <__pow5mult+0x84>
 80063c2:	4639      	mov	r1, r7
 80063c4:	4622      	mov	r2, r4
 80063c6:	4630      	mov	r0, r6
 80063c8:	f7ff ff1c 	bl	8006204 <__multiply>
 80063cc:	4680      	mov	r8, r0
 80063ce:	4639      	mov	r1, r7
 80063d0:	4630      	mov	r0, r6
 80063d2:	f7ff fe4b 	bl	800606c <_Bfree>
 80063d6:	4647      	mov	r7, r8
 80063d8:	106d      	asrs	r5, r5, #1
 80063da:	d00b      	beq.n	80063f4 <__pow5mult+0xa0>
 80063dc:	6820      	ldr	r0, [r4, #0]
 80063de:	b938      	cbnz	r0, 80063f0 <__pow5mult+0x9c>
 80063e0:	4622      	mov	r2, r4
 80063e2:	4621      	mov	r1, r4
 80063e4:	4630      	mov	r0, r6
 80063e6:	f7ff ff0d 	bl	8006204 <__multiply>
 80063ea:	6020      	str	r0, [r4, #0]
 80063ec:	f8c0 9000 	str.w	r9, [r0]
 80063f0:	4604      	mov	r4, r0
 80063f2:	e7e4      	b.n	80063be <__pow5mult+0x6a>
 80063f4:	4638      	mov	r0, r7
 80063f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063fa:	bf00      	nop
 80063fc:	08007a50 	.word	0x08007a50
 8006400:	08007881 	.word	0x08007881
 8006404:	08007904 	.word	0x08007904

08006408 <__lshift>:
 8006408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800640c:	460c      	mov	r4, r1
 800640e:	4607      	mov	r7, r0
 8006410:	4691      	mov	r9, r2
 8006412:	6923      	ldr	r3, [r4, #16]
 8006414:	6849      	ldr	r1, [r1, #4]
 8006416:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800641a:	68a3      	ldr	r3, [r4, #8]
 800641c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006420:	f108 0601 	add.w	r6, r8, #1
 8006424:	42b3      	cmp	r3, r6
 8006426:	db0b      	blt.n	8006440 <__lshift+0x38>
 8006428:	4638      	mov	r0, r7
 800642a:	f7ff fddf 	bl	8005fec <_Balloc>
 800642e:	4605      	mov	r5, r0
 8006430:	b948      	cbnz	r0, 8006446 <__lshift+0x3e>
 8006432:	4602      	mov	r2, r0
 8006434:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006438:	4b29      	ldr	r3, [pc, #164]	; (80064e0 <__lshift+0xd8>)
 800643a:	482a      	ldr	r0, [pc, #168]	; (80064e4 <__lshift+0xdc>)
 800643c:	f000 fbb4 	bl	8006ba8 <__assert_func>
 8006440:	3101      	adds	r1, #1
 8006442:	005b      	lsls	r3, r3, #1
 8006444:	e7ee      	b.n	8006424 <__lshift+0x1c>
 8006446:	2300      	movs	r3, #0
 8006448:	f100 0114 	add.w	r1, r0, #20
 800644c:	f100 0210 	add.w	r2, r0, #16
 8006450:	4618      	mov	r0, r3
 8006452:	4553      	cmp	r3, sl
 8006454:	db37      	blt.n	80064c6 <__lshift+0xbe>
 8006456:	6920      	ldr	r0, [r4, #16]
 8006458:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800645c:	f104 0314 	add.w	r3, r4, #20
 8006460:	f019 091f 	ands.w	r9, r9, #31
 8006464:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006468:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800646c:	d02f      	beq.n	80064ce <__lshift+0xc6>
 800646e:	468a      	mov	sl, r1
 8006470:	f04f 0c00 	mov.w	ip, #0
 8006474:	f1c9 0e20 	rsb	lr, r9, #32
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	fa02 f209 	lsl.w	r2, r2, r9
 800647e:	ea42 020c 	orr.w	r2, r2, ip
 8006482:	f84a 2b04 	str.w	r2, [sl], #4
 8006486:	f853 2b04 	ldr.w	r2, [r3], #4
 800648a:	4298      	cmp	r0, r3
 800648c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006490:	d8f2      	bhi.n	8006478 <__lshift+0x70>
 8006492:	1b03      	subs	r3, r0, r4
 8006494:	3b15      	subs	r3, #21
 8006496:	f023 0303 	bic.w	r3, r3, #3
 800649a:	3304      	adds	r3, #4
 800649c:	f104 0215 	add.w	r2, r4, #21
 80064a0:	4290      	cmp	r0, r2
 80064a2:	bf38      	it	cc
 80064a4:	2304      	movcc	r3, #4
 80064a6:	f841 c003 	str.w	ip, [r1, r3]
 80064aa:	f1bc 0f00 	cmp.w	ip, #0
 80064ae:	d001      	beq.n	80064b4 <__lshift+0xac>
 80064b0:	f108 0602 	add.w	r6, r8, #2
 80064b4:	3e01      	subs	r6, #1
 80064b6:	4638      	mov	r0, r7
 80064b8:	4621      	mov	r1, r4
 80064ba:	612e      	str	r6, [r5, #16]
 80064bc:	f7ff fdd6 	bl	800606c <_Bfree>
 80064c0:	4628      	mov	r0, r5
 80064c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80064ca:	3301      	adds	r3, #1
 80064cc:	e7c1      	b.n	8006452 <__lshift+0x4a>
 80064ce:	3904      	subs	r1, #4
 80064d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80064d4:	4298      	cmp	r0, r3
 80064d6:	f841 2f04 	str.w	r2, [r1, #4]!
 80064da:	d8f9      	bhi.n	80064d0 <__lshift+0xc8>
 80064dc:	e7ea      	b.n	80064b4 <__lshift+0xac>
 80064de:	bf00      	nop
 80064e0:	080078f3 	.word	0x080078f3
 80064e4:	08007904 	.word	0x08007904

080064e8 <__mcmp>:
 80064e8:	4603      	mov	r3, r0
 80064ea:	690a      	ldr	r2, [r1, #16]
 80064ec:	6900      	ldr	r0, [r0, #16]
 80064ee:	b530      	push	{r4, r5, lr}
 80064f0:	1a80      	subs	r0, r0, r2
 80064f2:	d10d      	bne.n	8006510 <__mcmp+0x28>
 80064f4:	3314      	adds	r3, #20
 80064f6:	3114      	adds	r1, #20
 80064f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80064fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006500:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006504:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006508:	4295      	cmp	r5, r2
 800650a:	d002      	beq.n	8006512 <__mcmp+0x2a>
 800650c:	d304      	bcc.n	8006518 <__mcmp+0x30>
 800650e:	2001      	movs	r0, #1
 8006510:	bd30      	pop	{r4, r5, pc}
 8006512:	42a3      	cmp	r3, r4
 8006514:	d3f4      	bcc.n	8006500 <__mcmp+0x18>
 8006516:	e7fb      	b.n	8006510 <__mcmp+0x28>
 8006518:	f04f 30ff 	mov.w	r0, #4294967295
 800651c:	e7f8      	b.n	8006510 <__mcmp+0x28>
	...

08006520 <__mdiff>:
 8006520:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006524:	460d      	mov	r5, r1
 8006526:	4607      	mov	r7, r0
 8006528:	4611      	mov	r1, r2
 800652a:	4628      	mov	r0, r5
 800652c:	4614      	mov	r4, r2
 800652e:	f7ff ffdb 	bl	80064e8 <__mcmp>
 8006532:	1e06      	subs	r6, r0, #0
 8006534:	d111      	bne.n	800655a <__mdiff+0x3a>
 8006536:	4631      	mov	r1, r6
 8006538:	4638      	mov	r0, r7
 800653a:	f7ff fd57 	bl	8005fec <_Balloc>
 800653e:	4602      	mov	r2, r0
 8006540:	b928      	cbnz	r0, 800654e <__mdiff+0x2e>
 8006542:	f240 2132 	movw	r1, #562	; 0x232
 8006546:	4b3a      	ldr	r3, [pc, #232]	; (8006630 <__mdiff+0x110>)
 8006548:	483a      	ldr	r0, [pc, #232]	; (8006634 <__mdiff+0x114>)
 800654a:	f000 fb2d 	bl	8006ba8 <__assert_func>
 800654e:	2301      	movs	r3, #1
 8006550:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006554:	4610      	mov	r0, r2
 8006556:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800655a:	bfa4      	itt	ge
 800655c:	4623      	movge	r3, r4
 800655e:	462c      	movge	r4, r5
 8006560:	4638      	mov	r0, r7
 8006562:	6861      	ldr	r1, [r4, #4]
 8006564:	bfa6      	itte	ge
 8006566:	461d      	movge	r5, r3
 8006568:	2600      	movge	r6, #0
 800656a:	2601      	movlt	r6, #1
 800656c:	f7ff fd3e 	bl	8005fec <_Balloc>
 8006570:	4602      	mov	r2, r0
 8006572:	b918      	cbnz	r0, 800657c <__mdiff+0x5c>
 8006574:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006578:	4b2d      	ldr	r3, [pc, #180]	; (8006630 <__mdiff+0x110>)
 800657a:	e7e5      	b.n	8006548 <__mdiff+0x28>
 800657c:	f102 0814 	add.w	r8, r2, #20
 8006580:	46c2      	mov	sl, r8
 8006582:	f04f 0c00 	mov.w	ip, #0
 8006586:	6927      	ldr	r7, [r4, #16]
 8006588:	60c6      	str	r6, [r0, #12]
 800658a:	692e      	ldr	r6, [r5, #16]
 800658c:	f104 0014 	add.w	r0, r4, #20
 8006590:	f105 0914 	add.w	r9, r5, #20
 8006594:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006598:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800659c:	3410      	adds	r4, #16
 800659e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80065a2:	f859 3b04 	ldr.w	r3, [r9], #4
 80065a6:	fa1f f18b 	uxth.w	r1, fp
 80065aa:	448c      	add	ip, r1
 80065ac:	b299      	uxth	r1, r3
 80065ae:	0c1b      	lsrs	r3, r3, #16
 80065b0:	ebac 0101 	sub.w	r1, ip, r1
 80065b4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80065b8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80065bc:	b289      	uxth	r1, r1
 80065be:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80065c2:	454e      	cmp	r6, r9
 80065c4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80065c8:	f84a 3b04 	str.w	r3, [sl], #4
 80065cc:	d8e7      	bhi.n	800659e <__mdiff+0x7e>
 80065ce:	1b73      	subs	r3, r6, r5
 80065d0:	3b15      	subs	r3, #21
 80065d2:	f023 0303 	bic.w	r3, r3, #3
 80065d6:	3515      	adds	r5, #21
 80065d8:	3304      	adds	r3, #4
 80065da:	42ae      	cmp	r6, r5
 80065dc:	bf38      	it	cc
 80065de:	2304      	movcc	r3, #4
 80065e0:	4418      	add	r0, r3
 80065e2:	4443      	add	r3, r8
 80065e4:	461e      	mov	r6, r3
 80065e6:	4605      	mov	r5, r0
 80065e8:	4575      	cmp	r5, lr
 80065ea:	d30e      	bcc.n	800660a <__mdiff+0xea>
 80065ec:	f10e 0103 	add.w	r1, lr, #3
 80065f0:	1a09      	subs	r1, r1, r0
 80065f2:	f021 0103 	bic.w	r1, r1, #3
 80065f6:	3803      	subs	r0, #3
 80065f8:	4586      	cmp	lr, r0
 80065fa:	bf38      	it	cc
 80065fc:	2100      	movcc	r1, #0
 80065fe:	4419      	add	r1, r3
 8006600:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006604:	b18b      	cbz	r3, 800662a <__mdiff+0x10a>
 8006606:	6117      	str	r7, [r2, #16]
 8006608:	e7a4      	b.n	8006554 <__mdiff+0x34>
 800660a:	f855 8b04 	ldr.w	r8, [r5], #4
 800660e:	fa1f f188 	uxth.w	r1, r8
 8006612:	4461      	add	r1, ip
 8006614:	140c      	asrs	r4, r1, #16
 8006616:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800661a:	b289      	uxth	r1, r1
 800661c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006620:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006624:	f846 1b04 	str.w	r1, [r6], #4
 8006628:	e7de      	b.n	80065e8 <__mdiff+0xc8>
 800662a:	3f01      	subs	r7, #1
 800662c:	e7e8      	b.n	8006600 <__mdiff+0xe0>
 800662e:	bf00      	nop
 8006630:	080078f3 	.word	0x080078f3
 8006634:	08007904 	.word	0x08007904

08006638 <__d2b>:
 8006638:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800663c:	2101      	movs	r1, #1
 800663e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006642:	4690      	mov	r8, r2
 8006644:	461d      	mov	r5, r3
 8006646:	f7ff fcd1 	bl	8005fec <_Balloc>
 800664a:	4604      	mov	r4, r0
 800664c:	b930      	cbnz	r0, 800665c <__d2b+0x24>
 800664e:	4602      	mov	r2, r0
 8006650:	f240 310a 	movw	r1, #778	; 0x30a
 8006654:	4b24      	ldr	r3, [pc, #144]	; (80066e8 <__d2b+0xb0>)
 8006656:	4825      	ldr	r0, [pc, #148]	; (80066ec <__d2b+0xb4>)
 8006658:	f000 faa6 	bl	8006ba8 <__assert_func>
 800665c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006660:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006664:	bb2d      	cbnz	r5, 80066b2 <__d2b+0x7a>
 8006666:	9301      	str	r3, [sp, #4]
 8006668:	f1b8 0300 	subs.w	r3, r8, #0
 800666c:	d026      	beq.n	80066bc <__d2b+0x84>
 800666e:	4668      	mov	r0, sp
 8006670:	9300      	str	r3, [sp, #0]
 8006672:	f7ff fd83 	bl	800617c <__lo0bits>
 8006676:	9900      	ldr	r1, [sp, #0]
 8006678:	b1f0      	cbz	r0, 80066b8 <__d2b+0x80>
 800667a:	9a01      	ldr	r2, [sp, #4]
 800667c:	f1c0 0320 	rsb	r3, r0, #32
 8006680:	fa02 f303 	lsl.w	r3, r2, r3
 8006684:	430b      	orrs	r3, r1
 8006686:	40c2      	lsrs	r2, r0
 8006688:	6163      	str	r3, [r4, #20]
 800668a:	9201      	str	r2, [sp, #4]
 800668c:	9b01      	ldr	r3, [sp, #4]
 800668e:	2b00      	cmp	r3, #0
 8006690:	bf14      	ite	ne
 8006692:	2102      	movne	r1, #2
 8006694:	2101      	moveq	r1, #1
 8006696:	61a3      	str	r3, [r4, #24]
 8006698:	6121      	str	r1, [r4, #16]
 800669a:	b1c5      	cbz	r5, 80066ce <__d2b+0x96>
 800669c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80066a0:	4405      	add	r5, r0
 80066a2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80066a6:	603d      	str	r5, [r7, #0]
 80066a8:	6030      	str	r0, [r6, #0]
 80066aa:	4620      	mov	r0, r4
 80066ac:	b002      	add	sp, #8
 80066ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066b6:	e7d6      	b.n	8006666 <__d2b+0x2e>
 80066b8:	6161      	str	r1, [r4, #20]
 80066ba:	e7e7      	b.n	800668c <__d2b+0x54>
 80066bc:	a801      	add	r0, sp, #4
 80066be:	f7ff fd5d 	bl	800617c <__lo0bits>
 80066c2:	2101      	movs	r1, #1
 80066c4:	9b01      	ldr	r3, [sp, #4]
 80066c6:	6121      	str	r1, [r4, #16]
 80066c8:	6163      	str	r3, [r4, #20]
 80066ca:	3020      	adds	r0, #32
 80066cc:	e7e5      	b.n	800669a <__d2b+0x62>
 80066ce:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80066d2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80066d6:	6038      	str	r0, [r7, #0]
 80066d8:	6918      	ldr	r0, [r3, #16]
 80066da:	f7ff fd2f 	bl	800613c <__hi0bits>
 80066de:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80066e2:	6031      	str	r1, [r6, #0]
 80066e4:	e7e1      	b.n	80066aa <__d2b+0x72>
 80066e6:	bf00      	nop
 80066e8:	080078f3 	.word	0x080078f3
 80066ec:	08007904 	.word	0x08007904

080066f0 <_calloc_r>:
 80066f0:	b570      	push	{r4, r5, r6, lr}
 80066f2:	fba1 5402 	umull	r5, r4, r1, r2
 80066f6:	b934      	cbnz	r4, 8006706 <_calloc_r+0x16>
 80066f8:	4629      	mov	r1, r5
 80066fa:	f000 f875 	bl	80067e8 <_malloc_r>
 80066fe:	4606      	mov	r6, r0
 8006700:	b928      	cbnz	r0, 800670e <_calloc_r+0x1e>
 8006702:	4630      	mov	r0, r6
 8006704:	bd70      	pop	{r4, r5, r6, pc}
 8006706:	220c      	movs	r2, #12
 8006708:	2600      	movs	r6, #0
 800670a:	6002      	str	r2, [r0, #0]
 800670c:	e7f9      	b.n	8006702 <_calloc_r+0x12>
 800670e:	462a      	mov	r2, r5
 8006710:	4621      	mov	r1, r4
 8006712:	f7fe f941 	bl	8004998 <memset>
 8006716:	e7f4      	b.n	8006702 <_calloc_r+0x12>

08006718 <_free_r>:
 8006718:	b538      	push	{r3, r4, r5, lr}
 800671a:	4605      	mov	r5, r0
 800671c:	2900      	cmp	r1, #0
 800671e:	d040      	beq.n	80067a2 <_free_r+0x8a>
 8006720:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006724:	1f0c      	subs	r4, r1, #4
 8006726:	2b00      	cmp	r3, #0
 8006728:	bfb8      	it	lt
 800672a:	18e4      	addlt	r4, r4, r3
 800672c:	f000 fa98 	bl	8006c60 <__malloc_lock>
 8006730:	4a1c      	ldr	r2, [pc, #112]	; (80067a4 <_free_r+0x8c>)
 8006732:	6813      	ldr	r3, [r2, #0]
 8006734:	b933      	cbnz	r3, 8006744 <_free_r+0x2c>
 8006736:	6063      	str	r3, [r4, #4]
 8006738:	6014      	str	r4, [r2, #0]
 800673a:	4628      	mov	r0, r5
 800673c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006740:	f000 ba94 	b.w	8006c6c <__malloc_unlock>
 8006744:	42a3      	cmp	r3, r4
 8006746:	d908      	bls.n	800675a <_free_r+0x42>
 8006748:	6820      	ldr	r0, [r4, #0]
 800674a:	1821      	adds	r1, r4, r0
 800674c:	428b      	cmp	r3, r1
 800674e:	bf01      	itttt	eq
 8006750:	6819      	ldreq	r1, [r3, #0]
 8006752:	685b      	ldreq	r3, [r3, #4]
 8006754:	1809      	addeq	r1, r1, r0
 8006756:	6021      	streq	r1, [r4, #0]
 8006758:	e7ed      	b.n	8006736 <_free_r+0x1e>
 800675a:	461a      	mov	r2, r3
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	b10b      	cbz	r3, 8006764 <_free_r+0x4c>
 8006760:	42a3      	cmp	r3, r4
 8006762:	d9fa      	bls.n	800675a <_free_r+0x42>
 8006764:	6811      	ldr	r1, [r2, #0]
 8006766:	1850      	adds	r0, r2, r1
 8006768:	42a0      	cmp	r0, r4
 800676a:	d10b      	bne.n	8006784 <_free_r+0x6c>
 800676c:	6820      	ldr	r0, [r4, #0]
 800676e:	4401      	add	r1, r0
 8006770:	1850      	adds	r0, r2, r1
 8006772:	4283      	cmp	r3, r0
 8006774:	6011      	str	r1, [r2, #0]
 8006776:	d1e0      	bne.n	800673a <_free_r+0x22>
 8006778:	6818      	ldr	r0, [r3, #0]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	4401      	add	r1, r0
 800677e:	6011      	str	r1, [r2, #0]
 8006780:	6053      	str	r3, [r2, #4]
 8006782:	e7da      	b.n	800673a <_free_r+0x22>
 8006784:	d902      	bls.n	800678c <_free_r+0x74>
 8006786:	230c      	movs	r3, #12
 8006788:	602b      	str	r3, [r5, #0]
 800678a:	e7d6      	b.n	800673a <_free_r+0x22>
 800678c:	6820      	ldr	r0, [r4, #0]
 800678e:	1821      	adds	r1, r4, r0
 8006790:	428b      	cmp	r3, r1
 8006792:	bf01      	itttt	eq
 8006794:	6819      	ldreq	r1, [r3, #0]
 8006796:	685b      	ldreq	r3, [r3, #4]
 8006798:	1809      	addeq	r1, r1, r0
 800679a:	6021      	streq	r1, [r4, #0]
 800679c:	6063      	str	r3, [r4, #4]
 800679e:	6054      	str	r4, [r2, #4]
 80067a0:	e7cb      	b.n	800673a <_free_r+0x22>
 80067a2:	bd38      	pop	{r3, r4, r5, pc}
 80067a4:	20000338 	.word	0x20000338

080067a8 <sbrk_aligned>:
 80067a8:	b570      	push	{r4, r5, r6, lr}
 80067aa:	4e0e      	ldr	r6, [pc, #56]	; (80067e4 <sbrk_aligned+0x3c>)
 80067ac:	460c      	mov	r4, r1
 80067ae:	6831      	ldr	r1, [r6, #0]
 80067b0:	4605      	mov	r5, r0
 80067b2:	b911      	cbnz	r1, 80067ba <sbrk_aligned+0x12>
 80067b4:	f000 f9e8 	bl	8006b88 <_sbrk_r>
 80067b8:	6030      	str	r0, [r6, #0]
 80067ba:	4621      	mov	r1, r4
 80067bc:	4628      	mov	r0, r5
 80067be:	f000 f9e3 	bl	8006b88 <_sbrk_r>
 80067c2:	1c43      	adds	r3, r0, #1
 80067c4:	d00a      	beq.n	80067dc <sbrk_aligned+0x34>
 80067c6:	1cc4      	adds	r4, r0, #3
 80067c8:	f024 0403 	bic.w	r4, r4, #3
 80067cc:	42a0      	cmp	r0, r4
 80067ce:	d007      	beq.n	80067e0 <sbrk_aligned+0x38>
 80067d0:	1a21      	subs	r1, r4, r0
 80067d2:	4628      	mov	r0, r5
 80067d4:	f000 f9d8 	bl	8006b88 <_sbrk_r>
 80067d8:	3001      	adds	r0, #1
 80067da:	d101      	bne.n	80067e0 <sbrk_aligned+0x38>
 80067dc:	f04f 34ff 	mov.w	r4, #4294967295
 80067e0:	4620      	mov	r0, r4
 80067e2:	bd70      	pop	{r4, r5, r6, pc}
 80067e4:	2000033c 	.word	0x2000033c

080067e8 <_malloc_r>:
 80067e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067ec:	1ccd      	adds	r5, r1, #3
 80067ee:	f025 0503 	bic.w	r5, r5, #3
 80067f2:	3508      	adds	r5, #8
 80067f4:	2d0c      	cmp	r5, #12
 80067f6:	bf38      	it	cc
 80067f8:	250c      	movcc	r5, #12
 80067fa:	2d00      	cmp	r5, #0
 80067fc:	4607      	mov	r7, r0
 80067fe:	db01      	blt.n	8006804 <_malloc_r+0x1c>
 8006800:	42a9      	cmp	r1, r5
 8006802:	d905      	bls.n	8006810 <_malloc_r+0x28>
 8006804:	230c      	movs	r3, #12
 8006806:	2600      	movs	r6, #0
 8006808:	603b      	str	r3, [r7, #0]
 800680a:	4630      	mov	r0, r6
 800680c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006810:	4e2e      	ldr	r6, [pc, #184]	; (80068cc <_malloc_r+0xe4>)
 8006812:	f000 fa25 	bl	8006c60 <__malloc_lock>
 8006816:	6833      	ldr	r3, [r6, #0]
 8006818:	461c      	mov	r4, r3
 800681a:	bb34      	cbnz	r4, 800686a <_malloc_r+0x82>
 800681c:	4629      	mov	r1, r5
 800681e:	4638      	mov	r0, r7
 8006820:	f7ff ffc2 	bl	80067a8 <sbrk_aligned>
 8006824:	1c43      	adds	r3, r0, #1
 8006826:	4604      	mov	r4, r0
 8006828:	d14d      	bne.n	80068c6 <_malloc_r+0xde>
 800682a:	6834      	ldr	r4, [r6, #0]
 800682c:	4626      	mov	r6, r4
 800682e:	2e00      	cmp	r6, #0
 8006830:	d140      	bne.n	80068b4 <_malloc_r+0xcc>
 8006832:	6823      	ldr	r3, [r4, #0]
 8006834:	4631      	mov	r1, r6
 8006836:	4638      	mov	r0, r7
 8006838:	eb04 0803 	add.w	r8, r4, r3
 800683c:	f000 f9a4 	bl	8006b88 <_sbrk_r>
 8006840:	4580      	cmp	r8, r0
 8006842:	d13a      	bne.n	80068ba <_malloc_r+0xd2>
 8006844:	6821      	ldr	r1, [r4, #0]
 8006846:	3503      	adds	r5, #3
 8006848:	1a6d      	subs	r5, r5, r1
 800684a:	f025 0503 	bic.w	r5, r5, #3
 800684e:	3508      	adds	r5, #8
 8006850:	2d0c      	cmp	r5, #12
 8006852:	bf38      	it	cc
 8006854:	250c      	movcc	r5, #12
 8006856:	4638      	mov	r0, r7
 8006858:	4629      	mov	r1, r5
 800685a:	f7ff ffa5 	bl	80067a8 <sbrk_aligned>
 800685e:	3001      	adds	r0, #1
 8006860:	d02b      	beq.n	80068ba <_malloc_r+0xd2>
 8006862:	6823      	ldr	r3, [r4, #0]
 8006864:	442b      	add	r3, r5
 8006866:	6023      	str	r3, [r4, #0]
 8006868:	e00e      	b.n	8006888 <_malloc_r+0xa0>
 800686a:	6822      	ldr	r2, [r4, #0]
 800686c:	1b52      	subs	r2, r2, r5
 800686e:	d41e      	bmi.n	80068ae <_malloc_r+0xc6>
 8006870:	2a0b      	cmp	r2, #11
 8006872:	d916      	bls.n	80068a2 <_malloc_r+0xba>
 8006874:	1961      	adds	r1, r4, r5
 8006876:	42a3      	cmp	r3, r4
 8006878:	6025      	str	r5, [r4, #0]
 800687a:	bf18      	it	ne
 800687c:	6059      	strne	r1, [r3, #4]
 800687e:	6863      	ldr	r3, [r4, #4]
 8006880:	bf08      	it	eq
 8006882:	6031      	streq	r1, [r6, #0]
 8006884:	5162      	str	r2, [r4, r5]
 8006886:	604b      	str	r3, [r1, #4]
 8006888:	4638      	mov	r0, r7
 800688a:	f104 060b 	add.w	r6, r4, #11
 800688e:	f000 f9ed 	bl	8006c6c <__malloc_unlock>
 8006892:	f026 0607 	bic.w	r6, r6, #7
 8006896:	1d23      	adds	r3, r4, #4
 8006898:	1af2      	subs	r2, r6, r3
 800689a:	d0b6      	beq.n	800680a <_malloc_r+0x22>
 800689c:	1b9b      	subs	r3, r3, r6
 800689e:	50a3      	str	r3, [r4, r2]
 80068a0:	e7b3      	b.n	800680a <_malloc_r+0x22>
 80068a2:	6862      	ldr	r2, [r4, #4]
 80068a4:	42a3      	cmp	r3, r4
 80068a6:	bf0c      	ite	eq
 80068a8:	6032      	streq	r2, [r6, #0]
 80068aa:	605a      	strne	r2, [r3, #4]
 80068ac:	e7ec      	b.n	8006888 <_malloc_r+0xa0>
 80068ae:	4623      	mov	r3, r4
 80068b0:	6864      	ldr	r4, [r4, #4]
 80068b2:	e7b2      	b.n	800681a <_malloc_r+0x32>
 80068b4:	4634      	mov	r4, r6
 80068b6:	6876      	ldr	r6, [r6, #4]
 80068b8:	e7b9      	b.n	800682e <_malloc_r+0x46>
 80068ba:	230c      	movs	r3, #12
 80068bc:	4638      	mov	r0, r7
 80068be:	603b      	str	r3, [r7, #0]
 80068c0:	f000 f9d4 	bl	8006c6c <__malloc_unlock>
 80068c4:	e7a1      	b.n	800680a <_malloc_r+0x22>
 80068c6:	6025      	str	r5, [r4, #0]
 80068c8:	e7de      	b.n	8006888 <_malloc_r+0xa0>
 80068ca:	bf00      	nop
 80068cc:	20000338 	.word	0x20000338

080068d0 <__ssputs_r>:
 80068d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068d4:	688e      	ldr	r6, [r1, #8]
 80068d6:	4682      	mov	sl, r0
 80068d8:	429e      	cmp	r6, r3
 80068da:	460c      	mov	r4, r1
 80068dc:	4690      	mov	r8, r2
 80068de:	461f      	mov	r7, r3
 80068e0:	d838      	bhi.n	8006954 <__ssputs_r+0x84>
 80068e2:	898a      	ldrh	r2, [r1, #12]
 80068e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80068e8:	d032      	beq.n	8006950 <__ssputs_r+0x80>
 80068ea:	6825      	ldr	r5, [r4, #0]
 80068ec:	6909      	ldr	r1, [r1, #16]
 80068ee:	3301      	adds	r3, #1
 80068f0:	eba5 0901 	sub.w	r9, r5, r1
 80068f4:	6965      	ldr	r5, [r4, #20]
 80068f6:	444b      	add	r3, r9
 80068f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80068fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006900:	106d      	asrs	r5, r5, #1
 8006902:	429d      	cmp	r5, r3
 8006904:	bf38      	it	cc
 8006906:	461d      	movcc	r5, r3
 8006908:	0553      	lsls	r3, r2, #21
 800690a:	d531      	bpl.n	8006970 <__ssputs_r+0xa0>
 800690c:	4629      	mov	r1, r5
 800690e:	f7ff ff6b 	bl	80067e8 <_malloc_r>
 8006912:	4606      	mov	r6, r0
 8006914:	b950      	cbnz	r0, 800692c <__ssputs_r+0x5c>
 8006916:	230c      	movs	r3, #12
 8006918:	f04f 30ff 	mov.w	r0, #4294967295
 800691c:	f8ca 3000 	str.w	r3, [sl]
 8006920:	89a3      	ldrh	r3, [r4, #12]
 8006922:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006926:	81a3      	strh	r3, [r4, #12]
 8006928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800692c:	464a      	mov	r2, r9
 800692e:	6921      	ldr	r1, [r4, #16]
 8006930:	f7ff fb4e 	bl	8005fd0 <memcpy>
 8006934:	89a3      	ldrh	r3, [r4, #12]
 8006936:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800693a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800693e:	81a3      	strh	r3, [r4, #12]
 8006940:	6126      	str	r6, [r4, #16]
 8006942:	444e      	add	r6, r9
 8006944:	6026      	str	r6, [r4, #0]
 8006946:	463e      	mov	r6, r7
 8006948:	6165      	str	r5, [r4, #20]
 800694a:	eba5 0509 	sub.w	r5, r5, r9
 800694e:	60a5      	str	r5, [r4, #8]
 8006950:	42be      	cmp	r6, r7
 8006952:	d900      	bls.n	8006956 <__ssputs_r+0x86>
 8006954:	463e      	mov	r6, r7
 8006956:	4632      	mov	r2, r6
 8006958:	4641      	mov	r1, r8
 800695a:	6820      	ldr	r0, [r4, #0]
 800695c:	f000 f966 	bl	8006c2c <memmove>
 8006960:	68a3      	ldr	r3, [r4, #8]
 8006962:	2000      	movs	r0, #0
 8006964:	1b9b      	subs	r3, r3, r6
 8006966:	60a3      	str	r3, [r4, #8]
 8006968:	6823      	ldr	r3, [r4, #0]
 800696a:	4433      	add	r3, r6
 800696c:	6023      	str	r3, [r4, #0]
 800696e:	e7db      	b.n	8006928 <__ssputs_r+0x58>
 8006970:	462a      	mov	r2, r5
 8006972:	f000 f981 	bl	8006c78 <_realloc_r>
 8006976:	4606      	mov	r6, r0
 8006978:	2800      	cmp	r0, #0
 800697a:	d1e1      	bne.n	8006940 <__ssputs_r+0x70>
 800697c:	4650      	mov	r0, sl
 800697e:	6921      	ldr	r1, [r4, #16]
 8006980:	f7ff feca 	bl	8006718 <_free_r>
 8006984:	e7c7      	b.n	8006916 <__ssputs_r+0x46>
	...

08006988 <_svfiprintf_r>:
 8006988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800698c:	4698      	mov	r8, r3
 800698e:	898b      	ldrh	r3, [r1, #12]
 8006990:	4607      	mov	r7, r0
 8006992:	061b      	lsls	r3, r3, #24
 8006994:	460d      	mov	r5, r1
 8006996:	4614      	mov	r4, r2
 8006998:	b09d      	sub	sp, #116	; 0x74
 800699a:	d50e      	bpl.n	80069ba <_svfiprintf_r+0x32>
 800699c:	690b      	ldr	r3, [r1, #16]
 800699e:	b963      	cbnz	r3, 80069ba <_svfiprintf_r+0x32>
 80069a0:	2140      	movs	r1, #64	; 0x40
 80069a2:	f7ff ff21 	bl	80067e8 <_malloc_r>
 80069a6:	6028      	str	r0, [r5, #0]
 80069a8:	6128      	str	r0, [r5, #16]
 80069aa:	b920      	cbnz	r0, 80069b6 <_svfiprintf_r+0x2e>
 80069ac:	230c      	movs	r3, #12
 80069ae:	603b      	str	r3, [r7, #0]
 80069b0:	f04f 30ff 	mov.w	r0, #4294967295
 80069b4:	e0d1      	b.n	8006b5a <_svfiprintf_r+0x1d2>
 80069b6:	2340      	movs	r3, #64	; 0x40
 80069b8:	616b      	str	r3, [r5, #20]
 80069ba:	2300      	movs	r3, #0
 80069bc:	9309      	str	r3, [sp, #36]	; 0x24
 80069be:	2320      	movs	r3, #32
 80069c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80069c4:	2330      	movs	r3, #48	; 0x30
 80069c6:	f04f 0901 	mov.w	r9, #1
 80069ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80069ce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006b74 <_svfiprintf_r+0x1ec>
 80069d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80069d6:	4623      	mov	r3, r4
 80069d8:	469a      	mov	sl, r3
 80069da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069de:	b10a      	cbz	r2, 80069e4 <_svfiprintf_r+0x5c>
 80069e0:	2a25      	cmp	r2, #37	; 0x25
 80069e2:	d1f9      	bne.n	80069d8 <_svfiprintf_r+0x50>
 80069e4:	ebba 0b04 	subs.w	fp, sl, r4
 80069e8:	d00b      	beq.n	8006a02 <_svfiprintf_r+0x7a>
 80069ea:	465b      	mov	r3, fp
 80069ec:	4622      	mov	r2, r4
 80069ee:	4629      	mov	r1, r5
 80069f0:	4638      	mov	r0, r7
 80069f2:	f7ff ff6d 	bl	80068d0 <__ssputs_r>
 80069f6:	3001      	adds	r0, #1
 80069f8:	f000 80aa 	beq.w	8006b50 <_svfiprintf_r+0x1c8>
 80069fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069fe:	445a      	add	r2, fp
 8006a00:	9209      	str	r2, [sp, #36]	; 0x24
 8006a02:	f89a 3000 	ldrb.w	r3, [sl]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	f000 80a2 	beq.w	8006b50 <_svfiprintf_r+0x1c8>
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a16:	f10a 0a01 	add.w	sl, sl, #1
 8006a1a:	9304      	str	r3, [sp, #16]
 8006a1c:	9307      	str	r3, [sp, #28]
 8006a1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a22:	931a      	str	r3, [sp, #104]	; 0x68
 8006a24:	4654      	mov	r4, sl
 8006a26:	2205      	movs	r2, #5
 8006a28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a2c:	4851      	ldr	r0, [pc, #324]	; (8006b74 <_svfiprintf_r+0x1ec>)
 8006a2e:	f7ff fac1 	bl	8005fb4 <memchr>
 8006a32:	9a04      	ldr	r2, [sp, #16]
 8006a34:	b9d8      	cbnz	r0, 8006a6e <_svfiprintf_r+0xe6>
 8006a36:	06d0      	lsls	r0, r2, #27
 8006a38:	bf44      	itt	mi
 8006a3a:	2320      	movmi	r3, #32
 8006a3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a40:	0711      	lsls	r1, r2, #28
 8006a42:	bf44      	itt	mi
 8006a44:	232b      	movmi	r3, #43	; 0x2b
 8006a46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a4a:	f89a 3000 	ldrb.w	r3, [sl]
 8006a4e:	2b2a      	cmp	r3, #42	; 0x2a
 8006a50:	d015      	beq.n	8006a7e <_svfiprintf_r+0xf6>
 8006a52:	4654      	mov	r4, sl
 8006a54:	2000      	movs	r0, #0
 8006a56:	f04f 0c0a 	mov.w	ip, #10
 8006a5a:	9a07      	ldr	r2, [sp, #28]
 8006a5c:	4621      	mov	r1, r4
 8006a5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a62:	3b30      	subs	r3, #48	; 0x30
 8006a64:	2b09      	cmp	r3, #9
 8006a66:	d94e      	bls.n	8006b06 <_svfiprintf_r+0x17e>
 8006a68:	b1b0      	cbz	r0, 8006a98 <_svfiprintf_r+0x110>
 8006a6a:	9207      	str	r2, [sp, #28]
 8006a6c:	e014      	b.n	8006a98 <_svfiprintf_r+0x110>
 8006a6e:	eba0 0308 	sub.w	r3, r0, r8
 8006a72:	fa09 f303 	lsl.w	r3, r9, r3
 8006a76:	4313      	orrs	r3, r2
 8006a78:	46a2      	mov	sl, r4
 8006a7a:	9304      	str	r3, [sp, #16]
 8006a7c:	e7d2      	b.n	8006a24 <_svfiprintf_r+0x9c>
 8006a7e:	9b03      	ldr	r3, [sp, #12]
 8006a80:	1d19      	adds	r1, r3, #4
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	9103      	str	r1, [sp, #12]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	bfbb      	ittet	lt
 8006a8a:	425b      	neglt	r3, r3
 8006a8c:	f042 0202 	orrlt.w	r2, r2, #2
 8006a90:	9307      	strge	r3, [sp, #28]
 8006a92:	9307      	strlt	r3, [sp, #28]
 8006a94:	bfb8      	it	lt
 8006a96:	9204      	strlt	r2, [sp, #16]
 8006a98:	7823      	ldrb	r3, [r4, #0]
 8006a9a:	2b2e      	cmp	r3, #46	; 0x2e
 8006a9c:	d10c      	bne.n	8006ab8 <_svfiprintf_r+0x130>
 8006a9e:	7863      	ldrb	r3, [r4, #1]
 8006aa0:	2b2a      	cmp	r3, #42	; 0x2a
 8006aa2:	d135      	bne.n	8006b10 <_svfiprintf_r+0x188>
 8006aa4:	9b03      	ldr	r3, [sp, #12]
 8006aa6:	3402      	adds	r4, #2
 8006aa8:	1d1a      	adds	r2, r3, #4
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	9203      	str	r2, [sp, #12]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	bfb8      	it	lt
 8006ab2:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ab6:	9305      	str	r3, [sp, #20]
 8006ab8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006b78 <_svfiprintf_r+0x1f0>
 8006abc:	2203      	movs	r2, #3
 8006abe:	4650      	mov	r0, sl
 8006ac0:	7821      	ldrb	r1, [r4, #0]
 8006ac2:	f7ff fa77 	bl	8005fb4 <memchr>
 8006ac6:	b140      	cbz	r0, 8006ada <_svfiprintf_r+0x152>
 8006ac8:	2340      	movs	r3, #64	; 0x40
 8006aca:	eba0 000a 	sub.w	r0, r0, sl
 8006ace:	fa03 f000 	lsl.w	r0, r3, r0
 8006ad2:	9b04      	ldr	r3, [sp, #16]
 8006ad4:	3401      	adds	r4, #1
 8006ad6:	4303      	orrs	r3, r0
 8006ad8:	9304      	str	r3, [sp, #16]
 8006ada:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ade:	2206      	movs	r2, #6
 8006ae0:	4826      	ldr	r0, [pc, #152]	; (8006b7c <_svfiprintf_r+0x1f4>)
 8006ae2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ae6:	f7ff fa65 	bl	8005fb4 <memchr>
 8006aea:	2800      	cmp	r0, #0
 8006aec:	d038      	beq.n	8006b60 <_svfiprintf_r+0x1d8>
 8006aee:	4b24      	ldr	r3, [pc, #144]	; (8006b80 <_svfiprintf_r+0x1f8>)
 8006af0:	bb1b      	cbnz	r3, 8006b3a <_svfiprintf_r+0x1b2>
 8006af2:	9b03      	ldr	r3, [sp, #12]
 8006af4:	3307      	adds	r3, #7
 8006af6:	f023 0307 	bic.w	r3, r3, #7
 8006afa:	3308      	adds	r3, #8
 8006afc:	9303      	str	r3, [sp, #12]
 8006afe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b00:	4433      	add	r3, r6
 8006b02:	9309      	str	r3, [sp, #36]	; 0x24
 8006b04:	e767      	b.n	80069d6 <_svfiprintf_r+0x4e>
 8006b06:	460c      	mov	r4, r1
 8006b08:	2001      	movs	r0, #1
 8006b0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b0e:	e7a5      	b.n	8006a5c <_svfiprintf_r+0xd4>
 8006b10:	2300      	movs	r3, #0
 8006b12:	f04f 0c0a 	mov.w	ip, #10
 8006b16:	4619      	mov	r1, r3
 8006b18:	3401      	adds	r4, #1
 8006b1a:	9305      	str	r3, [sp, #20]
 8006b1c:	4620      	mov	r0, r4
 8006b1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b22:	3a30      	subs	r2, #48	; 0x30
 8006b24:	2a09      	cmp	r2, #9
 8006b26:	d903      	bls.n	8006b30 <_svfiprintf_r+0x1a8>
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d0c5      	beq.n	8006ab8 <_svfiprintf_r+0x130>
 8006b2c:	9105      	str	r1, [sp, #20]
 8006b2e:	e7c3      	b.n	8006ab8 <_svfiprintf_r+0x130>
 8006b30:	4604      	mov	r4, r0
 8006b32:	2301      	movs	r3, #1
 8006b34:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b38:	e7f0      	b.n	8006b1c <_svfiprintf_r+0x194>
 8006b3a:	ab03      	add	r3, sp, #12
 8006b3c:	9300      	str	r3, [sp, #0]
 8006b3e:	462a      	mov	r2, r5
 8006b40:	4638      	mov	r0, r7
 8006b42:	4b10      	ldr	r3, [pc, #64]	; (8006b84 <_svfiprintf_r+0x1fc>)
 8006b44:	a904      	add	r1, sp, #16
 8006b46:	f7fd ffcd 	bl	8004ae4 <_printf_float>
 8006b4a:	1c42      	adds	r2, r0, #1
 8006b4c:	4606      	mov	r6, r0
 8006b4e:	d1d6      	bne.n	8006afe <_svfiprintf_r+0x176>
 8006b50:	89ab      	ldrh	r3, [r5, #12]
 8006b52:	065b      	lsls	r3, r3, #25
 8006b54:	f53f af2c 	bmi.w	80069b0 <_svfiprintf_r+0x28>
 8006b58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b5a:	b01d      	add	sp, #116	; 0x74
 8006b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b60:	ab03      	add	r3, sp, #12
 8006b62:	9300      	str	r3, [sp, #0]
 8006b64:	462a      	mov	r2, r5
 8006b66:	4638      	mov	r0, r7
 8006b68:	4b06      	ldr	r3, [pc, #24]	; (8006b84 <_svfiprintf_r+0x1fc>)
 8006b6a:	a904      	add	r1, sp, #16
 8006b6c:	f7fe fa56 	bl	800501c <_printf_i>
 8006b70:	e7eb      	b.n	8006b4a <_svfiprintf_r+0x1c2>
 8006b72:	bf00      	nop
 8006b74:	08007a5c 	.word	0x08007a5c
 8006b78:	08007a62 	.word	0x08007a62
 8006b7c:	08007a66 	.word	0x08007a66
 8006b80:	08004ae5 	.word	0x08004ae5
 8006b84:	080068d1 	.word	0x080068d1

08006b88 <_sbrk_r>:
 8006b88:	b538      	push	{r3, r4, r5, lr}
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	4d05      	ldr	r5, [pc, #20]	; (8006ba4 <_sbrk_r+0x1c>)
 8006b8e:	4604      	mov	r4, r0
 8006b90:	4608      	mov	r0, r1
 8006b92:	602b      	str	r3, [r5, #0]
 8006b94:	f7fb fb26 	bl	80021e4 <_sbrk>
 8006b98:	1c43      	adds	r3, r0, #1
 8006b9a:	d102      	bne.n	8006ba2 <_sbrk_r+0x1a>
 8006b9c:	682b      	ldr	r3, [r5, #0]
 8006b9e:	b103      	cbz	r3, 8006ba2 <_sbrk_r+0x1a>
 8006ba0:	6023      	str	r3, [r4, #0]
 8006ba2:	bd38      	pop	{r3, r4, r5, pc}
 8006ba4:	20000340 	.word	0x20000340

08006ba8 <__assert_func>:
 8006ba8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006baa:	4614      	mov	r4, r2
 8006bac:	461a      	mov	r2, r3
 8006bae:	4b09      	ldr	r3, [pc, #36]	; (8006bd4 <__assert_func+0x2c>)
 8006bb0:	4605      	mov	r5, r0
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	68d8      	ldr	r0, [r3, #12]
 8006bb6:	b14c      	cbz	r4, 8006bcc <__assert_func+0x24>
 8006bb8:	4b07      	ldr	r3, [pc, #28]	; (8006bd8 <__assert_func+0x30>)
 8006bba:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006bbe:	9100      	str	r1, [sp, #0]
 8006bc0:	462b      	mov	r3, r5
 8006bc2:	4906      	ldr	r1, [pc, #24]	; (8006bdc <__assert_func+0x34>)
 8006bc4:	f000 f80e 	bl	8006be4 <fiprintf>
 8006bc8:	f000 faaa 	bl	8007120 <abort>
 8006bcc:	4b04      	ldr	r3, [pc, #16]	; (8006be0 <__assert_func+0x38>)
 8006bce:	461c      	mov	r4, r3
 8006bd0:	e7f3      	b.n	8006bba <__assert_func+0x12>
 8006bd2:	bf00      	nop
 8006bd4:	20000018 	.word	0x20000018
 8006bd8:	08007a6d 	.word	0x08007a6d
 8006bdc:	08007a7a 	.word	0x08007a7a
 8006be0:	08007aa8 	.word	0x08007aa8

08006be4 <fiprintf>:
 8006be4:	b40e      	push	{r1, r2, r3}
 8006be6:	b503      	push	{r0, r1, lr}
 8006be8:	4601      	mov	r1, r0
 8006bea:	ab03      	add	r3, sp, #12
 8006bec:	4805      	ldr	r0, [pc, #20]	; (8006c04 <fiprintf+0x20>)
 8006bee:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bf2:	6800      	ldr	r0, [r0, #0]
 8006bf4:	9301      	str	r3, [sp, #4]
 8006bf6:	f000 f895 	bl	8006d24 <_vfiprintf_r>
 8006bfa:	b002      	add	sp, #8
 8006bfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c00:	b003      	add	sp, #12
 8006c02:	4770      	bx	lr
 8006c04:	20000018 	.word	0x20000018

08006c08 <__ascii_mbtowc>:
 8006c08:	b082      	sub	sp, #8
 8006c0a:	b901      	cbnz	r1, 8006c0e <__ascii_mbtowc+0x6>
 8006c0c:	a901      	add	r1, sp, #4
 8006c0e:	b142      	cbz	r2, 8006c22 <__ascii_mbtowc+0x1a>
 8006c10:	b14b      	cbz	r3, 8006c26 <__ascii_mbtowc+0x1e>
 8006c12:	7813      	ldrb	r3, [r2, #0]
 8006c14:	600b      	str	r3, [r1, #0]
 8006c16:	7812      	ldrb	r2, [r2, #0]
 8006c18:	1e10      	subs	r0, r2, #0
 8006c1a:	bf18      	it	ne
 8006c1c:	2001      	movne	r0, #1
 8006c1e:	b002      	add	sp, #8
 8006c20:	4770      	bx	lr
 8006c22:	4610      	mov	r0, r2
 8006c24:	e7fb      	b.n	8006c1e <__ascii_mbtowc+0x16>
 8006c26:	f06f 0001 	mvn.w	r0, #1
 8006c2a:	e7f8      	b.n	8006c1e <__ascii_mbtowc+0x16>

08006c2c <memmove>:
 8006c2c:	4288      	cmp	r0, r1
 8006c2e:	b510      	push	{r4, lr}
 8006c30:	eb01 0402 	add.w	r4, r1, r2
 8006c34:	d902      	bls.n	8006c3c <memmove+0x10>
 8006c36:	4284      	cmp	r4, r0
 8006c38:	4623      	mov	r3, r4
 8006c3a:	d807      	bhi.n	8006c4c <memmove+0x20>
 8006c3c:	1e43      	subs	r3, r0, #1
 8006c3e:	42a1      	cmp	r1, r4
 8006c40:	d008      	beq.n	8006c54 <memmove+0x28>
 8006c42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c4a:	e7f8      	b.n	8006c3e <memmove+0x12>
 8006c4c:	4601      	mov	r1, r0
 8006c4e:	4402      	add	r2, r0
 8006c50:	428a      	cmp	r2, r1
 8006c52:	d100      	bne.n	8006c56 <memmove+0x2a>
 8006c54:	bd10      	pop	{r4, pc}
 8006c56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c5e:	e7f7      	b.n	8006c50 <memmove+0x24>

08006c60 <__malloc_lock>:
 8006c60:	4801      	ldr	r0, [pc, #4]	; (8006c68 <__malloc_lock+0x8>)
 8006c62:	f000 bc19 	b.w	8007498 <__retarget_lock_acquire_recursive>
 8006c66:	bf00      	nop
 8006c68:	20000344 	.word	0x20000344

08006c6c <__malloc_unlock>:
 8006c6c:	4801      	ldr	r0, [pc, #4]	; (8006c74 <__malloc_unlock+0x8>)
 8006c6e:	f000 bc14 	b.w	800749a <__retarget_lock_release_recursive>
 8006c72:	bf00      	nop
 8006c74:	20000344 	.word	0x20000344

08006c78 <_realloc_r>:
 8006c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c7c:	4680      	mov	r8, r0
 8006c7e:	4614      	mov	r4, r2
 8006c80:	460e      	mov	r6, r1
 8006c82:	b921      	cbnz	r1, 8006c8e <_realloc_r+0x16>
 8006c84:	4611      	mov	r1, r2
 8006c86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c8a:	f7ff bdad 	b.w	80067e8 <_malloc_r>
 8006c8e:	b92a      	cbnz	r2, 8006c9c <_realloc_r+0x24>
 8006c90:	f7ff fd42 	bl	8006718 <_free_r>
 8006c94:	4625      	mov	r5, r4
 8006c96:	4628      	mov	r0, r5
 8006c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c9c:	f000 fc64 	bl	8007568 <_malloc_usable_size_r>
 8006ca0:	4284      	cmp	r4, r0
 8006ca2:	4607      	mov	r7, r0
 8006ca4:	d802      	bhi.n	8006cac <_realloc_r+0x34>
 8006ca6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006caa:	d812      	bhi.n	8006cd2 <_realloc_r+0x5a>
 8006cac:	4621      	mov	r1, r4
 8006cae:	4640      	mov	r0, r8
 8006cb0:	f7ff fd9a 	bl	80067e8 <_malloc_r>
 8006cb4:	4605      	mov	r5, r0
 8006cb6:	2800      	cmp	r0, #0
 8006cb8:	d0ed      	beq.n	8006c96 <_realloc_r+0x1e>
 8006cba:	42bc      	cmp	r4, r7
 8006cbc:	4622      	mov	r2, r4
 8006cbe:	4631      	mov	r1, r6
 8006cc0:	bf28      	it	cs
 8006cc2:	463a      	movcs	r2, r7
 8006cc4:	f7ff f984 	bl	8005fd0 <memcpy>
 8006cc8:	4631      	mov	r1, r6
 8006cca:	4640      	mov	r0, r8
 8006ccc:	f7ff fd24 	bl	8006718 <_free_r>
 8006cd0:	e7e1      	b.n	8006c96 <_realloc_r+0x1e>
 8006cd2:	4635      	mov	r5, r6
 8006cd4:	e7df      	b.n	8006c96 <_realloc_r+0x1e>

08006cd6 <__sfputc_r>:
 8006cd6:	6893      	ldr	r3, [r2, #8]
 8006cd8:	b410      	push	{r4}
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	6093      	str	r3, [r2, #8]
 8006ce0:	da07      	bge.n	8006cf2 <__sfputc_r+0x1c>
 8006ce2:	6994      	ldr	r4, [r2, #24]
 8006ce4:	42a3      	cmp	r3, r4
 8006ce6:	db01      	blt.n	8006cec <__sfputc_r+0x16>
 8006ce8:	290a      	cmp	r1, #10
 8006cea:	d102      	bne.n	8006cf2 <__sfputc_r+0x1c>
 8006cec:	bc10      	pop	{r4}
 8006cee:	f000 b949 	b.w	8006f84 <__swbuf_r>
 8006cf2:	6813      	ldr	r3, [r2, #0]
 8006cf4:	1c58      	adds	r0, r3, #1
 8006cf6:	6010      	str	r0, [r2, #0]
 8006cf8:	7019      	strb	r1, [r3, #0]
 8006cfa:	4608      	mov	r0, r1
 8006cfc:	bc10      	pop	{r4}
 8006cfe:	4770      	bx	lr

08006d00 <__sfputs_r>:
 8006d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d02:	4606      	mov	r6, r0
 8006d04:	460f      	mov	r7, r1
 8006d06:	4614      	mov	r4, r2
 8006d08:	18d5      	adds	r5, r2, r3
 8006d0a:	42ac      	cmp	r4, r5
 8006d0c:	d101      	bne.n	8006d12 <__sfputs_r+0x12>
 8006d0e:	2000      	movs	r0, #0
 8006d10:	e007      	b.n	8006d22 <__sfputs_r+0x22>
 8006d12:	463a      	mov	r2, r7
 8006d14:	4630      	mov	r0, r6
 8006d16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d1a:	f7ff ffdc 	bl	8006cd6 <__sfputc_r>
 8006d1e:	1c43      	adds	r3, r0, #1
 8006d20:	d1f3      	bne.n	8006d0a <__sfputs_r+0xa>
 8006d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006d24 <_vfiprintf_r>:
 8006d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d28:	460d      	mov	r5, r1
 8006d2a:	4614      	mov	r4, r2
 8006d2c:	4698      	mov	r8, r3
 8006d2e:	4606      	mov	r6, r0
 8006d30:	b09d      	sub	sp, #116	; 0x74
 8006d32:	b118      	cbz	r0, 8006d3c <_vfiprintf_r+0x18>
 8006d34:	6983      	ldr	r3, [r0, #24]
 8006d36:	b90b      	cbnz	r3, 8006d3c <_vfiprintf_r+0x18>
 8006d38:	f000 fb10 	bl	800735c <__sinit>
 8006d3c:	4b89      	ldr	r3, [pc, #548]	; (8006f64 <_vfiprintf_r+0x240>)
 8006d3e:	429d      	cmp	r5, r3
 8006d40:	d11b      	bne.n	8006d7a <_vfiprintf_r+0x56>
 8006d42:	6875      	ldr	r5, [r6, #4]
 8006d44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d46:	07d9      	lsls	r1, r3, #31
 8006d48:	d405      	bmi.n	8006d56 <_vfiprintf_r+0x32>
 8006d4a:	89ab      	ldrh	r3, [r5, #12]
 8006d4c:	059a      	lsls	r2, r3, #22
 8006d4e:	d402      	bmi.n	8006d56 <_vfiprintf_r+0x32>
 8006d50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d52:	f000 fba1 	bl	8007498 <__retarget_lock_acquire_recursive>
 8006d56:	89ab      	ldrh	r3, [r5, #12]
 8006d58:	071b      	lsls	r3, r3, #28
 8006d5a:	d501      	bpl.n	8006d60 <_vfiprintf_r+0x3c>
 8006d5c:	692b      	ldr	r3, [r5, #16]
 8006d5e:	b9eb      	cbnz	r3, 8006d9c <_vfiprintf_r+0x78>
 8006d60:	4629      	mov	r1, r5
 8006d62:	4630      	mov	r0, r6
 8006d64:	f000 f96e 	bl	8007044 <__swsetup_r>
 8006d68:	b1c0      	cbz	r0, 8006d9c <_vfiprintf_r+0x78>
 8006d6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d6c:	07dc      	lsls	r4, r3, #31
 8006d6e:	d50e      	bpl.n	8006d8e <_vfiprintf_r+0x6a>
 8006d70:	f04f 30ff 	mov.w	r0, #4294967295
 8006d74:	b01d      	add	sp, #116	; 0x74
 8006d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d7a:	4b7b      	ldr	r3, [pc, #492]	; (8006f68 <_vfiprintf_r+0x244>)
 8006d7c:	429d      	cmp	r5, r3
 8006d7e:	d101      	bne.n	8006d84 <_vfiprintf_r+0x60>
 8006d80:	68b5      	ldr	r5, [r6, #8]
 8006d82:	e7df      	b.n	8006d44 <_vfiprintf_r+0x20>
 8006d84:	4b79      	ldr	r3, [pc, #484]	; (8006f6c <_vfiprintf_r+0x248>)
 8006d86:	429d      	cmp	r5, r3
 8006d88:	bf08      	it	eq
 8006d8a:	68f5      	ldreq	r5, [r6, #12]
 8006d8c:	e7da      	b.n	8006d44 <_vfiprintf_r+0x20>
 8006d8e:	89ab      	ldrh	r3, [r5, #12]
 8006d90:	0598      	lsls	r0, r3, #22
 8006d92:	d4ed      	bmi.n	8006d70 <_vfiprintf_r+0x4c>
 8006d94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d96:	f000 fb80 	bl	800749a <__retarget_lock_release_recursive>
 8006d9a:	e7e9      	b.n	8006d70 <_vfiprintf_r+0x4c>
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	9309      	str	r3, [sp, #36]	; 0x24
 8006da0:	2320      	movs	r3, #32
 8006da2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006da6:	2330      	movs	r3, #48	; 0x30
 8006da8:	f04f 0901 	mov.w	r9, #1
 8006dac:	f8cd 800c 	str.w	r8, [sp, #12]
 8006db0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006f70 <_vfiprintf_r+0x24c>
 8006db4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006db8:	4623      	mov	r3, r4
 8006dba:	469a      	mov	sl, r3
 8006dbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dc0:	b10a      	cbz	r2, 8006dc6 <_vfiprintf_r+0xa2>
 8006dc2:	2a25      	cmp	r2, #37	; 0x25
 8006dc4:	d1f9      	bne.n	8006dba <_vfiprintf_r+0x96>
 8006dc6:	ebba 0b04 	subs.w	fp, sl, r4
 8006dca:	d00b      	beq.n	8006de4 <_vfiprintf_r+0xc0>
 8006dcc:	465b      	mov	r3, fp
 8006dce:	4622      	mov	r2, r4
 8006dd0:	4629      	mov	r1, r5
 8006dd2:	4630      	mov	r0, r6
 8006dd4:	f7ff ff94 	bl	8006d00 <__sfputs_r>
 8006dd8:	3001      	adds	r0, #1
 8006dda:	f000 80aa 	beq.w	8006f32 <_vfiprintf_r+0x20e>
 8006dde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006de0:	445a      	add	r2, fp
 8006de2:	9209      	str	r2, [sp, #36]	; 0x24
 8006de4:	f89a 3000 	ldrb.w	r3, [sl]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f000 80a2 	beq.w	8006f32 <_vfiprintf_r+0x20e>
 8006dee:	2300      	movs	r3, #0
 8006df0:	f04f 32ff 	mov.w	r2, #4294967295
 8006df4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006df8:	f10a 0a01 	add.w	sl, sl, #1
 8006dfc:	9304      	str	r3, [sp, #16]
 8006dfe:	9307      	str	r3, [sp, #28]
 8006e00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e04:	931a      	str	r3, [sp, #104]	; 0x68
 8006e06:	4654      	mov	r4, sl
 8006e08:	2205      	movs	r2, #5
 8006e0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e0e:	4858      	ldr	r0, [pc, #352]	; (8006f70 <_vfiprintf_r+0x24c>)
 8006e10:	f7ff f8d0 	bl	8005fb4 <memchr>
 8006e14:	9a04      	ldr	r2, [sp, #16]
 8006e16:	b9d8      	cbnz	r0, 8006e50 <_vfiprintf_r+0x12c>
 8006e18:	06d1      	lsls	r1, r2, #27
 8006e1a:	bf44      	itt	mi
 8006e1c:	2320      	movmi	r3, #32
 8006e1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e22:	0713      	lsls	r3, r2, #28
 8006e24:	bf44      	itt	mi
 8006e26:	232b      	movmi	r3, #43	; 0x2b
 8006e28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e2c:	f89a 3000 	ldrb.w	r3, [sl]
 8006e30:	2b2a      	cmp	r3, #42	; 0x2a
 8006e32:	d015      	beq.n	8006e60 <_vfiprintf_r+0x13c>
 8006e34:	4654      	mov	r4, sl
 8006e36:	2000      	movs	r0, #0
 8006e38:	f04f 0c0a 	mov.w	ip, #10
 8006e3c:	9a07      	ldr	r2, [sp, #28]
 8006e3e:	4621      	mov	r1, r4
 8006e40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e44:	3b30      	subs	r3, #48	; 0x30
 8006e46:	2b09      	cmp	r3, #9
 8006e48:	d94e      	bls.n	8006ee8 <_vfiprintf_r+0x1c4>
 8006e4a:	b1b0      	cbz	r0, 8006e7a <_vfiprintf_r+0x156>
 8006e4c:	9207      	str	r2, [sp, #28]
 8006e4e:	e014      	b.n	8006e7a <_vfiprintf_r+0x156>
 8006e50:	eba0 0308 	sub.w	r3, r0, r8
 8006e54:	fa09 f303 	lsl.w	r3, r9, r3
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	46a2      	mov	sl, r4
 8006e5c:	9304      	str	r3, [sp, #16]
 8006e5e:	e7d2      	b.n	8006e06 <_vfiprintf_r+0xe2>
 8006e60:	9b03      	ldr	r3, [sp, #12]
 8006e62:	1d19      	adds	r1, r3, #4
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	9103      	str	r1, [sp, #12]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	bfbb      	ittet	lt
 8006e6c:	425b      	neglt	r3, r3
 8006e6e:	f042 0202 	orrlt.w	r2, r2, #2
 8006e72:	9307      	strge	r3, [sp, #28]
 8006e74:	9307      	strlt	r3, [sp, #28]
 8006e76:	bfb8      	it	lt
 8006e78:	9204      	strlt	r2, [sp, #16]
 8006e7a:	7823      	ldrb	r3, [r4, #0]
 8006e7c:	2b2e      	cmp	r3, #46	; 0x2e
 8006e7e:	d10c      	bne.n	8006e9a <_vfiprintf_r+0x176>
 8006e80:	7863      	ldrb	r3, [r4, #1]
 8006e82:	2b2a      	cmp	r3, #42	; 0x2a
 8006e84:	d135      	bne.n	8006ef2 <_vfiprintf_r+0x1ce>
 8006e86:	9b03      	ldr	r3, [sp, #12]
 8006e88:	3402      	adds	r4, #2
 8006e8a:	1d1a      	adds	r2, r3, #4
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	9203      	str	r2, [sp, #12]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	bfb8      	it	lt
 8006e94:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e98:	9305      	str	r3, [sp, #20]
 8006e9a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006f74 <_vfiprintf_r+0x250>
 8006e9e:	2203      	movs	r2, #3
 8006ea0:	4650      	mov	r0, sl
 8006ea2:	7821      	ldrb	r1, [r4, #0]
 8006ea4:	f7ff f886 	bl	8005fb4 <memchr>
 8006ea8:	b140      	cbz	r0, 8006ebc <_vfiprintf_r+0x198>
 8006eaa:	2340      	movs	r3, #64	; 0x40
 8006eac:	eba0 000a 	sub.w	r0, r0, sl
 8006eb0:	fa03 f000 	lsl.w	r0, r3, r0
 8006eb4:	9b04      	ldr	r3, [sp, #16]
 8006eb6:	3401      	adds	r4, #1
 8006eb8:	4303      	orrs	r3, r0
 8006eba:	9304      	str	r3, [sp, #16]
 8006ebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ec0:	2206      	movs	r2, #6
 8006ec2:	482d      	ldr	r0, [pc, #180]	; (8006f78 <_vfiprintf_r+0x254>)
 8006ec4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ec8:	f7ff f874 	bl	8005fb4 <memchr>
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	d03f      	beq.n	8006f50 <_vfiprintf_r+0x22c>
 8006ed0:	4b2a      	ldr	r3, [pc, #168]	; (8006f7c <_vfiprintf_r+0x258>)
 8006ed2:	bb1b      	cbnz	r3, 8006f1c <_vfiprintf_r+0x1f8>
 8006ed4:	9b03      	ldr	r3, [sp, #12]
 8006ed6:	3307      	adds	r3, #7
 8006ed8:	f023 0307 	bic.w	r3, r3, #7
 8006edc:	3308      	adds	r3, #8
 8006ede:	9303      	str	r3, [sp, #12]
 8006ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ee2:	443b      	add	r3, r7
 8006ee4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ee6:	e767      	b.n	8006db8 <_vfiprintf_r+0x94>
 8006ee8:	460c      	mov	r4, r1
 8006eea:	2001      	movs	r0, #1
 8006eec:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ef0:	e7a5      	b.n	8006e3e <_vfiprintf_r+0x11a>
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	f04f 0c0a 	mov.w	ip, #10
 8006ef8:	4619      	mov	r1, r3
 8006efa:	3401      	adds	r4, #1
 8006efc:	9305      	str	r3, [sp, #20]
 8006efe:	4620      	mov	r0, r4
 8006f00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f04:	3a30      	subs	r2, #48	; 0x30
 8006f06:	2a09      	cmp	r2, #9
 8006f08:	d903      	bls.n	8006f12 <_vfiprintf_r+0x1ee>
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d0c5      	beq.n	8006e9a <_vfiprintf_r+0x176>
 8006f0e:	9105      	str	r1, [sp, #20]
 8006f10:	e7c3      	b.n	8006e9a <_vfiprintf_r+0x176>
 8006f12:	4604      	mov	r4, r0
 8006f14:	2301      	movs	r3, #1
 8006f16:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f1a:	e7f0      	b.n	8006efe <_vfiprintf_r+0x1da>
 8006f1c:	ab03      	add	r3, sp, #12
 8006f1e:	9300      	str	r3, [sp, #0]
 8006f20:	462a      	mov	r2, r5
 8006f22:	4630      	mov	r0, r6
 8006f24:	4b16      	ldr	r3, [pc, #88]	; (8006f80 <_vfiprintf_r+0x25c>)
 8006f26:	a904      	add	r1, sp, #16
 8006f28:	f7fd fddc 	bl	8004ae4 <_printf_float>
 8006f2c:	4607      	mov	r7, r0
 8006f2e:	1c78      	adds	r0, r7, #1
 8006f30:	d1d6      	bne.n	8006ee0 <_vfiprintf_r+0x1bc>
 8006f32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f34:	07d9      	lsls	r1, r3, #31
 8006f36:	d405      	bmi.n	8006f44 <_vfiprintf_r+0x220>
 8006f38:	89ab      	ldrh	r3, [r5, #12]
 8006f3a:	059a      	lsls	r2, r3, #22
 8006f3c:	d402      	bmi.n	8006f44 <_vfiprintf_r+0x220>
 8006f3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f40:	f000 faab 	bl	800749a <__retarget_lock_release_recursive>
 8006f44:	89ab      	ldrh	r3, [r5, #12]
 8006f46:	065b      	lsls	r3, r3, #25
 8006f48:	f53f af12 	bmi.w	8006d70 <_vfiprintf_r+0x4c>
 8006f4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f4e:	e711      	b.n	8006d74 <_vfiprintf_r+0x50>
 8006f50:	ab03      	add	r3, sp, #12
 8006f52:	9300      	str	r3, [sp, #0]
 8006f54:	462a      	mov	r2, r5
 8006f56:	4630      	mov	r0, r6
 8006f58:	4b09      	ldr	r3, [pc, #36]	; (8006f80 <_vfiprintf_r+0x25c>)
 8006f5a:	a904      	add	r1, sp, #16
 8006f5c:	f7fe f85e 	bl	800501c <_printf_i>
 8006f60:	e7e4      	b.n	8006f2c <_vfiprintf_r+0x208>
 8006f62:	bf00      	nop
 8006f64:	08007bd4 	.word	0x08007bd4
 8006f68:	08007bf4 	.word	0x08007bf4
 8006f6c:	08007bb4 	.word	0x08007bb4
 8006f70:	08007a5c 	.word	0x08007a5c
 8006f74:	08007a62 	.word	0x08007a62
 8006f78:	08007a66 	.word	0x08007a66
 8006f7c:	08004ae5 	.word	0x08004ae5
 8006f80:	08006d01 	.word	0x08006d01

08006f84 <__swbuf_r>:
 8006f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f86:	460e      	mov	r6, r1
 8006f88:	4614      	mov	r4, r2
 8006f8a:	4605      	mov	r5, r0
 8006f8c:	b118      	cbz	r0, 8006f96 <__swbuf_r+0x12>
 8006f8e:	6983      	ldr	r3, [r0, #24]
 8006f90:	b90b      	cbnz	r3, 8006f96 <__swbuf_r+0x12>
 8006f92:	f000 f9e3 	bl	800735c <__sinit>
 8006f96:	4b21      	ldr	r3, [pc, #132]	; (800701c <__swbuf_r+0x98>)
 8006f98:	429c      	cmp	r4, r3
 8006f9a:	d12b      	bne.n	8006ff4 <__swbuf_r+0x70>
 8006f9c:	686c      	ldr	r4, [r5, #4]
 8006f9e:	69a3      	ldr	r3, [r4, #24]
 8006fa0:	60a3      	str	r3, [r4, #8]
 8006fa2:	89a3      	ldrh	r3, [r4, #12]
 8006fa4:	071a      	lsls	r2, r3, #28
 8006fa6:	d52f      	bpl.n	8007008 <__swbuf_r+0x84>
 8006fa8:	6923      	ldr	r3, [r4, #16]
 8006faa:	b36b      	cbz	r3, 8007008 <__swbuf_r+0x84>
 8006fac:	6923      	ldr	r3, [r4, #16]
 8006fae:	6820      	ldr	r0, [r4, #0]
 8006fb0:	b2f6      	uxtb	r6, r6
 8006fb2:	1ac0      	subs	r0, r0, r3
 8006fb4:	6963      	ldr	r3, [r4, #20]
 8006fb6:	4637      	mov	r7, r6
 8006fb8:	4283      	cmp	r3, r0
 8006fba:	dc04      	bgt.n	8006fc6 <__swbuf_r+0x42>
 8006fbc:	4621      	mov	r1, r4
 8006fbe:	4628      	mov	r0, r5
 8006fc0:	f000 f938 	bl	8007234 <_fflush_r>
 8006fc4:	bb30      	cbnz	r0, 8007014 <__swbuf_r+0x90>
 8006fc6:	68a3      	ldr	r3, [r4, #8]
 8006fc8:	3001      	adds	r0, #1
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	60a3      	str	r3, [r4, #8]
 8006fce:	6823      	ldr	r3, [r4, #0]
 8006fd0:	1c5a      	adds	r2, r3, #1
 8006fd2:	6022      	str	r2, [r4, #0]
 8006fd4:	701e      	strb	r6, [r3, #0]
 8006fd6:	6963      	ldr	r3, [r4, #20]
 8006fd8:	4283      	cmp	r3, r0
 8006fda:	d004      	beq.n	8006fe6 <__swbuf_r+0x62>
 8006fdc:	89a3      	ldrh	r3, [r4, #12]
 8006fde:	07db      	lsls	r3, r3, #31
 8006fe0:	d506      	bpl.n	8006ff0 <__swbuf_r+0x6c>
 8006fe2:	2e0a      	cmp	r6, #10
 8006fe4:	d104      	bne.n	8006ff0 <__swbuf_r+0x6c>
 8006fe6:	4621      	mov	r1, r4
 8006fe8:	4628      	mov	r0, r5
 8006fea:	f000 f923 	bl	8007234 <_fflush_r>
 8006fee:	b988      	cbnz	r0, 8007014 <__swbuf_r+0x90>
 8006ff0:	4638      	mov	r0, r7
 8006ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ff4:	4b0a      	ldr	r3, [pc, #40]	; (8007020 <__swbuf_r+0x9c>)
 8006ff6:	429c      	cmp	r4, r3
 8006ff8:	d101      	bne.n	8006ffe <__swbuf_r+0x7a>
 8006ffa:	68ac      	ldr	r4, [r5, #8]
 8006ffc:	e7cf      	b.n	8006f9e <__swbuf_r+0x1a>
 8006ffe:	4b09      	ldr	r3, [pc, #36]	; (8007024 <__swbuf_r+0xa0>)
 8007000:	429c      	cmp	r4, r3
 8007002:	bf08      	it	eq
 8007004:	68ec      	ldreq	r4, [r5, #12]
 8007006:	e7ca      	b.n	8006f9e <__swbuf_r+0x1a>
 8007008:	4621      	mov	r1, r4
 800700a:	4628      	mov	r0, r5
 800700c:	f000 f81a 	bl	8007044 <__swsetup_r>
 8007010:	2800      	cmp	r0, #0
 8007012:	d0cb      	beq.n	8006fac <__swbuf_r+0x28>
 8007014:	f04f 37ff 	mov.w	r7, #4294967295
 8007018:	e7ea      	b.n	8006ff0 <__swbuf_r+0x6c>
 800701a:	bf00      	nop
 800701c:	08007bd4 	.word	0x08007bd4
 8007020:	08007bf4 	.word	0x08007bf4
 8007024:	08007bb4 	.word	0x08007bb4

08007028 <__ascii_wctomb>:
 8007028:	4603      	mov	r3, r0
 800702a:	4608      	mov	r0, r1
 800702c:	b141      	cbz	r1, 8007040 <__ascii_wctomb+0x18>
 800702e:	2aff      	cmp	r2, #255	; 0xff
 8007030:	d904      	bls.n	800703c <__ascii_wctomb+0x14>
 8007032:	228a      	movs	r2, #138	; 0x8a
 8007034:	f04f 30ff 	mov.w	r0, #4294967295
 8007038:	601a      	str	r2, [r3, #0]
 800703a:	4770      	bx	lr
 800703c:	2001      	movs	r0, #1
 800703e:	700a      	strb	r2, [r1, #0]
 8007040:	4770      	bx	lr
	...

08007044 <__swsetup_r>:
 8007044:	4b32      	ldr	r3, [pc, #200]	; (8007110 <__swsetup_r+0xcc>)
 8007046:	b570      	push	{r4, r5, r6, lr}
 8007048:	681d      	ldr	r5, [r3, #0]
 800704a:	4606      	mov	r6, r0
 800704c:	460c      	mov	r4, r1
 800704e:	b125      	cbz	r5, 800705a <__swsetup_r+0x16>
 8007050:	69ab      	ldr	r3, [r5, #24]
 8007052:	b913      	cbnz	r3, 800705a <__swsetup_r+0x16>
 8007054:	4628      	mov	r0, r5
 8007056:	f000 f981 	bl	800735c <__sinit>
 800705a:	4b2e      	ldr	r3, [pc, #184]	; (8007114 <__swsetup_r+0xd0>)
 800705c:	429c      	cmp	r4, r3
 800705e:	d10f      	bne.n	8007080 <__swsetup_r+0x3c>
 8007060:	686c      	ldr	r4, [r5, #4]
 8007062:	89a3      	ldrh	r3, [r4, #12]
 8007064:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007068:	0719      	lsls	r1, r3, #28
 800706a:	d42c      	bmi.n	80070c6 <__swsetup_r+0x82>
 800706c:	06dd      	lsls	r5, r3, #27
 800706e:	d411      	bmi.n	8007094 <__swsetup_r+0x50>
 8007070:	2309      	movs	r3, #9
 8007072:	6033      	str	r3, [r6, #0]
 8007074:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007078:	f04f 30ff 	mov.w	r0, #4294967295
 800707c:	81a3      	strh	r3, [r4, #12]
 800707e:	e03e      	b.n	80070fe <__swsetup_r+0xba>
 8007080:	4b25      	ldr	r3, [pc, #148]	; (8007118 <__swsetup_r+0xd4>)
 8007082:	429c      	cmp	r4, r3
 8007084:	d101      	bne.n	800708a <__swsetup_r+0x46>
 8007086:	68ac      	ldr	r4, [r5, #8]
 8007088:	e7eb      	b.n	8007062 <__swsetup_r+0x1e>
 800708a:	4b24      	ldr	r3, [pc, #144]	; (800711c <__swsetup_r+0xd8>)
 800708c:	429c      	cmp	r4, r3
 800708e:	bf08      	it	eq
 8007090:	68ec      	ldreq	r4, [r5, #12]
 8007092:	e7e6      	b.n	8007062 <__swsetup_r+0x1e>
 8007094:	0758      	lsls	r0, r3, #29
 8007096:	d512      	bpl.n	80070be <__swsetup_r+0x7a>
 8007098:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800709a:	b141      	cbz	r1, 80070ae <__swsetup_r+0x6a>
 800709c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070a0:	4299      	cmp	r1, r3
 80070a2:	d002      	beq.n	80070aa <__swsetup_r+0x66>
 80070a4:	4630      	mov	r0, r6
 80070a6:	f7ff fb37 	bl	8006718 <_free_r>
 80070aa:	2300      	movs	r3, #0
 80070ac:	6363      	str	r3, [r4, #52]	; 0x34
 80070ae:	89a3      	ldrh	r3, [r4, #12]
 80070b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80070b4:	81a3      	strh	r3, [r4, #12]
 80070b6:	2300      	movs	r3, #0
 80070b8:	6063      	str	r3, [r4, #4]
 80070ba:	6923      	ldr	r3, [r4, #16]
 80070bc:	6023      	str	r3, [r4, #0]
 80070be:	89a3      	ldrh	r3, [r4, #12]
 80070c0:	f043 0308 	orr.w	r3, r3, #8
 80070c4:	81a3      	strh	r3, [r4, #12]
 80070c6:	6923      	ldr	r3, [r4, #16]
 80070c8:	b94b      	cbnz	r3, 80070de <__swsetup_r+0x9a>
 80070ca:	89a3      	ldrh	r3, [r4, #12]
 80070cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80070d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070d4:	d003      	beq.n	80070de <__swsetup_r+0x9a>
 80070d6:	4621      	mov	r1, r4
 80070d8:	4630      	mov	r0, r6
 80070da:	f000 fa05 	bl	80074e8 <__smakebuf_r>
 80070de:	89a0      	ldrh	r0, [r4, #12]
 80070e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80070e4:	f010 0301 	ands.w	r3, r0, #1
 80070e8:	d00a      	beq.n	8007100 <__swsetup_r+0xbc>
 80070ea:	2300      	movs	r3, #0
 80070ec:	60a3      	str	r3, [r4, #8]
 80070ee:	6963      	ldr	r3, [r4, #20]
 80070f0:	425b      	negs	r3, r3
 80070f2:	61a3      	str	r3, [r4, #24]
 80070f4:	6923      	ldr	r3, [r4, #16]
 80070f6:	b943      	cbnz	r3, 800710a <__swsetup_r+0xc6>
 80070f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80070fc:	d1ba      	bne.n	8007074 <__swsetup_r+0x30>
 80070fe:	bd70      	pop	{r4, r5, r6, pc}
 8007100:	0781      	lsls	r1, r0, #30
 8007102:	bf58      	it	pl
 8007104:	6963      	ldrpl	r3, [r4, #20]
 8007106:	60a3      	str	r3, [r4, #8]
 8007108:	e7f4      	b.n	80070f4 <__swsetup_r+0xb0>
 800710a:	2000      	movs	r0, #0
 800710c:	e7f7      	b.n	80070fe <__swsetup_r+0xba>
 800710e:	bf00      	nop
 8007110:	20000018 	.word	0x20000018
 8007114:	08007bd4 	.word	0x08007bd4
 8007118:	08007bf4 	.word	0x08007bf4
 800711c:	08007bb4 	.word	0x08007bb4

08007120 <abort>:
 8007120:	2006      	movs	r0, #6
 8007122:	b508      	push	{r3, lr}
 8007124:	f000 fa50 	bl	80075c8 <raise>
 8007128:	2001      	movs	r0, #1
 800712a:	f7fa ffe7 	bl	80020fc <_exit>
	...

08007130 <__sflush_r>:
 8007130:	898a      	ldrh	r2, [r1, #12]
 8007132:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007134:	4605      	mov	r5, r0
 8007136:	0710      	lsls	r0, r2, #28
 8007138:	460c      	mov	r4, r1
 800713a:	d457      	bmi.n	80071ec <__sflush_r+0xbc>
 800713c:	684b      	ldr	r3, [r1, #4]
 800713e:	2b00      	cmp	r3, #0
 8007140:	dc04      	bgt.n	800714c <__sflush_r+0x1c>
 8007142:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007144:	2b00      	cmp	r3, #0
 8007146:	dc01      	bgt.n	800714c <__sflush_r+0x1c>
 8007148:	2000      	movs	r0, #0
 800714a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800714c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800714e:	2e00      	cmp	r6, #0
 8007150:	d0fa      	beq.n	8007148 <__sflush_r+0x18>
 8007152:	2300      	movs	r3, #0
 8007154:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007158:	682f      	ldr	r7, [r5, #0]
 800715a:	602b      	str	r3, [r5, #0]
 800715c:	d032      	beq.n	80071c4 <__sflush_r+0x94>
 800715e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007160:	89a3      	ldrh	r3, [r4, #12]
 8007162:	075a      	lsls	r2, r3, #29
 8007164:	d505      	bpl.n	8007172 <__sflush_r+0x42>
 8007166:	6863      	ldr	r3, [r4, #4]
 8007168:	1ac0      	subs	r0, r0, r3
 800716a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800716c:	b10b      	cbz	r3, 8007172 <__sflush_r+0x42>
 800716e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007170:	1ac0      	subs	r0, r0, r3
 8007172:	2300      	movs	r3, #0
 8007174:	4602      	mov	r2, r0
 8007176:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007178:	4628      	mov	r0, r5
 800717a:	6a21      	ldr	r1, [r4, #32]
 800717c:	47b0      	blx	r6
 800717e:	1c43      	adds	r3, r0, #1
 8007180:	89a3      	ldrh	r3, [r4, #12]
 8007182:	d106      	bne.n	8007192 <__sflush_r+0x62>
 8007184:	6829      	ldr	r1, [r5, #0]
 8007186:	291d      	cmp	r1, #29
 8007188:	d82c      	bhi.n	80071e4 <__sflush_r+0xb4>
 800718a:	4a29      	ldr	r2, [pc, #164]	; (8007230 <__sflush_r+0x100>)
 800718c:	40ca      	lsrs	r2, r1
 800718e:	07d6      	lsls	r6, r2, #31
 8007190:	d528      	bpl.n	80071e4 <__sflush_r+0xb4>
 8007192:	2200      	movs	r2, #0
 8007194:	6062      	str	r2, [r4, #4]
 8007196:	6922      	ldr	r2, [r4, #16]
 8007198:	04d9      	lsls	r1, r3, #19
 800719a:	6022      	str	r2, [r4, #0]
 800719c:	d504      	bpl.n	80071a8 <__sflush_r+0x78>
 800719e:	1c42      	adds	r2, r0, #1
 80071a0:	d101      	bne.n	80071a6 <__sflush_r+0x76>
 80071a2:	682b      	ldr	r3, [r5, #0]
 80071a4:	b903      	cbnz	r3, 80071a8 <__sflush_r+0x78>
 80071a6:	6560      	str	r0, [r4, #84]	; 0x54
 80071a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071aa:	602f      	str	r7, [r5, #0]
 80071ac:	2900      	cmp	r1, #0
 80071ae:	d0cb      	beq.n	8007148 <__sflush_r+0x18>
 80071b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071b4:	4299      	cmp	r1, r3
 80071b6:	d002      	beq.n	80071be <__sflush_r+0x8e>
 80071b8:	4628      	mov	r0, r5
 80071ba:	f7ff faad 	bl	8006718 <_free_r>
 80071be:	2000      	movs	r0, #0
 80071c0:	6360      	str	r0, [r4, #52]	; 0x34
 80071c2:	e7c2      	b.n	800714a <__sflush_r+0x1a>
 80071c4:	6a21      	ldr	r1, [r4, #32]
 80071c6:	2301      	movs	r3, #1
 80071c8:	4628      	mov	r0, r5
 80071ca:	47b0      	blx	r6
 80071cc:	1c41      	adds	r1, r0, #1
 80071ce:	d1c7      	bne.n	8007160 <__sflush_r+0x30>
 80071d0:	682b      	ldr	r3, [r5, #0]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d0c4      	beq.n	8007160 <__sflush_r+0x30>
 80071d6:	2b1d      	cmp	r3, #29
 80071d8:	d001      	beq.n	80071de <__sflush_r+0xae>
 80071da:	2b16      	cmp	r3, #22
 80071dc:	d101      	bne.n	80071e2 <__sflush_r+0xb2>
 80071de:	602f      	str	r7, [r5, #0]
 80071e0:	e7b2      	b.n	8007148 <__sflush_r+0x18>
 80071e2:	89a3      	ldrh	r3, [r4, #12]
 80071e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071e8:	81a3      	strh	r3, [r4, #12]
 80071ea:	e7ae      	b.n	800714a <__sflush_r+0x1a>
 80071ec:	690f      	ldr	r7, [r1, #16]
 80071ee:	2f00      	cmp	r7, #0
 80071f0:	d0aa      	beq.n	8007148 <__sflush_r+0x18>
 80071f2:	0793      	lsls	r3, r2, #30
 80071f4:	bf18      	it	ne
 80071f6:	2300      	movne	r3, #0
 80071f8:	680e      	ldr	r6, [r1, #0]
 80071fa:	bf08      	it	eq
 80071fc:	694b      	ldreq	r3, [r1, #20]
 80071fe:	1bf6      	subs	r6, r6, r7
 8007200:	600f      	str	r7, [r1, #0]
 8007202:	608b      	str	r3, [r1, #8]
 8007204:	2e00      	cmp	r6, #0
 8007206:	dd9f      	ble.n	8007148 <__sflush_r+0x18>
 8007208:	4633      	mov	r3, r6
 800720a:	463a      	mov	r2, r7
 800720c:	4628      	mov	r0, r5
 800720e:	6a21      	ldr	r1, [r4, #32]
 8007210:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007214:	47e0      	blx	ip
 8007216:	2800      	cmp	r0, #0
 8007218:	dc06      	bgt.n	8007228 <__sflush_r+0xf8>
 800721a:	89a3      	ldrh	r3, [r4, #12]
 800721c:	f04f 30ff 	mov.w	r0, #4294967295
 8007220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007224:	81a3      	strh	r3, [r4, #12]
 8007226:	e790      	b.n	800714a <__sflush_r+0x1a>
 8007228:	4407      	add	r7, r0
 800722a:	1a36      	subs	r6, r6, r0
 800722c:	e7ea      	b.n	8007204 <__sflush_r+0xd4>
 800722e:	bf00      	nop
 8007230:	20400001 	.word	0x20400001

08007234 <_fflush_r>:
 8007234:	b538      	push	{r3, r4, r5, lr}
 8007236:	690b      	ldr	r3, [r1, #16]
 8007238:	4605      	mov	r5, r0
 800723a:	460c      	mov	r4, r1
 800723c:	b913      	cbnz	r3, 8007244 <_fflush_r+0x10>
 800723e:	2500      	movs	r5, #0
 8007240:	4628      	mov	r0, r5
 8007242:	bd38      	pop	{r3, r4, r5, pc}
 8007244:	b118      	cbz	r0, 800724e <_fflush_r+0x1a>
 8007246:	6983      	ldr	r3, [r0, #24]
 8007248:	b90b      	cbnz	r3, 800724e <_fflush_r+0x1a>
 800724a:	f000 f887 	bl	800735c <__sinit>
 800724e:	4b14      	ldr	r3, [pc, #80]	; (80072a0 <_fflush_r+0x6c>)
 8007250:	429c      	cmp	r4, r3
 8007252:	d11b      	bne.n	800728c <_fflush_r+0x58>
 8007254:	686c      	ldr	r4, [r5, #4]
 8007256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d0ef      	beq.n	800723e <_fflush_r+0xa>
 800725e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007260:	07d0      	lsls	r0, r2, #31
 8007262:	d404      	bmi.n	800726e <_fflush_r+0x3a>
 8007264:	0599      	lsls	r1, r3, #22
 8007266:	d402      	bmi.n	800726e <_fflush_r+0x3a>
 8007268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800726a:	f000 f915 	bl	8007498 <__retarget_lock_acquire_recursive>
 800726e:	4628      	mov	r0, r5
 8007270:	4621      	mov	r1, r4
 8007272:	f7ff ff5d 	bl	8007130 <__sflush_r>
 8007276:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007278:	4605      	mov	r5, r0
 800727a:	07da      	lsls	r2, r3, #31
 800727c:	d4e0      	bmi.n	8007240 <_fflush_r+0xc>
 800727e:	89a3      	ldrh	r3, [r4, #12]
 8007280:	059b      	lsls	r3, r3, #22
 8007282:	d4dd      	bmi.n	8007240 <_fflush_r+0xc>
 8007284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007286:	f000 f908 	bl	800749a <__retarget_lock_release_recursive>
 800728a:	e7d9      	b.n	8007240 <_fflush_r+0xc>
 800728c:	4b05      	ldr	r3, [pc, #20]	; (80072a4 <_fflush_r+0x70>)
 800728e:	429c      	cmp	r4, r3
 8007290:	d101      	bne.n	8007296 <_fflush_r+0x62>
 8007292:	68ac      	ldr	r4, [r5, #8]
 8007294:	e7df      	b.n	8007256 <_fflush_r+0x22>
 8007296:	4b04      	ldr	r3, [pc, #16]	; (80072a8 <_fflush_r+0x74>)
 8007298:	429c      	cmp	r4, r3
 800729a:	bf08      	it	eq
 800729c:	68ec      	ldreq	r4, [r5, #12]
 800729e:	e7da      	b.n	8007256 <_fflush_r+0x22>
 80072a0:	08007bd4 	.word	0x08007bd4
 80072a4:	08007bf4 	.word	0x08007bf4
 80072a8:	08007bb4 	.word	0x08007bb4

080072ac <std>:
 80072ac:	2300      	movs	r3, #0
 80072ae:	b510      	push	{r4, lr}
 80072b0:	4604      	mov	r4, r0
 80072b2:	e9c0 3300 	strd	r3, r3, [r0]
 80072b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80072ba:	6083      	str	r3, [r0, #8]
 80072bc:	8181      	strh	r1, [r0, #12]
 80072be:	6643      	str	r3, [r0, #100]	; 0x64
 80072c0:	81c2      	strh	r2, [r0, #14]
 80072c2:	6183      	str	r3, [r0, #24]
 80072c4:	4619      	mov	r1, r3
 80072c6:	2208      	movs	r2, #8
 80072c8:	305c      	adds	r0, #92	; 0x5c
 80072ca:	f7fd fb65 	bl	8004998 <memset>
 80072ce:	4b05      	ldr	r3, [pc, #20]	; (80072e4 <std+0x38>)
 80072d0:	6224      	str	r4, [r4, #32]
 80072d2:	6263      	str	r3, [r4, #36]	; 0x24
 80072d4:	4b04      	ldr	r3, [pc, #16]	; (80072e8 <std+0x3c>)
 80072d6:	62a3      	str	r3, [r4, #40]	; 0x28
 80072d8:	4b04      	ldr	r3, [pc, #16]	; (80072ec <std+0x40>)
 80072da:	62e3      	str	r3, [r4, #44]	; 0x2c
 80072dc:	4b04      	ldr	r3, [pc, #16]	; (80072f0 <std+0x44>)
 80072de:	6323      	str	r3, [r4, #48]	; 0x30
 80072e0:	bd10      	pop	{r4, pc}
 80072e2:	bf00      	nop
 80072e4:	08007601 	.word	0x08007601
 80072e8:	08007623 	.word	0x08007623
 80072ec:	0800765b 	.word	0x0800765b
 80072f0:	0800767f 	.word	0x0800767f

080072f4 <_cleanup_r>:
 80072f4:	4901      	ldr	r1, [pc, #4]	; (80072fc <_cleanup_r+0x8>)
 80072f6:	f000 b8af 	b.w	8007458 <_fwalk_reent>
 80072fa:	bf00      	nop
 80072fc:	08007235 	.word	0x08007235

08007300 <__sfmoreglue>:
 8007300:	2268      	movs	r2, #104	; 0x68
 8007302:	b570      	push	{r4, r5, r6, lr}
 8007304:	1e4d      	subs	r5, r1, #1
 8007306:	4355      	muls	r5, r2
 8007308:	460e      	mov	r6, r1
 800730a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800730e:	f7ff fa6b 	bl	80067e8 <_malloc_r>
 8007312:	4604      	mov	r4, r0
 8007314:	b140      	cbz	r0, 8007328 <__sfmoreglue+0x28>
 8007316:	2100      	movs	r1, #0
 8007318:	e9c0 1600 	strd	r1, r6, [r0]
 800731c:	300c      	adds	r0, #12
 800731e:	60a0      	str	r0, [r4, #8]
 8007320:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007324:	f7fd fb38 	bl	8004998 <memset>
 8007328:	4620      	mov	r0, r4
 800732a:	bd70      	pop	{r4, r5, r6, pc}

0800732c <__sfp_lock_acquire>:
 800732c:	4801      	ldr	r0, [pc, #4]	; (8007334 <__sfp_lock_acquire+0x8>)
 800732e:	f000 b8b3 	b.w	8007498 <__retarget_lock_acquire_recursive>
 8007332:	bf00      	nop
 8007334:	20000345 	.word	0x20000345

08007338 <__sfp_lock_release>:
 8007338:	4801      	ldr	r0, [pc, #4]	; (8007340 <__sfp_lock_release+0x8>)
 800733a:	f000 b8ae 	b.w	800749a <__retarget_lock_release_recursive>
 800733e:	bf00      	nop
 8007340:	20000345 	.word	0x20000345

08007344 <__sinit_lock_acquire>:
 8007344:	4801      	ldr	r0, [pc, #4]	; (800734c <__sinit_lock_acquire+0x8>)
 8007346:	f000 b8a7 	b.w	8007498 <__retarget_lock_acquire_recursive>
 800734a:	bf00      	nop
 800734c:	20000346 	.word	0x20000346

08007350 <__sinit_lock_release>:
 8007350:	4801      	ldr	r0, [pc, #4]	; (8007358 <__sinit_lock_release+0x8>)
 8007352:	f000 b8a2 	b.w	800749a <__retarget_lock_release_recursive>
 8007356:	bf00      	nop
 8007358:	20000346 	.word	0x20000346

0800735c <__sinit>:
 800735c:	b510      	push	{r4, lr}
 800735e:	4604      	mov	r4, r0
 8007360:	f7ff fff0 	bl	8007344 <__sinit_lock_acquire>
 8007364:	69a3      	ldr	r3, [r4, #24]
 8007366:	b11b      	cbz	r3, 8007370 <__sinit+0x14>
 8007368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800736c:	f7ff bff0 	b.w	8007350 <__sinit_lock_release>
 8007370:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007374:	6523      	str	r3, [r4, #80]	; 0x50
 8007376:	4b13      	ldr	r3, [pc, #76]	; (80073c4 <__sinit+0x68>)
 8007378:	4a13      	ldr	r2, [pc, #76]	; (80073c8 <__sinit+0x6c>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	62a2      	str	r2, [r4, #40]	; 0x28
 800737e:	42a3      	cmp	r3, r4
 8007380:	bf08      	it	eq
 8007382:	2301      	moveq	r3, #1
 8007384:	4620      	mov	r0, r4
 8007386:	bf08      	it	eq
 8007388:	61a3      	streq	r3, [r4, #24]
 800738a:	f000 f81f 	bl	80073cc <__sfp>
 800738e:	6060      	str	r0, [r4, #4]
 8007390:	4620      	mov	r0, r4
 8007392:	f000 f81b 	bl	80073cc <__sfp>
 8007396:	60a0      	str	r0, [r4, #8]
 8007398:	4620      	mov	r0, r4
 800739a:	f000 f817 	bl	80073cc <__sfp>
 800739e:	2200      	movs	r2, #0
 80073a0:	2104      	movs	r1, #4
 80073a2:	60e0      	str	r0, [r4, #12]
 80073a4:	6860      	ldr	r0, [r4, #4]
 80073a6:	f7ff ff81 	bl	80072ac <std>
 80073aa:	2201      	movs	r2, #1
 80073ac:	2109      	movs	r1, #9
 80073ae:	68a0      	ldr	r0, [r4, #8]
 80073b0:	f7ff ff7c 	bl	80072ac <std>
 80073b4:	2202      	movs	r2, #2
 80073b6:	2112      	movs	r1, #18
 80073b8:	68e0      	ldr	r0, [r4, #12]
 80073ba:	f7ff ff77 	bl	80072ac <std>
 80073be:	2301      	movs	r3, #1
 80073c0:	61a3      	str	r3, [r4, #24]
 80073c2:	e7d1      	b.n	8007368 <__sinit+0xc>
 80073c4:	0800783c 	.word	0x0800783c
 80073c8:	080072f5 	.word	0x080072f5

080073cc <__sfp>:
 80073cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ce:	4607      	mov	r7, r0
 80073d0:	f7ff ffac 	bl	800732c <__sfp_lock_acquire>
 80073d4:	4b1e      	ldr	r3, [pc, #120]	; (8007450 <__sfp+0x84>)
 80073d6:	681e      	ldr	r6, [r3, #0]
 80073d8:	69b3      	ldr	r3, [r6, #24]
 80073da:	b913      	cbnz	r3, 80073e2 <__sfp+0x16>
 80073dc:	4630      	mov	r0, r6
 80073de:	f7ff ffbd 	bl	800735c <__sinit>
 80073e2:	3648      	adds	r6, #72	; 0x48
 80073e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80073e8:	3b01      	subs	r3, #1
 80073ea:	d503      	bpl.n	80073f4 <__sfp+0x28>
 80073ec:	6833      	ldr	r3, [r6, #0]
 80073ee:	b30b      	cbz	r3, 8007434 <__sfp+0x68>
 80073f0:	6836      	ldr	r6, [r6, #0]
 80073f2:	e7f7      	b.n	80073e4 <__sfp+0x18>
 80073f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80073f8:	b9d5      	cbnz	r5, 8007430 <__sfp+0x64>
 80073fa:	4b16      	ldr	r3, [pc, #88]	; (8007454 <__sfp+0x88>)
 80073fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007400:	60e3      	str	r3, [r4, #12]
 8007402:	6665      	str	r5, [r4, #100]	; 0x64
 8007404:	f000 f847 	bl	8007496 <__retarget_lock_init_recursive>
 8007408:	f7ff ff96 	bl	8007338 <__sfp_lock_release>
 800740c:	2208      	movs	r2, #8
 800740e:	4629      	mov	r1, r5
 8007410:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007414:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007418:	6025      	str	r5, [r4, #0]
 800741a:	61a5      	str	r5, [r4, #24]
 800741c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007420:	f7fd faba 	bl	8004998 <memset>
 8007424:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007428:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800742c:	4620      	mov	r0, r4
 800742e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007430:	3468      	adds	r4, #104	; 0x68
 8007432:	e7d9      	b.n	80073e8 <__sfp+0x1c>
 8007434:	2104      	movs	r1, #4
 8007436:	4638      	mov	r0, r7
 8007438:	f7ff ff62 	bl	8007300 <__sfmoreglue>
 800743c:	4604      	mov	r4, r0
 800743e:	6030      	str	r0, [r6, #0]
 8007440:	2800      	cmp	r0, #0
 8007442:	d1d5      	bne.n	80073f0 <__sfp+0x24>
 8007444:	f7ff ff78 	bl	8007338 <__sfp_lock_release>
 8007448:	230c      	movs	r3, #12
 800744a:	603b      	str	r3, [r7, #0]
 800744c:	e7ee      	b.n	800742c <__sfp+0x60>
 800744e:	bf00      	nop
 8007450:	0800783c 	.word	0x0800783c
 8007454:	ffff0001 	.word	0xffff0001

08007458 <_fwalk_reent>:
 8007458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800745c:	4606      	mov	r6, r0
 800745e:	4688      	mov	r8, r1
 8007460:	2700      	movs	r7, #0
 8007462:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007466:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800746a:	f1b9 0901 	subs.w	r9, r9, #1
 800746e:	d505      	bpl.n	800747c <_fwalk_reent+0x24>
 8007470:	6824      	ldr	r4, [r4, #0]
 8007472:	2c00      	cmp	r4, #0
 8007474:	d1f7      	bne.n	8007466 <_fwalk_reent+0xe>
 8007476:	4638      	mov	r0, r7
 8007478:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800747c:	89ab      	ldrh	r3, [r5, #12]
 800747e:	2b01      	cmp	r3, #1
 8007480:	d907      	bls.n	8007492 <_fwalk_reent+0x3a>
 8007482:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007486:	3301      	adds	r3, #1
 8007488:	d003      	beq.n	8007492 <_fwalk_reent+0x3a>
 800748a:	4629      	mov	r1, r5
 800748c:	4630      	mov	r0, r6
 800748e:	47c0      	blx	r8
 8007490:	4307      	orrs	r7, r0
 8007492:	3568      	adds	r5, #104	; 0x68
 8007494:	e7e9      	b.n	800746a <_fwalk_reent+0x12>

08007496 <__retarget_lock_init_recursive>:
 8007496:	4770      	bx	lr

08007498 <__retarget_lock_acquire_recursive>:
 8007498:	4770      	bx	lr

0800749a <__retarget_lock_release_recursive>:
 800749a:	4770      	bx	lr

0800749c <__swhatbuf_r>:
 800749c:	b570      	push	{r4, r5, r6, lr}
 800749e:	460e      	mov	r6, r1
 80074a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074a4:	4614      	mov	r4, r2
 80074a6:	2900      	cmp	r1, #0
 80074a8:	461d      	mov	r5, r3
 80074aa:	b096      	sub	sp, #88	; 0x58
 80074ac:	da08      	bge.n	80074c0 <__swhatbuf_r+0x24>
 80074ae:	2200      	movs	r2, #0
 80074b0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80074b4:	602a      	str	r2, [r5, #0]
 80074b6:	061a      	lsls	r2, r3, #24
 80074b8:	d410      	bmi.n	80074dc <__swhatbuf_r+0x40>
 80074ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074be:	e00e      	b.n	80074de <__swhatbuf_r+0x42>
 80074c0:	466a      	mov	r2, sp
 80074c2:	f000 f903 	bl	80076cc <_fstat_r>
 80074c6:	2800      	cmp	r0, #0
 80074c8:	dbf1      	blt.n	80074ae <__swhatbuf_r+0x12>
 80074ca:	9a01      	ldr	r2, [sp, #4]
 80074cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80074d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80074d4:	425a      	negs	r2, r3
 80074d6:	415a      	adcs	r2, r3
 80074d8:	602a      	str	r2, [r5, #0]
 80074da:	e7ee      	b.n	80074ba <__swhatbuf_r+0x1e>
 80074dc:	2340      	movs	r3, #64	; 0x40
 80074de:	2000      	movs	r0, #0
 80074e0:	6023      	str	r3, [r4, #0]
 80074e2:	b016      	add	sp, #88	; 0x58
 80074e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080074e8 <__smakebuf_r>:
 80074e8:	898b      	ldrh	r3, [r1, #12]
 80074ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80074ec:	079d      	lsls	r5, r3, #30
 80074ee:	4606      	mov	r6, r0
 80074f0:	460c      	mov	r4, r1
 80074f2:	d507      	bpl.n	8007504 <__smakebuf_r+0x1c>
 80074f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80074f8:	6023      	str	r3, [r4, #0]
 80074fa:	6123      	str	r3, [r4, #16]
 80074fc:	2301      	movs	r3, #1
 80074fe:	6163      	str	r3, [r4, #20]
 8007500:	b002      	add	sp, #8
 8007502:	bd70      	pop	{r4, r5, r6, pc}
 8007504:	466a      	mov	r2, sp
 8007506:	ab01      	add	r3, sp, #4
 8007508:	f7ff ffc8 	bl	800749c <__swhatbuf_r>
 800750c:	9900      	ldr	r1, [sp, #0]
 800750e:	4605      	mov	r5, r0
 8007510:	4630      	mov	r0, r6
 8007512:	f7ff f969 	bl	80067e8 <_malloc_r>
 8007516:	b948      	cbnz	r0, 800752c <__smakebuf_r+0x44>
 8007518:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800751c:	059a      	lsls	r2, r3, #22
 800751e:	d4ef      	bmi.n	8007500 <__smakebuf_r+0x18>
 8007520:	f023 0303 	bic.w	r3, r3, #3
 8007524:	f043 0302 	orr.w	r3, r3, #2
 8007528:	81a3      	strh	r3, [r4, #12]
 800752a:	e7e3      	b.n	80074f4 <__smakebuf_r+0xc>
 800752c:	4b0d      	ldr	r3, [pc, #52]	; (8007564 <__smakebuf_r+0x7c>)
 800752e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007530:	89a3      	ldrh	r3, [r4, #12]
 8007532:	6020      	str	r0, [r4, #0]
 8007534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007538:	81a3      	strh	r3, [r4, #12]
 800753a:	9b00      	ldr	r3, [sp, #0]
 800753c:	6120      	str	r0, [r4, #16]
 800753e:	6163      	str	r3, [r4, #20]
 8007540:	9b01      	ldr	r3, [sp, #4]
 8007542:	b15b      	cbz	r3, 800755c <__smakebuf_r+0x74>
 8007544:	4630      	mov	r0, r6
 8007546:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800754a:	f000 f8d1 	bl	80076f0 <_isatty_r>
 800754e:	b128      	cbz	r0, 800755c <__smakebuf_r+0x74>
 8007550:	89a3      	ldrh	r3, [r4, #12]
 8007552:	f023 0303 	bic.w	r3, r3, #3
 8007556:	f043 0301 	orr.w	r3, r3, #1
 800755a:	81a3      	strh	r3, [r4, #12]
 800755c:	89a0      	ldrh	r0, [r4, #12]
 800755e:	4305      	orrs	r5, r0
 8007560:	81a5      	strh	r5, [r4, #12]
 8007562:	e7cd      	b.n	8007500 <__smakebuf_r+0x18>
 8007564:	080072f5 	.word	0x080072f5

08007568 <_malloc_usable_size_r>:
 8007568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800756c:	1f18      	subs	r0, r3, #4
 800756e:	2b00      	cmp	r3, #0
 8007570:	bfbc      	itt	lt
 8007572:	580b      	ldrlt	r3, [r1, r0]
 8007574:	18c0      	addlt	r0, r0, r3
 8007576:	4770      	bx	lr

08007578 <_raise_r>:
 8007578:	291f      	cmp	r1, #31
 800757a:	b538      	push	{r3, r4, r5, lr}
 800757c:	4604      	mov	r4, r0
 800757e:	460d      	mov	r5, r1
 8007580:	d904      	bls.n	800758c <_raise_r+0x14>
 8007582:	2316      	movs	r3, #22
 8007584:	6003      	str	r3, [r0, #0]
 8007586:	f04f 30ff 	mov.w	r0, #4294967295
 800758a:	bd38      	pop	{r3, r4, r5, pc}
 800758c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800758e:	b112      	cbz	r2, 8007596 <_raise_r+0x1e>
 8007590:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007594:	b94b      	cbnz	r3, 80075aa <_raise_r+0x32>
 8007596:	4620      	mov	r0, r4
 8007598:	f000 f830 	bl	80075fc <_getpid_r>
 800759c:	462a      	mov	r2, r5
 800759e:	4601      	mov	r1, r0
 80075a0:	4620      	mov	r0, r4
 80075a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075a6:	f000 b817 	b.w	80075d8 <_kill_r>
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d00a      	beq.n	80075c4 <_raise_r+0x4c>
 80075ae:	1c59      	adds	r1, r3, #1
 80075b0:	d103      	bne.n	80075ba <_raise_r+0x42>
 80075b2:	2316      	movs	r3, #22
 80075b4:	6003      	str	r3, [r0, #0]
 80075b6:	2001      	movs	r0, #1
 80075b8:	e7e7      	b.n	800758a <_raise_r+0x12>
 80075ba:	2400      	movs	r4, #0
 80075bc:	4628      	mov	r0, r5
 80075be:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80075c2:	4798      	blx	r3
 80075c4:	2000      	movs	r0, #0
 80075c6:	e7e0      	b.n	800758a <_raise_r+0x12>

080075c8 <raise>:
 80075c8:	4b02      	ldr	r3, [pc, #8]	; (80075d4 <raise+0xc>)
 80075ca:	4601      	mov	r1, r0
 80075cc:	6818      	ldr	r0, [r3, #0]
 80075ce:	f7ff bfd3 	b.w	8007578 <_raise_r>
 80075d2:	bf00      	nop
 80075d4:	20000018 	.word	0x20000018

080075d8 <_kill_r>:
 80075d8:	b538      	push	{r3, r4, r5, lr}
 80075da:	2300      	movs	r3, #0
 80075dc:	4d06      	ldr	r5, [pc, #24]	; (80075f8 <_kill_r+0x20>)
 80075de:	4604      	mov	r4, r0
 80075e0:	4608      	mov	r0, r1
 80075e2:	4611      	mov	r1, r2
 80075e4:	602b      	str	r3, [r5, #0]
 80075e6:	f7fa fd79 	bl	80020dc <_kill>
 80075ea:	1c43      	adds	r3, r0, #1
 80075ec:	d102      	bne.n	80075f4 <_kill_r+0x1c>
 80075ee:	682b      	ldr	r3, [r5, #0]
 80075f0:	b103      	cbz	r3, 80075f4 <_kill_r+0x1c>
 80075f2:	6023      	str	r3, [r4, #0]
 80075f4:	bd38      	pop	{r3, r4, r5, pc}
 80075f6:	bf00      	nop
 80075f8:	20000340 	.word	0x20000340

080075fc <_getpid_r>:
 80075fc:	f7fa bd67 	b.w	80020ce <_getpid>

08007600 <__sread>:
 8007600:	b510      	push	{r4, lr}
 8007602:	460c      	mov	r4, r1
 8007604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007608:	f000 f894 	bl	8007734 <_read_r>
 800760c:	2800      	cmp	r0, #0
 800760e:	bfab      	itete	ge
 8007610:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007612:	89a3      	ldrhlt	r3, [r4, #12]
 8007614:	181b      	addge	r3, r3, r0
 8007616:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800761a:	bfac      	ite	ge
 800761c:	6563      	strge	r3, [r4, #84]	; 0x54
 800761e:	81a3      	strhlt	r3, [r4, #12]
 8007620:	bd10      	pop	{r4, pc}

08007622 <__swrite>:
 8007622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007626:	461f      	mov	r7, r3
 8007628:	898b      	ldrh	r3, [r1, #12]
 800762a:	4605      	mov	r5, r0
 800762c:	05db      	lsls	r3, r3, #23
 800762e:	460c      	mov	r4, r1
 8007630:	4616      	mov	r6, r2
 8007632:	d505      	bpl.n	8007640 <__swrite+0x1e>
 8007634:	2302      	movs	r3, #2
 8007636:	2200      	movs	r2, #0
 8007638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800763c:	f000 f868 	bl	8007710 <_lseek_r>
 8007640:	89a3      	ldrh	r3, [r4, #12]
 8007642:	4632      	mov	r2, r6
 8007644:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007648:	81a3      	strh	r3, [r4, #12]
 800764a:	4628      	mov	r0, r5
 800764c:	463b      	mov	r3, r7
 800764e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007652:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007656:	f000 b817 	b.w	8007688 <_write_r>

0800765a <__sseek>:
 800765a:	b510      	push	{r4, lr}
 800765c:	460c      	mov	r4, r1
 800765e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007662:	f000 f855 	bl	8007710 <_lseek_r>
 8007666:	1c43      	adds	r3, r0, #1
 8007668:	89a3      	ldrh	r3, [r4, #12]
 800766a:	bf15      	itete	ne
 800766c:	6560      	strne	r0, [r4, #84]	; 0x54
 800766e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007672:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007676:	81a3      	strheq	r3, [r4, #12]
 8007678:	bf18      	it	ne
 800767a:	81a3      	strhne	r3, [r4, #12]
 800767c:	bd10      	pop	{r4, pc}

0800767e <__sclose>:
 800767e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007682:	f000 b813 	b.w	80076ac <_close_r>
	...

08007688 <_write_r>:
 8007688:	b538      	push	{r3, r4, r5, lr}
 800768a:	4604      	mov	r4, r0
 800768c:	4608      	mov	r0, r1
 800768e:	4611      	mov	r1, r2
 8007690:	2200      	movs	r2, #0
 8007692:	4d05      	ldr	r5, [pc, #20]	; (80076a8 <_write_r+0x20>)
 8007694:	602a      	str	r2, [r5, #0]
 8007696:	461a      	mov	r2, r3
 8007698:	f7fa fd57 	bl	800214a <_write>
 800769c:	1c43      	adds	r3, r0, #1
 800769e:	d102      	bne.n	80076a6 <_write_r+0x1e>
 80076a0:	682b      	ldr	r3, [r5, #0]
 80076a2:	b103      	cbz	r3, 80076a6 <_write_r+0x1e>
 80076a4:	6023      	str	r3, [r4, #0]
 80076a6:	bd38      	pop	{r3, r4, r5, pc}
 80076a8:	20000340 	.word	0x20000340

080076ac <_close_r>:
 80076ac:	b538      	push	{r3, r4, r5, lr}
 80076ae:	2300      	movs	r3, #0
 80076b0:	4d05      	ldr	r5, [pc, #20]	; (80076c8 <_close_r+0x1c>)
 80076b2:	4604      	mov	r4, r0
 80076b4:	4608      	mov	r0, r1
 80076b6:	602b      	str	r3, [r5, #0]
 80076b8:	f7fa fd63 	bl	8002182 <_close>
 80076bc:	1c43      	adds	r3, r0, #1
 80076be:	d102      	bne.n	80076c6 <_close_r+0x1a>
 80076c0:	682b      	ldr	r3, [r5, #0]
 80076c2:	b103      	cbz	r3, 80076c6 <_close_r+0x1a>
 80076c4:	6023      	str	r3, [r4, #0]
 80076c6:	bd38      	pop	{r3, r4, r5, pc}
 80076c8:	20000340 	.word	0x20000340

080076cc <_fstat_r>:
 80076cc:	b538      	push	{r3, r4, r5, lr}
 80076ce:	2300      	movs	r3, #0
 80076d0:	4d06      	ldr	r5, [pc, #24]	; (80076ec <_fstat_r+0x20>)
 80076d2:	4604      	mov	r4, r0
 80076d4:	4608      	mov	r0, r1
 80076d6:	4611      	mov	r1, r2
 80076d8:	602b      	str	r3, [r5, #0]
 80076da:	f7fa fd5d 	bl	8002198 <_fstat>
 80076de:	1c43      	adds	r3, r0, #1
 80076e0:	d102      	bne.n	80076e8 <_fstat_r+0x1c>
 80076e2:	682b      	ldr	r3, [r5, #0]
 80076e4:	b103      	cbz	r3, 80076e8 <_fstat_r+0x1c>
 80076e6:	6023      	str	r3, [r4, #0]
 80076e8:	bd38      	pop	{r3, r4, r5, pc}
 80076ea:	bf00      	nop
 80076ec:	20000340 	.word	0x20000340

080076f0 <_isatty_r>:
 80076f0:	b538      	push	{r3, r4, r5, lr}
 80076f2:	2300      	movs	r3, #0
 80076f4:	4d05      	ldr	r5, [pc, #20]	; (800770c <_isatty_r+0x1c>)
 80076f6:	4604      	mov	r4, r0
 80076f8:	4608      	mov	r0, r1
 80076fa:	602b      	str	r3, [r5, #0]
 80076fc:	f7fa fd5b 	bl	80021b6 <_isatty>
 8007700:	1c43      	adds	r3, r0, #1
 8007702:	d102      	bne.n	800770a <_isatty_r+0x1a>
 8007704:	682b      	ldr	r3, [r5, #0]
 8007706:	b103      	cbz	r3, 800770a <_isatty_r+0x1a>
 8007708:	6023      	str	r3, [r4, #0]
 800770a:	bd38      	pop	{r3, r4, r5, pc}
 800770c:	20000340 	.word	0x20000340

08007710 <_lseek_r>:
 8007710:	b538      	push	{r3, r4, r5, lr}
 8007712:	4604      	mov	r4, r0
 8007714:	4608      	mov	r0, r1
 8007716:	4611      	mov	r1, r2
 8007718:	2200      	movs	r2, #0
 800771a:	4d05      	ldr	r5, [pc, #20]	; (8007730 <_lseek_r+0x20>)
 800771c:	602a      	str	r2, [r5, #0]
 800771e:	461a      	mov	r2, r3
 8007720:	f7fa fd53 	bl	80021ca <_lseek>
 8007724:	1c43      	adds	r3, r0, #1
 8007726:	d102      	bne.n	800772e <_lseek_r+0x1e>
 8007728:	682b      	ldr	r3, [r5, #0]
 800772a:	b103      	cbz	r3, 800772e <_lseek_r+0x1e>
 800772c:	6023      	str	r3, [r4, #0]
 800772e:	bd38      	pop	{r3, r4, r5, pc}
 8007730:	20000340 	.word	0x20000340

08007734 <_read_r>:
 8007734:	b538      	push	{r3, r4, r5, lr}
 8007736:	4604      	mov	r4, r0
 8007738:	4608      	mov	r0, r1
 800773a:	4611      	mov	r1, r2
 800773c:	2200      	movs	r2, #0
 800773e:	4d05      	ldr	r5, [pc, #20]	; (8007754 <_read_r+0x20>)
 8007740:	602a      	str	r2, [r5, #0]
 8007742:	461a      	mov	r2, r3
 8007744:	f7fa fce4 	bl	8002110 <_read>
 8007748:	1c43      	adds	r3, r0, #1
 800774a:	d102      	bne.n	8007752 <_read_r+0x1e>
 800774c:	682b      	ldr	r3, [r5, #0]
 800774e:	b103      	cbz	r3, 8007752 <_read_r+0x1e>
 8007750:	6023      	str	r3, [r4, #0]
 8007752:	bd38      	pop	{r3, r4, r5, pc}
 8007754:	20000340 	.word	0x20000340

08007758 <_init>:
 8007758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800775a:	bf00      	nop
 800775c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800775e:	bc08      	pop	{r3}
 8007760:	469e      	mov	lr, r3
 8007762:	4770      	bx	lr

08007764 <_fini>:
 8007764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007766:	bf00      	nop
 8007768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800776a:	bc08      	pop	{r3}
 800776c:	469e      	mov	lr, r3
 800776e:	4770      	bx	lr
